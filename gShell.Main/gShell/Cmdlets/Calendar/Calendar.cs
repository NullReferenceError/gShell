// gShell is licensed under the GNU GENERAL PUBLIC LICENSE, Version 3
//
// http://www.gnu.org/licenses/gpl-3.0.en.html
//
// Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
// an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.
//
// gShell is based upon https://github.com/google/google-api-dotnet-client, which is licensed under the Apache 2.0
// license: https://github.com/google/google-api-dotnet-client/blob/master/LICENSE
//
// gShell is reliant upon the Google Apis. Please see the specific API pages for specific licensing information.

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a fork of google-apis-code-generator:
//       https://github.com/squid808/apis-client-generator
//
//     How neat is that? Pretty neat.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Linq;
using System.Management.Automation;
using Google.Apis.Calendar.v3;
using Google.Apis.Calendar.v3.Data;
using gCalendar = gShell.dotNet.Calendar;

namespace gShell.Cmdlets.Calendar
{
    /// <summary>
    /// <para type="synopsis">Creates a new Calendar API AclRule object.</para>
    /// <para type="description">This provides a Cmdlet-Based approach to creating a AclRule object which may be required as a parameter for some other Cmdlets in the Calendar API category.</para>
    /// <para type="description">You could alternately create this object by calling New-Object -TypeName Google.Apis.Calendar.v3.Data.AclRule</para>
    /// <list type="alertSet"><item><term>About this Cmdlet</term><description>
    /// Part of the gShell Project, relating to the Google Calendar API; see Related Links or use the -Online parameter.
    /// </description></item></list>
    /// <example>
    ///   <code>PS C:\> New-GCalendarAclRuleObj</code>
    ///   <para>This automatically generated example serves to show the bare minimum required to call this Cmdlet.</para>
    ///   <para>Additional examples may be added, viewed and edited by users on the community wiki at the URL found in the related links.</para>
    /// </example>
    /// <para type="link" uri="https://github.com/squid808/gShell/wiki/New-GCalendarAclRuleObj">[Wiki page for this Cmdlet]</para>
    /// <para type="link" uri="https://github.com/squid808/gShell/wiki/Getting-Started">[Getting started with gShell]</para>
    /// </summary>
    [Cmdlet(VerbsCommon.New, "GCalendarAclRuleObj",
    SupportsShouldProcess = true,
    HelpUri = @"https://github.com/squid808/gShell/wiki/New-GCalendarAclRuleObj")]
    [OutputType(typeof(Google.Apis.Calendar.v3.Data.AclRule))]
    public class NewGCalendarAclRuleObjCommand : PSCmdlet
    {
        #region Properties


        /// <summary>
        /// <para type="description">Identifier of the ACL rule.</para>
        /// </summary>
        [Parameter(Position = 0,
        Mandatory = false,
        ValueFromPipelineByPropertyName = true,
        HelpMessage = "Identifier of the ACL rule.")]
        public string Id { get; set; }

        /// <summary>
        /// <para type="description">The role assigned to the scope. Possible values are:- "none" - Provides no access.- "freeBusyReader" - Provides read access to free/busy information.- "reader" - Provides read access to the calendar. Private events will appear to users with reader access, but event details will be hidden.- "writer" - Provides read and write access to the calendar. Private events will appear to users with writer access, and event details will be visible.- "owner" - Provides ownership of the calendar. This role has all of the permissions of the writer role with the additional ability to see and manipulate ACLs.</para>
        /// </summary>
        [Parameter(Position = 1,
        Mandatory = false,
        ValueFromPipelineByPropertyName = true,
        HelpMessage = "The role assigned to the scope. Possible values are:  \n- \"none\" - Provides no access. \n- \"freeBusyReader\" - Provides read access to free/busy information. \n- \"reader\" - Provides read access to the calendar. Private events will appear to users with reader access, but event details will be hidden. \n- \"writer\" - Provides read and write access to the calendar. Private events will appear to users with writer access, and event details will be visible. \n- \"owner\" - Provides ownership of the calendar. This role has all of the permissions of the writer role with the additional ability to see and manipulate ACLs.")]
        public string Role { get; set; }

        /// <summary>
        /// <para type="description">The scope of the rule.</para>
        /// </summary>
        [Parameter(Position = 2,
        Mandatory = false,
        ValueFromPipelineByPropertyName = true,
        HelpMessage = "The scope of the rule.")]
        public AclRule.ScopeData Scope { get; set; }
        #endregion

        protected override void ProcessRecord()
        {
            var body = new Google.Apis.Calendar.v3.Data.AclRule()
            {
                Id = this.Id,
                Role = this.Role,
                Scope = this.Scope,
            };

            if (ShouldProcess("AclRule"))
            {
                WriteObject(body);
            }
        }
    }

    /// <summary>
    /// <para type="synopsis">Creates a new Calendar API AclRule.ScopeData object.</para>
    /// <para type="description">This provides a Cmdlet-Based approach to creating a AclRule.ScopeData object which may be required as a parameter for some other Cmdlets in the Calendar API category.</para>
    /// <para type="description">You could alternately create this object by calling New-Object -TypeName Google.Apis.Calendar.v3.Data.AclRule.ScopeData</para>
    /// <list type="alertSet"><item><term>About this Cmdlet</term><description>
    /// Part of the gShell Project, relating to the Google Calendar API; see Related Links or use the -Online parameter.
    /// </description></item></list>
    /// <example>
    ///   <code>PS C:\> New-GCalendarAclRuleScopeDataObj</code>
    ///   <para>This automatically generated example serves to show the bare minimum required to call this Cmdlet.</para>
    ///   <para>Additional examples may be added, viewed and edited by users on the community wiki at the URL found in the related links.</para>
    /// </example>
    /// <para type="link" uri="https://github.com/squid808/gShell/wiki/New-GCalendarAclRule.ScopeDataObj">[Wiki page for this Cmdlet]</para>
    /// <para type="link" uri="https://github.com/squid808/gShell/wiki/Getting-Started">[Getting started with gShell]</para>
    /// </summary>
    [Cmdlet(VerbsCommon.New, "GCalendarAclRuleScopeDataObj",
    SupportsShouldProcess = true,
    HelpUri = @"https://github.com/squid808/gShell/wiki/New-GCalendarAclRule.ScopeDataObj")]
    [OutputType(typeof(Google.Apis.Calendar.v3.Data.AclRule.ScopeData))]
    public class NewGCalendarAclRuleScopeDataObjCommand : PSCmdlet
    {
        #region Properties


        /// <summary>
        /// <para type="description">The type of the scope. Possible values are:- "default" - The public scope. This is the default value.- "user" - Limits the scope to a single user.- "group" - Limits the scope to a group.- "domain" - Limits the scope to a domain.  Note: The permissions granted to the "default", or public, scope apply to any user, authenticated or not.</para>
        /// </summary>
        [Parameter(Position = 0,
        Mandatory = false,
        ValueFromPipelineByPropertyName = true,
        HelpMessage = "The type of the scope. Possible values are:  \n- \"default\" - The public scope. This is the default value. \n- \"user\" - Limits the scope to a single user. \n- \"group\" - Limits the scope to a group. \n- \"domain\" - Limits the scope to a domain.  Note: The permissions granted to the \"default\", or public, scope apply to any user, authenticated or not.")]
        public string Type { get; set; }

        /// <summary>
        /// <para type="description">The email address of a user or group, or the name of a domain, depending on the scope type. Omitted for type "default".</para>
        /// </summary>
        [Parameter(Position = 1,
        Mandatory = false,
        ValueFromPipelineByPropertyName = true,
        HelpMessage = "The email address of a user or group, or the name of a domain, depending on the scope type. Omitted for type \"default\".")]
        public string Value { get; set; }
        #endregion

        protected override void ProcessRecord()
        {
            var body = new Google.Apis.Calendar.v3.Data.AclRule.ScopeData()
            {
                Type = this.Type,
                Value = this.Value,
            };

            if (ShouldProcess("AclRule.ScopeData"))
            {
                WriteObject(body);
            }
        }
    }

    /// <summary>
    /// <para type="synopsis">Creates a new Calendar API Channel object.</para>
    /// <para type="description">This provides a Cmdlet-Based approach to creating a Channel object which may be required as a parameter for some other Cmdlets in the Calendar API category.</para>
    /// <para type="description">You could alternately create this object by calling New-Object -TypeName Google.Apis.Calendar.v3.Data.Channel</para>
    /// <list type="alertSet"><item><term>About this Cmdlet</term><description>
    /// Part of the gShell Project, relating to the Google Calendar API; see Related Links or use the -Online parameter.
    /// </description></item></list>
    /// <example>
    ///   <code>PS C:\> New-GCalendarChannelObj</code>
    ///   <para>This automatically generated example serves to show the bare minimum required to call this Cmdlet.</para>
    ///   <para>Additional examples may be added, viewed and edited by users on the community wiki at the URL found in the related links.</para>
    /// </example>
    /// <para type="link" uri="https://github.com/squid808/gShell/wiki/New-GCalendarChannelObj">[Wiki page for this Cmdlet]</para>
    /// <para type="link" uri="https://github.com/squid808/gShell/wiki/Getting-Started">[Getting started with gShell]</para>
    /// </summary>
    [Cmdlet(VerbsCommon.New, "GCalendarChannelObj",
    SupportsShouldProcess = true,
    HelpUri = @"https://github.com/squid808/gShell/wiki/New-GCalendarChannelObj")]
    [OutputType(typeof(Google.Apis.Calendar.v3.Data.Channel))]
    public class NewGCalendarChannelObjCommand : PSCmdlet
    {
        #region Properties


        /// <summary>
        /// <para type="description">The address where notifications are delivered for this channel.</para>
        /// </summary>
        [Parameter(Position = 0,
        Mandatory = false,
        ValueFromPipelineByPropertyName = true,
        HelpMessage = "The address where notifications are delivered for this channel.")]
        public string Address { get; set; }

        /// <summary>
        /// <para type="description">Date and time of notification channel expiration, expressed as a Unix timestamp, in milliseconds. Optional.</para>
        /// </summary>
        [Parameter(Position = 1,
        Mandatory = false,
        ValueFromPipelineByPropertyName = true,
        HelpMessage = "Date and time of notification channel expiration, expressed as a Unix timestamp, in milliseconds. Optional.")]
        public System.Nullable<long> Expiration { get; set; }

        /// <summary>
        /// <para type="description">A UUID or similar unique string that identifies this channel.</para>
        /// </summary>
        [Parameter(Position = 2,
        Mandatory = false,
        ValueFromPipelineByPropertyName = true,
        HelpMessage = "A UUID or similar unique string that identifies this channel.")]
        public string Id { get; set; }

        /// <summary>
        /// <para type="description">Additional parameters controlling delivery channel behavior. Optional.</para>
        /// </summary>
        [Parameter(Position = 3,
        Mandatory = false,
        ValueFromPipelineByPropertyName = true,
        HelpMessage = "Additional parameters controlling delivery channel behavior. Optional.")]
        public System.Collections.Generic.IDictionary<string, string> Params__ { get; set; }

        /// <summary>
        /// <para type="description">A Boolean value to indicate whether payload is wanted. Optional.</para>
        /// </summary>
        [Parameter(Position = 4,
        Mandatory = false,
        ValueFromPipelineByPropertyName = true,
        HelpMessage = "A Boolean value to indicate whether payload is wanted. Optional.")]
        public System.Nullable<bool> Payload { get; set; }

        /// <summary>
        /// <para type="description">An opaque ID that identifies the resource being watched on this channel. Stable across different API versions.</para>
        /// </summary>
        [Parameter(Position = 5,
        Mandatory = false,
        ValueFromPipelineByPropertyName = true,
        HelpMessage = "An opaque ID that identifies the resource being watched on this channel. Stable across different API versions.")]
        public string ResourceId { get; set; }

        /// <summary>
        /// <para type="description">A version-specific identifier for the watched resource.</para>
        /// </summary>
        [Parameter(Position = 6,
        Mandatory = false,
        ValueFromPipelineByPropertyName = true,
        HelpMessage = "A version-specific identifier for the watched resource.")]
        public string ResourceUri { get; set; }

        /// <summary>
        /// <para type="description">An arbitrary string delivered to the target address with each notification delivered over this channel. Optional.</para>
        /// </summary>
        [Parameter(Position = 7,
        Mandatory = false,
        ValueFromPipelineByPropertyName = true,
        HelpMessage = "An arbitrary string delivered to the target address with each notification delivered over this channel. Optional.")]
        public string Token { get; set; }

        /// <summary>
        /// <para type="description">The type of delivery mechanism used for this channel.</para>
        /// </summary>
        [Parameter(Position = 8,
        Mandatory = false,
        ValueFromPipelineByPropertyName = true,
        HelpMessage = "The type of delivery mechanism used for this channel.")]
        public string Type { get; set; }
        #endregion

        protected override void ProcessRecord()
        {
            var body = new Google.Apis.Calendar.v3.Data.Channel()
            {
                Address = this.Address,
                Expiration = this.Expiration,
                Id = this.Id,
                Params__ = this.Params__,
                Payload = this.Payload,
                ResourceId = this.ResourceId,
                ResourceUri = this.ResourceUri,
                Token = this.Token,
                Type = this.Type,
            };

            if (ShouldProcess("Channel"))
            {
                WriteObject(body);
            }
        }
    }

    /// <summary>
    /// <para type="synopsis">Creates a new Calendar API Calendar object.</para>
    /// <para type="description">This provides a Cmdlet-Based approach to creating a Calendar object which may be required as a parameter for some other Cmdlets in the Calendar API category.</para>
    /// <para type="description">You could alternately create this object by calling New-Object -TypeName Google.Apis.Calendar.v3.Data.Calendar</para>
    /// <list type="alertSet"><item><term>About this Cmdlet</term><description>
    /// Part of the gShell Project, relating to the Google Calendar API; see Related Links or use the -Online parameter.
    /// </description></item></list>
    /// <example>
    ///   <code>PS C:\> New-GCalendarObj</code>
    ///   <para>This automatically generated example serves to show the bare minimum required to call this Cmdlet.</para>
    ///   <para>Additional examples may be added, viewed and edited by users on the community wiki at the URL found in the related links.</para>
    /// </example>
    /// <para type="link" uri="https://github.com/squid808/gShell/wiki/New-GCalendarObj">[Wiki page for this Cmdlet]</para>
    /// <para type="link" uri="https://github.com/squid808/gShell/wiki/Getting-Started">[Getting started with gShell]</para>
    /// </summary>
    [Cmdlet(VerbsCommon.New, "GCalendarObj",
    SupportsShouldProcess = true,
    HelpUri = @"https://github.com/squid808/gShell/wiki/New-GCalendarObj")]
    [OutputType(typeof(Google.Apis.Calendar.v3.Data.Calendar))]
    public class NewGCalendarObjCommand : PSCmdlet
    {
        #region Properties


        /// <summary>
        /// <para type="description">Description of the calendar. Optional.</para>
        /// </summary>
        [Parameter(Position = 0,
        Mandatory = false,
        ValueFromPipelineByPropertyName = true,
        HelpMessage = "Description of the calendar. Optional.")]
        public string Description { get; set; }

        /// <summary>
        /// <para type="description">Identifier of the calendar. To retrieve IDs call the calendarList.list() method.</para>
        /// </summary>
        [Parameter(Position = 1,
        Mandatory = false,
        ValueFromPipelineByPropertyName = true,
        HelpMessage = "Identifier of the calendar. To retrieve IDs call the calendarList.list() method.")]
        public string Id { get; set; }

        /// <summary>
        /// <para type="description">Geographic location of the calendar as free-form text. Optional.</para>
        /// </summary>
        [Parameter(Position = 2,
        Mandatory = false,
        ValueFromPipelineByPropertyName = true,
        HelpMessage = "Geographic location of the calendar as free-form text. Optional.")]
        public string Location { get; set; }

        /// <summary>
        /// <para type="description">Title of the calendar.</para>
        /// </summary>
        [Parameter(Position = 3,
        Mandatory = false,
        ValueFromPipelineByPropertyName = true,
        HelpMessage = "Title of the calendar.")]
        public string Summary { get; set; }

        /// <summary>
        /// <para type="description">The time zone of the calendar. (Formatted as an IANA Time Zone Database name, e.g. "Europe/Zurich".) Optional.</para>
        /// </summary>
        [Parameter(Position = 4,
        Mandatory = false,
        ValueFromPipelineByPropertyName = true,
        HelpMessage = "The time zone of the calendar. (Formatted as an IANA Time Zone Database name, e.g. \"Europe/Zurich\".) Optional.")]
        public string TimeZone { get; set; }
        #endregion

        protected override void ProcessRecord()
        {
            var body = new Google.Apis.Calendar.v3.Data.Calendar()
            {
                Description = this.Description,
                Id = this.Id,
                Location = this.Location,
                Summary = this.Summary,
                TimeZone = this.TimeZone,
            };

            if (ShouldProcess("Calendar"))
            {
                WriteObject(body);
            }
        }
    }

    /// <summary>
    /// <para type="synopsis">Creates a new Calendar API CalendarListEntry object.</para>
    /// <para type="description">This provides a Cmdlet-Based approach to creating a CalendarListEntry object which may be required as a parameter for some other Cmdlets in the Calendar API category.</para>
    /// <para type="description">You could alternately create this object by calling New-Object -TypeName Google.Apis.Calendar.v3.Data.CalendarListEntry</para>
    /// <list type="alertSet"><item><term>About this Cmdlet</term><description>
    /// Part of the gShell Project, relating to the Google Calendar API; see Related Links or use the -Online parameter.
    /// </description></item></list>
    /// <example>
    ///   <code>PS C:\> New-GCalendarListEntryObj</code>
    ///   <para>This automatically generated example serves to show the bare minimum required to call this Cmdlet.</para>
    ///   <para>Additional examples may be added, viewed and edited by users on the community wiki at the URL found in the related links.</para>
    /// </example>
    /// <para type="link" uri="https://github.com/squid808/gShell/wiki/New-GCalendarListEntryObj">[Wiki page for this Cmdlet]</para>
    /// <para type="link" uri="https://github.com/squid808/gShell/wiki/Getting-Started">[Getting started with gShell]</para>
    /// </summary>
    [Cmdlet(VerbsCommon.New, "GCalendarListEntryObj",
    SupportsShouldProcess = true,
    HelpUri = @"https://github.com/squid808/gShell/wiki/New-GCalendarListEntryObj")]
    [OutputType(typeof(Google.Apis.Calendar.v3.Data.CalendarListEntry))]
    public class NewGCalendarListEntryObjCommand : PSCmdlet
    {
        #region Properties


        /// <summary>
        /// <para type="description">The effective access role that the authenticated user has on the calendar. Read-only. Possible values are:- "freeBusyReader" - Provides read access to free/busy information.- "reader" - Provides read access to the calendar. Private events will appear to users with reader access, but event details will be hidden.- "writer" - Provides read and write access to the calendar. Private events will appear to users with writer access, and event details will be visible.- "owner" - Provides ownership of the calendar. This role has all of the permissions of the writer role with the additional ability to see and manipulate ACLs.</para>
        /// </summary>
        [Parameter(Position = 0,
        Mandatory = false,
        ValueFromPipelineByPropertyName = true,
        HelpMessage = "The effective access role that the authenticated user has on the calendar. Read-only. Possible values are:  \n- \"freeBusyReader\" - Provides read access to free/busy information. \n- \"reader\" - Provides read access to the calendar. Private events will appear to users with reader access, but event details will be hidden. \n- \"writer\" - Provides read and write access to the calendar. Private events will appear to users with writer access, and event details will be visible. \n- \"owner\" - Provides ownership of the calendar. This role has all of the permissions of the writer role with the additional ability to see and manipulate ACLs.")]
        public string AccessRole { get; set; }

        /// <summary>
        /// <para type="description">The main color of the calendar in the hexadecimal format "#0088aa". This property supersedes the index-based colorId property. To set or change this property, you need to specify colorRgbFormat=true in the parameters of the insert, update and patch methods. Optional.</para>
        /// </summary>
        [Parameter(Position = 1,
        Mandatory = false,
        ValueFromPipelineByPropertyName = true,
        HelpMessage = "The main color of the calendar in the hexadecimal format \"#0088aa\". This property supersedes the index-based colorId property. To set or change this property, you need to specify colorRgbFormat=true in the parameters of the insert, update and patch methods. Optional.")]
        public string BackgroundColor { get; set; }

        /// <summary>
        /// <para type="description">The color of the calendar. This is an ID referring to an entry in the calendar section of the colors definition (see the colors endpoint). This property is superseded by the backgroundColor and foregroundColor properties and can be ignored when using these properties. Optional.</para>
        /// </summary>
        [Parameter(Position = 2,
        Mandatory = false,
        ValueFromPipelineByPropertyName = true,
        HelpMessage = "The color of the calendar. This is an ID referring to an entry in the calendar section of the colors definition (see the colors endpoint). This property is superseded by the backgroundColor and foregroundColor properties and can be ignored when using these properties. Optional.")]
        public string ColorId { get; set; }

        /// <summary>
        /// <para type="description">The default reminders that the authenticated user has for this calendar.</para>
        /// </summary>
        [Parameter(Position = 3,
        Mandatory = false,
        ValueFromPipelineByPropertyName = true,
        HelpMessage = "The default reminders that the authenticated user has for this calendar.")]
        public EventReminder[] DefaultReminders { get; set; }

        /// <summary>
        /// <para type="description">Whether this calendar list entry has been deleted from the calendar list. Read-only. Optional. The default is False.</para>
        /// </summary>
        [Parameter(Position = 4,
        Mandatory = false,
        ValueFromPipelineByPropertyName = true,
        HelpMessage = "Whether this calendar list entry has been deleted from the calendar list. Read-only. Optional. The default is False.")]
        public System.Nullable<bool> Deleted { get; set; }

        /// <summary>
        /// <para type="description">Description of the calendar. Optional. Read-only.</para>
        /// </summary>
        [Parameter(Position = 5,
        Mandatory = false,
        ValueFromPipelineByPropertyName = true,
        HelpMessage = "Description of the calendar. Optional. Read-only.")]
        public string Description { get; set; }

        /// <summary>
        /// <para type="description">The foreground color of the calendar in the hexadecimal format "#ffffff". This property supersedes the index-based colorId property. To set or change this property, you need to specify colorRgbFormat=true in the parameters of the insert, update and patch methods. Optional.</para>
        /// </summary>
        [Parameter(Position = 6,
        Mandatory = false,
        ValueFromPipelineByPropertyName = true,
        HelpMessage = "The foreground color of the calendar in the hexadecimal format \"#ffffff\". This property supersedes the index-based colorId property. To set or change this property, you need to specify colorRgbFormat=true in the parameters of the insert, update and patch methods. Optional.")]
        public string ForegroundColor { get; set; }

        /// <summary>
        /// <para type="description">Whether the calendar has been hidden from the list. Optional. The default is False.</para>
        /// </summary>
        [Parameter(Position = 7,
        Mandatory = false,
        ValueFromPipelineByPropertyName = true,
        HelpMessage = "Whether the calendar has been hidden from the list. Optional. The default is False.")]
        public System.Nullable<bool> Hidden { get; set; }

        /// <summary>
        /// <para type="description">Identifier of the calendar.</para>
        /// </summary>
        [Parameter(Position = 8,
        Mandatory = false,
        ValueFromPipelineByPropertyName = true,
        HelpMessage = "Identifier of the calendar.")]
        public string Id { get; set; }

        /// <summary>
        /// <para type="description">Geographic location of the calendar as free-form text. Optional. Read-only.</para>
        /// </summary>
        [Parameter(Position = 9,
        Mandatory = false,
        ValueFromPipelineByPropertyName = true,
        HelpMessage = "Geographic location of the calendar as free-form text. Optional. Read-only.")]
        public string Location { get; set; }

        /// <summary>
        /// <para type="description">The notifications that the authenticated user is receiving for this calendar.</para>
        /// </summary>
        [Parameter(Position = 10,
        Mandatory = false,
        ValueFromPipelineByPropertyName = true,
        HelpMessage = "The notifications that the authenticated user is receiving for this calendar.")]
        public CalendarListEntry.NotificationSettingsData NotificationSettings { get; set; }

        /// <summary>
        /// <para type="description">Whether the calendar is the primary calendar of the authenticated user. Read-only. Optional. The default is False.</para>
        /// </summary>
        [Parameter(Position = 11,
        Mandatory = false,
        ValueFromPipelineByPropertyName = true,
        HelpMessage = "Whether the calendar is the primary calendar of the authenticated user. Read-only. Optional. The default is False.")]
        public System.Nullable<bool> Primary { get; set; }

        /// <summary>
        /// <para type="description">Whether the calendar content shows up in the calendar UI. Optional. The default is False.</para>
        /// </summary>
        [Parameter(Position = 12,
        Mandatory = false,
        ValueFromPipelineByPropertyName = true,
        HelpMessage = "Whether the calendar content shows up in the calendar UI. Optional. The default is False.")]
        public System.Nullable<bool> Selected { get; set; }

        /// <summary>
        /// <para type="description">Title of the calendar. Read-only.</para>
        /// </summary>
        [Parameter(Position = 13,
        Mandatory = false,
        ValueFromPipelineByPropertyName = true,
        HelpMessage = "Title of the calendar. Read-only.")]
        public string Summary { get; set; }

        /// <summary>
        /// <para type="description">The summary that the authenticated user has set for this calendar. Optional.</para>
        /// </summary>
        [Parameter(Position = 14,
        Mandatory = false,
        ValueFromPipelineByPropertyName = true,
        HelpMessage = "The summary that the authenticated user has set for this calendar. Optional.")]
        public string SummaryOverride { get; set; }

        /// <summary>
        /// <para type="description">The time zone of the calendar. Optional. Read-only.</para>
        /// </summary>
        [Parameter(Position = 15,
        Mandatory = false,
        ValueFromPipelineByPropertyName = true,
        HelpMessage = "The time zone of the calendar. Optional. Read-only.")]
        public string TimeZone { get; set; }
        #endregion

        protected override void ProcessRecord()
        {
            var body = new Google.Apis.Calendar.v3.Data.CalendarListEntry()
            {
                AccessRole = this.AccessRole,
                BackgroundColor = this.BackgroundColor,
                ColorId = this.ColorId,
                DefaultReminders = this.DefaultReminders,
                Deleted = this.Deleted,
                Description = this.Description,
                ForegroundColor = this.ForegroundColor,
                Hidden = this.Hidden,
                Id = this.Id,
                Location = this.Location,
                NotificationSettings = this.NotificationSettings,
                Primary = this.Primary,
                Selected = this.Selected,
                Summary = this.Summary,
                SummaryOverride = this.SummaryOverride,
                TimeZone = this.TimeZone,
            };

            if (ShouldProcess("CalendarListEntry"))
            {
                WriteObject(body);
            }
        }
    }

    /// <summary>
    /// <para type="synopsis">Creates a new Calendar API CalendarListEntry.NotificationSettingsData object.</para>
    /// <para type="description">This provides a Cmdlet-Based approach to creating a CalendarListEntry.NotificationSettingsData object which may be required as a parameter for some other Cmdlets in the Calendar API category.</para>
    /// <para type="description">You could alternately create this object by calling New-Object -TypeName Google.Apis.Calendar.v3.Data.CalendarListEntry.NotificationSettingsData</para>
    /// <list type="alertSet"><item><term>About this Cmdlet</term><description>
    /// Part of the gShell Project, relating to the Google Calendar API; see Related Links or use the -Online parameter.
    /// </description></item></list>
    /// <example>
    ///   <code>PS C:\> New-GCalendarListEntryNotificationSettingsDataObj</code>
    ///   <para>This automatically generated example serves to show the bare minimum required to call this Cmdlet.</para>
    ///   <para>Additional examples may be added, viewed and edited by users on the community wiki at the URL found in the related links.</para>
    /// </example>
    /// <para type="link" uri="https://github.com/squid808/gShell/wiki/New-GCalendarListEntry.NotificationSettingsDataObj">[Wiki page for this Cmdlet]</para>
    /// <para type="link" uri="https://github.com/squid808/gShell/wiki/Getting-Started">[Getting started with gShell]</para>
    /// </summary>
    [Cmdlet(VerbsCommon.New, "GCalendarListEntryNotificationSettingsDataObj",
    SupportsShouldProcess = true,
    HelpUri = @"https://github.com/squid808/gShell/wiki/New-GCalendarListEntry.NotificationSettingsDataObj")]
    [OutputType(typeof(Google.Apis.Calendar.v3.Data.CalendarListEntry.NotificationSettingsData))]
    public class NewGCalendarListEntryNotificationSettingsDataObjCommand : PSCmdlet
    {
        #region Properties


        /// <summary>
        /// <para type="description">The list of notifications set for this calendar.</para>
        /// </summary>
        [Parameter(Position = 0,
        Mandatory = false,
        ValueFromPipelineByPropertyName = true,
        HelpMessage = "The list of notifications set for this calendar.")]
        public CalendarNotification[] Notifications { get; set; }
        #endregion

        protected override void ProcessRecord()
        {
            var body = new Google.Apis.Calendar.v3.Data.CalendarListEntry.NotificationSettingsData()
            {
                Notifications = this.Notifications,
            };

            if (ShouldProcess("CalendarListEntry.NotificationSettingsData"))
            {
                WriteObject(body);
            }
        }
    }

    /// <summary>
    /// <para type="synopsis">Creates a new Calendar API CalendarNotification object.</para>
    /// <para type="description">This provides a Cmdlet-Based approach to creating a CalendarNotification object which may be required as a parameter for some other Cmdlets in the Calendar API category.</para>
    /// <para type="description">You could alternately create this object by calling New-Object -TypeName Google.Apis.Calendar.v3.Data.CalendarNotification</para>
    /// <list type="alertSet"><item><term>About this Cmdlet</term><description>
    /// Part of the gShell Project, relating to the Google Calendar API; see Related Links or use the -Online parameter.
    /// </description></item></list>
    /// <example>
    ///   <code>PS C:\> New-GCalendarNotificationObj</code>
    ///   <para>This automatically generated example serves to show the bare minimum required to call this Cmdlet.</para>
    ///   <para>Additional examples may be added, viewed and edited by users on the community wiki at the URL found in the related links.</para>
    /// </example>
    /// <para type="link" uri="https://github.com/squid808/gShell/wiki/New-GCalendarNotificationObj">[Wiki page for this Cmdlet]</para>
    /// <para type="link" uri="https://github.com/squid808/gShell/wiki/Getting-Started">[Getting started with gShell]</para>
    /// </summary>
    [Cmdlet(VerbsCommon.New, "GCalendarNotificationObj",
    SupportsShouldProcess = true,
    HelpUri = @"https://github.com/squid808/gShell/wiki/New-GCalendarNotificationObj")]
    [OutputType(typeof(Google.Apis.Calendar.v3.Data.CalendarNotification))]
    public class NewGCalendarNotificationObjCommand : PSCmdlet
    {
        #region Properties


        /// <summary>
        /// <para type="description">The method used to deliver the notification. Possible values are:- "email" - Reminders are sent via email.- "sms" - Reminders are sent via SMS. This value is read-only and is ignored on inserts and updates. SMS reminders are only available for Google Apps for Work, Education, and Government customers.</para>
        /// </summary>
        [Parameter(Position = 0,
        Mandatory = false,
        ValueFromPipelineByPropertyName = true,
        HelpMessage = "The method used to deliver the notification. Possible values are:  \n- \"email\" - Reminders are sent via email. \n- \"sms\" - Reminders are sent via SMS. This value is read-only and is ignored on inserts and updates. SMS reminders are only available for Google Apps for Work, Education, and Government customers.")]
        public string Method { get; set; }

        /// <summary>
        /// <para type="description">The type of notification. Possible values are:- "eventCreation" - Notification sent when a new event is put on the calendar.- "eventChange" - Notification sent when an event is changed.- "eventCancellation" - Notification sent when an event is cancelled.- "eventResponse" - Notification sent when an event is changed.- "agenda" - An agenda with the events of the day (sent out in the morning).</para>
        /// </summary>
        [Parameter(Position = 1,
        Mandatory = false,
        ValueFromPipelineByPropertyName = true,
        HelpMessage = "The type of notification. Possible values are:  \n- \"eventCreation\" - Notification sent when a new event is put on the calendar. \n- \"eventChange\" - Notification sent when an event is changed. \n- \"eventCancellation\" - Notification sent when an event is cancelled. \n- \"eventResponse\" - Notification sent when an event is changed. \n- \"agenda\" - An agenda with the events of the day (sent out in the morning).")]
        public string Type { get; set; }
        #endregion

        protected override void ProcessRecord()
        {
            var body = new Google.Apis.Calendar.v3.Data.CalendarNotification()
            {
                Method = this.Method,
                Type = this.Type,
            };

            if (ShouldProcess("CalendarNotification"))
            {
                WriteObject(body);
            }
        }
    }

    /// <summary>
    /// <para type="synopsis">Creates a new Calendar API Event object.</para>
    /// <para type="description">This provides a Cmdlet-Based approach to creating a Event object which may be required as a parameter for some other Cmdlets in the Calendar API category.</para>
    /// <para type="description">You could alternately create this object by calling New-Object -TypeName Google.Apis.Calendar.v3.Data.Event</para>
    /// <list type="alertSet"><item><term>About this Cmdlet</term><description>
    /// Part of the gShell Project, relating to the Google Calendar API; see Related Links or use the -Online parameter.
    /// </description></item></list>
    /// <example>
    ///   <code>PS C:\> New-GCalendarEventObj</code>
    ///   <para>This automatically generated example serves to show the bare minimum required to call this Cmdlet.</para>
    ///   <para>Additional examples may be added, viewed and edited by users on the community wiki at the URL found in the related links.</para>
    /// </example>
    /// <para type="link" uri="https://github.com/squid808/gShell/wiki/New-GCalendarEventObj">[Wiki page for this Cmdlet]</para>
    /// <para type="link" uri="https://github.com/squid808/gShell/wiki/Getting-Started">[Getting started with gShell]</para>
    /// </summary>
    [Cmdlet(VerbsCommon.New, "GCalendarEventObj",
    SupportsShouldProcess = true,
    HelpUri = @"https://github.com/squid808/gShell/wiki/New-GCalendarEventObj")]
    [OutputType(typeof(Google.Apis.Calendar.v3.Data.Event))]
    public class NewGCalendarEventObjCommand : PSCmdlet
    {
        #region Properties


        /// <summary>
        /// <para type="description">Whether anyone can invite themselves to the event (currently works for Google+ events only). Optional. The default is False.</para>
        /// </summary>
        [Parameter(Position = 0,
        Mandatory = false,
        ValueFromPipelineByPropertyName = true,
        HelpMessage = "Whether anyone can invite themselves to the event (currently works for Google+ events only). Optional. The default is False.")]
        public System.Nullable<bool> AnyoneCanAddSelf { get; set; }

        /// <summary>
        /// <para type="description">File attachments for the event. Currently only Google Drive attachments are supported.In order to modify attachments the supportsAttachments request parameter should be set to true.There can be at most 25 attachments per event,</para>
        /// </summary>
        [Parameter(Position = 1,
        Mandatory = false,
        ValueFromPipelineByPropertyName = true,
        HelpMessage = "File attachments for the event. Currently only Google Drive attachments are supported.\nIn order to modify attachments the supportsAttachments request parameter should be set to true.\nThere can be at most 25 attachments per event,")]
        public EventAttachment[] Attachments { get; set; }

        /// <summary>
        /// <para type="description">The attendees of the event. See the Events with attendees guide for more information on scheduling events with other calendar users.</para>
        /// </summary>
        [Parameter(Position = 2,
        Mandatory = false,
        ValueFromPipelineByPropertyName = true,
        HelpMessage = "The attendees of the event. See the Events with attendees guide for more information on scheduling events with other calendar users.")]
        public EventAttendee[] Attendees { get; set; }

        /// <summary>
        /// <para type="description">Whether attendees may have been omitted from the event's representation. When retrieving an event, this may be due to a restriction specified by the maxAttendee query parameter. When updating an event, this can be used to only update the participant's response. Optional. The default is False.</para>
        /// </summary>
        [Parameter(Position = 3,
        Mandatory = false,
        ValueFromPipelineByPropertyName = true,
        HelpMessage = "Whether attendees may have been omitted from the event's representation. When retrieving an event, this may be due to a restriction specified by the maxAttendee query parameter. When updating an event, this can be used to only update the participant's response. Optional. The default is False.")]
        public System.Nullable<bool> AttendeesOmitted { get; set; }

        /// <summary>
        /// <para type="description">The color of the event. This is an ID referring to an entry in the event section of the colors definition (see the  colors endpoint). Optional.</para>
        /// </summary>
        [Parameter(Position = 4,
        Mandatory = false,
        ValueFromPipelineByPropertyName = true,
        HelpMessage = "The color of the event. This is an ID referring to an entry in the event section of the colors definition (see the  colors endpoint). Optional.")]
        public string ColorId { get; set; }

        /// <summary>
        /// <para type="description">Creation time of the event (as a RFC3339 timestamp). Read-only.</para>
        /// </summary>
        [Parameter(Position = 5,
        Mandatory = false,
        ValueFromPipelineByPropertyName = true,
        HelpMessage = "Creation time of the event (as a RFC3339 timestamp). Read-only.")]
        public System.Nullable<System.DateTime> Created { get; set; }

        /// <summary>
        /// <para type="description">The creator of the event. Read-only.</para>
        /// </summary>
        [Parameter(Position = 6,
        Mandatory = false,
        ValueFromPipelineByPropertyName = true,
        HelpMessage = "The creator of the event. Read-only.")]
        public Event.CreatorData Creator { get; set; }

        /// <summary>
        /// <para type="description">Description of the event. Optional.</para>
        /// </summary>
        [Parameter(Position = 7,
        Mandatory = false,
        ValueFromPipelineByPropertyName = true,
        HelpMessage = "Description of the event. Optional.")]
        public string Description { get; set; }

        /// <summary>
        /// <para type="description">The (exclusive) end time of the event. For a recurring event, this is the end time of the first instance.</para>
        /// </summary>
        [Parameter(Position = 8,
        Mandatory = false,
        ValueFromPipelineByPropertyName = true,
        HelpMessage = "The (exclusive) end time of the event. For a recurring event, this is the end time of the first instance.")]
        public EventDateTime End { get; set; }

        /// <summary>
        /// <para type="description">Whether the end time is actually unspecified. An end time is still provided for compatibility reasons, even if this attribute is set to True. The default is False.</para>
        /// </summary>
        [Parameter(Position = 9,
        Mandatory = false,
        ValueFromPipelineByPropertyName = true,
        HelpMessage = "Whether the end time is actually unspecified. An end time is still provided for compatibility reasons, even if this attribute is set to True. The default is False.")]
        public System.Nullable<bool> EndTimeUnspecified { get; set; }

        /// <summary>
        /// <para type="description">Extended properties of the event.</para>
        /// </summary>
        [Parameter(Position = 10,
        Mandatory = false,
        ValueFromPipelineByPropertyName = true,
        HelpMessage = "Extended properties of the event.")]
        public Event.ExtendedPropertiesData ExtendedProperties { get; set; }

        /// <summary>
        /// <para type="description">A gadget that extends this event.</para>
        /// </summary>
        [Parameter(Position = 11,
        Mandatory = false,
        ValueFromPipelineByPropertyName = true,
        HelpMessage = "A gadget that extends this event.")]
        public Event.GadgetData Gadget { get; set; }

        /// <summary>
        /// <para type="description">Whether attendees other than the organizer can invite others to the event. Optional. The default is True.</para>
        /// </summary>
        [Parameter(Position = 12,
        Mandatory = false,
        ValueFromPipelineByPropertyName = true,
        HelpMessage = "Whether attendees other than the organizer can invite others to the event. Optional. The default is True.")]
        public System.Nullable<bool> GuestsCanInviteOthers { get; set; }

        /// <summary>
        /// <para type="description">Whether attendees other than the organizer can modify the event. Optional. The default is False.</para>
        /// </summary>
        [Parameter(Position = 13,
        Mandatory = false,
        ValueFromPipelineByPropertyName = true,
        HelpMessage = "Whether attendees other than the organizer can modify the event. Optional. The default is False.")]
        public System.Nullable<bool> GuestsCanModify { get; set; }

        /// <summary>
        /// <para type="description">Whether attendees other than the organizer can see who the event's attendees are. Optional. The default is True.</para>
        /// </summary>
        [Parameter(Position = 14,
        Mandatory = false,
        ValueFromPipelineByPropertyName = true,
        HelpMessage = "Whether attendees other than the organizer can see who the event's attendees are. Optional. The default is True.")]
        public System.Nullable<bool> GuestsCanSeeOtherGuests { get; set; }

        /// <summary>
        /// <para type="description">An absolute link to the Google+ hangout associated with this event. Read-only.</para>
        /// </summary>
        [Parameter(Position = 15,
        Mandatory = false,
        ValueFromPipelineByPropertyName = true,
        HelpMessage = "An absolute link to the Google+ hangout associated with this event. Read-only.")]
        public string HangoutLink { get; set; }

        /// <summary>
        /// <para type="description">An absolute link to this event in the Google Calendar Web UI. Read-only.</para>
        /// </summary>
        [Parameter(Position = 16,
        Mandatory = false,
        ValueFromPipelineByPropertyName = true,
        HelpMessage = "An absolute link to this event in the Google Calendar Web UI. Read-only.")]
        public string HtmlLink { get; set; }

        /// <summary>
        /// <para type="description">Event unique identifier as defined in RFC5545. It is used to uniquely identify events accross calendaring systems and must be supplied when importing events via the import method.Note that the icalUID and the id are not identical and only one of them should be supplied at event creation time. One difference in their semantics is that in recurring events, all occurrences of one event have different ids while they all share the same icalUIDs.</para>
        /// </summary>
        [Parameter(Position = 17,
        Mandatory = false,
        ValueFromPipelineByPropertyName = true,
        HelpMessage = "Event unique identifier as defined in RFC5545. It is used to uniquely identify events accross calendaring systems and must be supplied when importing events via the import method.\nNote that the icalUID and the id are not identical and only one of them should be supplied at event creation time. One difference in their semantics is that in recurring events, all occurrences of one event have different ids while they all share the same icalUIDs.")]
        public string ICalUID { get; set; }

        /// <summary>
        /// <para type="description">Opaque identifier of the event. When creating new single or recurring events, you can specify their IDs. Provided IDs must follow these rules:- characters allowed in the ID are those used in base32hex encoding, i.e. lowercase letters a-v and digits 0-9, see section 3.1.2 in RFC2938- the length of the ID must be between 5 and 1024 characters- the ID must be unique per calendar  Due to the globally distributed nature of the system, we cannot guarantee that ID collisions will be detected at event creation time. To minimize the risk of collisions we recommend using an established UUID algorithm such as one described in RFC4122.If you do not specify an ID, it will be automatically generated by the server.Note that the icalUID and the id are not identical and only one of them should be supplied at event creation time. One difference in their semantics is that in recurring events, all occurrences of one event have different ids while they all share the same icalUIDs.</para>
        /// </summary>
        [Parameter(Position = 18,
        Mandatory = false,
        ValueFromPipelineByPropertyName = true,
        HelpMessage = "Opaque identifier of the event. When creating new single or recurring events, you can specify their IDs. Provided IDs must follow these rules:  \n- characters allowed in the ID are those used in base32hex encoding, i.e. lowercase letters a-v and digits 0-9, see section 3.1.2 in RFC2938 \n- the length of the ID must be between 5 and 1024 characters \n- the ID must be unique per calendar  Due to the globally distributed nature of the system, we cannot guarantee that ID collisions will be detected at event creation time. To minimize the risk of collisions we recommend using an established UUID algorithm such as one described in RFC4122.\nIf you do not specify an ID, it will be automatically generated by the server.\nNote that the icalUID and the id are not identical and only one of them should be supplied at event creation time. One difference in their semantics is that in recurring events, all occurrences of one event have different ids while they all share the same icalUIDs.")]
        public string Id { get; set; }

        /// <summary>
        /// <para type="description">Geographic location of the event as free-form text. Optional.</para>
        /// </summary>
        [Parameter(Position = 19,
        Mandatory = false,
        ValueFromPipelineByPropertyName = true,
        HelpMessage = "Geographic location of the event as free-form text. Optional.")]
        public string Location { get; set; }

        /// <summary>
        /// <para type="description">Whether this is a locked event copy where no changes can be made to the main event fields "summary", "description", "location", "start", "end" or "recurrence". The default is False. Read-Only.</para>
        /// </summary>
        [Parameter(Position = 20,
        Mandatory = false,
        ValueFromPipelineByPropertyName = true,
        HelpMessage = "Whether this is a locked event copy where no changes can be made to the main event fields \"summary\", \"description\", \"location\", \"start\", \"end\" or \"recurrence\". The default is False. Read-Only.")]
        public System.Nullable<bool> Locked { get; set; }

        /// <summary>
        /// <para type="description">The organizer of the event. If the organizer is also an attendee, this is indicated with a separate entry in attendees with the organizer field set to True. To change the organizer, use the move operation. Read-only, except when importing an event.</para>
        /// </summary>
        [Parameter(Position = 21,
        Mandatory = false,
        ValueFromPipelineByPropertyName = true,
        HelpMessage = "The organizer of the event. If the organizer is also an attendee, this is indicated with a separate entry in attendees with the organizer field set to True. To change the organizer, use the move operation. Read-only, except when importing an event.")]
        public Event.OrganizerData Organizer { get; set; }

        /// <summary>
        /// <para type="description">For an instance of a recurring event, this is the time at which this event would start according to the recurrence data in the recurring event identified by recurringEventId. Immutable.</para>
        /// </summary>
        [Parameter(Position = 22,
        Mandatory = false,
        ValueFromPipelineByPropertyName = true,
        HelpMessage = "For an instance of a recurring event, this is the time at which this event would start according to the recurrence data in the recurring event identified by recurringEventId. Immutable.")]
        public EventDateTime OriginalStartTime { get; set; }

        /// <summary>
        /// <para type="description">Whether this is a private event copy where changes are not shared with other copies on other calendars. Optional. Immutable. The default is False.</para>
        /// </summary>
        [Parameter(Position = 23,
        Mandatory = false,
        ValueFromPipelineByPropertyName = true,
        HelpMessage = "Whether this is a private event copy where changes are not shared with other copies on other calendars. Optional. Immutable. The default is False.")]
        public System.Nullable<bool> PrivateCopy { get; set; }

        /// <summary>
        /// <para type="description">List of RRULE, EXRULE, RDATE and EXDATE lines for a recurring event, as specified in RFC5545. Note that DTSTART and DTEND lines are not allowed in this field; event start and end times are specified in the start and end fields. This field is omitted for single events or instances of recurring events.</para>
        /// </summary>
        [Parameter(Position = 24,
        Mandatory = false,
        ValueFromPipelineByPropertyName = true,
        HelpMessage = "List of RRULE, EXRULE, RDATE and EXDATE lines for a recurring event, as specified in RFC5545. Note that DTSTART and DTEND lines are not allowed in this field; event start and end times are specified in the start and end fields. This field is omitted for single events or instances of recurring events.")]
        public string[] Recurrence { get; set; }

        /// <summary>
        /// <para type="description">For an instance of a recurring event, this is the id of the recurring event to which this instance belongs. Immutable.</para>
        /// </summary>
        [Parameter(Position = 25,
        Mandatory = false,
        ValueFromPipelineByPropertyName = true,
        HelpMessage = "For an instance of a recurring event, this is the id of the recurring event to which this instance belongs. Immutable.")]
        public string RecurringEventId { get; set; }

        /// <summary>
        /// <para type="description">Information about the event's reminders for the authenticated user.</para>
        /// </summary>
        [Parameter(Position = 26,
        Mandatory = false,
        ValueFromPipelineByPropertyName = true,
        HelpMessage = "Information about the event's reminders for the authenticated user.")]
        public Event.RemindersData Reminders { get; set; }

        /// <summary>
        /// <para type="description">Sequence number as per iCalendar.</para>
        /// </summary>
        [Parameter(Position = 27,
        Mandatory = false,
        ValueFromPipelineByPropertyName = true,
        HelpMessage = "Sequence number as per iCalendar.")]
        public System.Nullable<int> Sequence { get; set; }

        /// <summary>
        /// <para type="description">Source from which the event was created. For example, a web page, an email message or any document identifiable by an URL with HTTP or HTTPS scheme. Can only be seen or modified by the creator of the event.</para>
        /// </summary>
        [Parameter(Position = 28,
        Mandatory = false,
        ValueFromPipelineByPropertyName = true,
        HelpMessage = "Source from which the event was created. For example, a web page, an email message or any document identifiable by an URL with HTTP or HTTPS scheme. Can only be seen or modified by the creator of the event.")]
        public Event.SourceData Source { get; set; }

        /// <summary>
        /// <para type="description">The (inclusive) start time of the event. For a recurring event, this is the start time of the first instance.</para>
        /// </summary>
        [Parameter(Position = 29,
        Mandatory = false,
        ValueFromPipelineByPropertyName = true,
        HelpMessage = "The (inclusive) start time of the event. For a recurring event, this is the start time of the first instance.")]
        public EventDateTime Start { get; set; }

        /// <summary>
        /// <para type="description">Status of the event. Optional. Possible values are:- "confirmed" - The event is confirmed. This is the default status.- "tentative" - The event is tentatively confirmed.- "cancelled" - The event is cancelled.</para>
        /// </summary>
        [Parameter(Position = 30,
        Mandatory = false,
        ValueFromPipelineByPropertyName = true,
        HelpMessage = "Status of the event. Optional. Possible values are:  \n- \"confirmed\" - The event is confirmed. This is the default status. \n- \"tentative\" - The event is tentatively confirmed. \n- \"cancelled\" - The event is cancelled.")]
        public string Status { get; set; }

        /// <summary>
        /// <para type="description">Title of the event.</para>
        /// </summary>
        [Parameter(Position = 31,
        Mandatory = false,
        ValueFromPipelineByPropertyName = true,
        HelpMessage = "Title of the event.")]
        public string Summary { get; set; }

        /// <summary>
        /// <para type="description">Whether the event blocks time on the calendar. Optional. Possible values are:- "opaque" - The event blocks time on the calendar. This is the default value.- "transparent" - The event does not block time on the calendar.</para>
        /// </summary>
        [Parameter(Position = 32,
        Mandatory = false,
        ValueFromPipelineByPropertyName = true,
        HelpMessage = "Whether the event blocks time on the calendar. Optional. Possible values are:  \n- \"opaque\" - The event blocks time on the calendar. This is the default value. \n- \"transparent\" - The event does not block time on the calendar.")]
        public string Transparency { get; set; }

        /// <summary>
        /// <para type="description">Last modification time of the event (as a RFC3339 timestamp). Read-only.</para>
        /// </summary>
        [Parameter(Position = 33,
        Mandatory = false,
        ValueFromPipelineByPropertyName = true,
        HelpMessage = "Last modification time of the event (as a RFC3339 timestamp). Read-only.")]
        public System.Nullable<System.DateTime> Updated { get; set; }

        /// <summary>
        /// <para type="description">Visibility of the event. Optional. Possible values are:- "default" - Uses the default visibility for events on the calendar. This is the default value.- "public" - The event is public and event details are visible to all readers of the calendar.- "private" - The event is private and only event attendees may view event details.- "confidential" - The event is private. This value is provided for compatibility reasons.</para>
        /// </summary>
        [Parameter(Position = 34,
        Mandatory = false,
        ValueFromPipelineByPropertyName = true,
        HelpMessage = "Visibility of the event. Optional. Possible values are:  \n- \"default\" - Uses the default visibility for events on the calendar. This is the default value. \n- \"public\" - The event is public and event details are visible to all readers of the calendar. \n- \"private\" - The event is private and only event attendees may view event details. \n- \"confidential\" - The event is private. This value is provided for compatibility reasons.")]
        public string Visibility { get; set; }
        #endregion

        protected override void ProcessRecord()
        {
            var body = new Google.Apis.Calendar.v3.Data.Event()
            {
                AnyoneCanAddSelf = this.AnyoneCanAddSelf,
                Attachments = this.Attachments,
                Attendees = this.Attendees,
                AttendeesOmitted = this.AttendeesOmitted,
                ColorId = this.ColorId,
                Created = this.Created,
                Creator = this.Creator,
                Description = this.Description,
                End = this.End,
                EndTimeUnspecified = this.EndTimeUnspecified,
                ExtendedProperties = this.ExtendedProperties,
                Gadget = this.Gadget,
                GuestsCanInviteOthers = this.GuestsCanInviteOthers,
                GuestsCanModify = this.GuestsCanModify,
                GuestsCanSeeOtherGuests = this.GuestsCanSeeOtherGuests,
                HangoutLink = this.HangoutLink,
                HtmlLink = this.HtmlLink,
                ICalUID = this.ICalUID,
                Id = this.Id,
                Location = this.Location,
                Locked = this.Locked,
                Organizer = this.Organizer,
                OriginalStartTime = this.OriginalStartTime,
                PrivateCopy = this.PrivateCopy,
                Recurrence = this.Recurrence,
                RecurringEventId = this.RecurringEventId,
                Reminders = this.Reminders,
                Sequence = this.Sequence,
                Source = this.Source,
                Start = this.Start,
                Status = this.Status,
                Summary = this.Summary,
                Transparency = this.Transparency,
                Updated = this.Updated,
                Visibility = this.Visibility,
            };

            if (ShouldProcess("Event"))
            {
                WriteObject(body);
            }
        }
    }

    /// <summary>
    /// <para type="synopsis">Creates a new Calendar API Event.ExtendedPropertiesData object.</para>
    /// <para type="description">This provides a Cmdlet-Based approach to creating a Event.ExtendedPropertiesData object which may be required as a parameter for some other Cmdlets in the Calendar API category.</para>
    /// <para type="description">You could alternately create this object by calling New-Object -TypeName Google.Apis.Calendar.v3.Data.Event.ExtendedPropertiesData</para>
    /// <list type="alertSet"><item><term>About this Cmdlet</term><description>
    /// Part of the gShell Project, relating to the Google Calendar API; see Related Links or use the -Online parameter.
    /// </description></item></list>
    /// <example>
    ///   <code>PS C:\> New-GCalendarEventExtendedPropertiesDataObj</code>
    ///   <para>This automatically generated example serves to show the bare minimum required to call this Cmdlet.</para>
    ///   <para>Additional examples may be added, viewed and edited by users on the community wiki at the URL found in the related links.</para>
    /// </example>
    /// <para type="link" uri="https://github.com/squid808/gShell/wiki/New-GCalendarEvent.ExtendedPropertiesDataObj">[Wiki page for this Cmdlet]</para>
    /// <para type="link" uri="https://github.com/squid808/gShell/wiki/Getting-Started">[Getting started with gShell]</para>
    /// </summary>
    [Cmdlet(VerbsCommon.New, "GCalendarEventExtendedPropertiesDataObj",
    SupportsShouldProcess = true,
    HelpUri = @"https://github.com/squid808/gShell/wiki/New-GCalendarEvent.ExtendedPropertiesDataObj")]
    [OutputType(typeof(Google.Apis.Calendar.v3.Data.Event.ExtendedPropertiesData))]
    public class NewGCalendarEventExtendedPropertiesDataObjCommand : PSCmdlet
    {
        #region Properties


        /// <summary>
        /// <para type="description">Properties that are private to the copy of the event that appears on this calendar.</para>
        /// </summary>
        [Parameter(Position = 0,
        Mandatory = false,
        ValueFromPipelineByPropertyName = true,
        HelpMessage = "Properties that are private to the copy of the event that appears on this calendar.")]
        public System.Collections.Generic.IDictionary<string, string> Private__ { get; set; }

        /// <summary>
        /// <para type="description">Properties that are shared between copies of the event on other attendees' calendars.</para>
        /// </summary>
        [Parameter(Position = 1,
        Mandatory = false,
        ValueFromPipelineByPropertyName = true,
        HelpMessage = "Properties that are shared between copies of the event on other attendees' calendars.")]
        public System.Collections.Generic.IDictionary<string, string> Shared { get; set; }
        #endregion

        protected override void ProcessRecord()
        {
            var body = new Google.Apis.Calendar.v3.Data.Event.ExtendedPropertiesData()
            {
                Private__ = this.Private__,
                Shared = this.Shared,
            };

            if (ShouldProcess("Event.ExtendedPropertiesData"))
            {
                WriteObject(body);
            }
        }
    }

    /// <summary>
    /// <para type="synopsis">Creates a new Calendar API Event.GadgetData object.</para>
    /// <para type="description">This provides a Cmdlet-Based approach to creating a Event.GadgetData object which may be required as a parameter for some other Cmdlets in the Calendar API category.</para>
    /// <para type="description">You could alternately create this object by calling New-Object -TypeName Google.Apis.Calendar.v3.Data.Event.GadgetData</para>
    /// <list type="alertSet"><item><term>About this Cmdlet</term><description>
    /// Part of the gShell Project, relating to the Google Calendar API; see Related Links or use the -Online parameter.
    /// </description></item></list>
    /// <example>
    ///   <code>PS C:\> New-GCalendarEventGadgetDataObj</code>
    ///   <para>This automatically generated example serves to show the bare minimum required to call this Cmdlet.</para>
    ///   <para>Additional examples may be added, viewed and edited by users on the community wiki at the URL found in the related links.</para>
    /// </example>
    /// <para type="link" uri="https://github.com/squid808/gShell/wiki/New-GCalendarEvent.GadgetDataObj">[Wiki page for this Cmdlet]</para>
    /// <para type="link" uri="https://github.com/squid808/gShell/wiki/Getting-Started">[Getting started with gShell]</para>
    /// </summary>
    [Cmdlet(VerbsCommon.New, "GCalendarEventGadgetDataObj",
    SupportsShouldProcess = true,
    HelpUri = @"https://github.com/squid808/gShell/wiki/New-GCalendarEvent.GadgetDataObj")]
    [OutputType(typeof(Google.Apis.Calendar.v3.Data.Event.GadgetData))]
    public class NewGCalendarEventGadgetDataObjCommand : PSCmdlet
    {
        #region Properties


        /// <summary>
        /// <para type="description">The gadget's display mode. Optional. Possible values are:- "icon" - The gadget displays next to the event's title in the calendar view.- "chip" - The gadget displays when the event is clicked.</para>
        /// </summary>
        [Parameter(Position = 0,
        Mandatory = false,
        ValueFromPipelineByPropertyName = true,
        HelpMessage = "The gadget's display mode. Optional. Possible values are:  \n- \"icon\" - The gadget displays next to the event's title in the calendar view. \n- \"chip\" - The gadget displays when the event is clicked.")]
        public string Display { get; set; }

        /// <summary>
        /// <para type="description">The gadget's height in pixels. The height must be an integer greater than 0. Optional.</para>
        /// </summary>
        [Parameter(Position = 1,
        Mandatory = false,
        ValueFromPipelineByPropertyName = true,
        HelpMessage = "The gadget's height in pixels. The height must be an integer greater than 0. Optional.")]
        public System.Nullable<int> Height { get; set; }

        /// <summary>
        /// <para type="description">The gadget's icon URL. The URL scheme must be HTTPS.</para>
        /// </summary>
        [Parameter(Position = 2,
        Mandatory = false,
        ValueFromPipelineByPropertyName = true,
        HelpMessage = "The gadget's icon URL. The URL scheme must be HTTPS.")]
        public string IconLink { get; set; }

        /// <summary>
        /// <para type="description">The gadget's URL. The URL scheme must be HTTPS.</para>
        /// </summary>
        [Parameter(Position = 3,
        Mandatory = false,
        ValueFromPipelineByPropertyName = true,
        HelpMessage = "The gadget's URL. The URL scheme must be HTTPS.")]
        public string Link { get; set; }

        /// <summary>
        /// <para type="description">Preferences.</para>
        /// </summary>
        [Parameter(Position = 4,
        Mandatory = false,
        ValueFromPipelineByPropertyName = true,
        HelpMessage = "Preferences.")]
        public System.Collections.Generic.IDictionary<string, string> Preferences { get; set; }

        /// <summary>
        /// <para type="description">The gadget's title.</para>
        /// </summary>
        [Parameter(Position = 5,
        Mandatory = false,
        ValueFromPipelineByPropertyName = true,
        HelpMessage = "The gadget's title.")]
        public string Title { get; set; }

        /// <summary>
        /// <para type="description">The gadget's type.</para>
        /// </summary>
        [Parameter(Position = 6,
        Mandatory = false,
        ValueFromPipelineByPropertyName = true,
        HelpMessage = "The gadget's type.")]
        public string Type { get; set; }

        /// <summary>
        /// <para type="description">The gadget's width in pixels. The width must be an integer greater than 0. Optional.</para>
        /// </summary>
        [Parameter(Position = 7,
        Mandatory = false,
        ValueFromPipelineByPropertyName = true,
        HelpMessage = "The gadget's width in pixels. The width must be an integer greater than 0. Optional.")]
        public System.Nullable<int> Width { get; set; }
        #endregion

        protected override void ProcessRecord()
        {
            var body = new Google.Apis.Calendar.v3.Data.Event.GadgetData()
            {
                Display = this.Display,
                Height = this.Height,
                IconLink = this.IconLink,
                Link = this.Link,
                Preferences = this.Preferences,
                Title = this.Title,
                Type = this.Type,
                Width = this.Width,
            };

            if (ShouldProcess("Event.GadgetData"))
            {
                WriteObject(body);
            }
        }
    }

    /// <summary>
    /// <para type="synopsis">Creates a new Calendar API Event.OrganizerData object.</para>
    /// <para type="description">This provides a Cmdlet-Based approach to creating a Event.OrganizerData object which may be required as a parameter for some other Cmdlets in the Calendar API category.</para>
    /// <para type="description">You could alternately create this object by calling New-Object -TypeName Google.Apis.Calendar.v3.Data.Event.OrganizerData</para>
    /// <list type="alertSet"><item><term>About this Cmdlet</term><description>
    /// Part of the gShell Project, relating to the Google Calendar API; see Related Links or use the -Online parameter.
    /// </description></item></list>
    /// <example>
    ///   <code>PS C:\> New-GCalendarEventOrganizerDataObj</code>
    ///   <para>This automatically generated example serves to show the bare minimum required to call this Cmdlet.</para>
    ///   <para>Additional examples may be added, viewed and edited by users on the community wiki at the URL found in the related links.</para>
    /// </example>
    /// <para type="link" uri="https://github.com/squid808/gShell/wiki/New-GCalendarEvent.OrganizerDataObj">[Wiki page for this Cmdlet]</para>
    /// <para type="link" uri="https://github.com/squid808/gShell/wiki/Getting-Started">[Getting started with gShell]</para>
    /// </summary>
    [Cmdlet(VerbsCommon.New, "GCalendarEventOrganizerDataObj",
    SupportsShouldProcess = true,
    HelpUri = @"https://github.com/squid808/gShell/wiki/New-GCalendarEvent.OrganizerDataObj")]
    [OutputType(typeof(Google.Apis.Calendar.v3.Data.Event.OrganizerData))]
    public class NewGCalendarEventOrganizerDataObjCommand : PSCmdlet
    {
        #region Properties


        /// <summary>
        /// <para type="description">The organizer's name, if available.</para>
        /// </summary>
        [Parameter(Position = 0,
        Mandatory = false,
        ValueFromPipelineByPropertyName = true,
        HelpMessage = "The organizer's name, if available.")]
        public string DisplayName { get; set; }

        /// <summary>
        /// <para type="description">The organizer's email address, if available. It must be a valid email address as per RFC5322.</para>
        /// </summary>
        [Parameter(Position = 1,
        Mandatory = false,
        ValueFromPipelineByPropertyName = true,
        HelpMessage = "The organizer's email address, if available. It must be a valid email address as per RFC5322.")]
        public string Email { get; set; }

        /// <summary>
        /// <para type="description">The organizer's Profile ID, if available. It corresponds to theid field in the People collection of the Google+ API</para>
        /// </summary>
        [Parameter(Position = 2,
        Mandatory = false,
        ValueFromPipelineByPropertyName = true,
        HelpMessage = "The organizer's Profile ID, if available. It corresponds to theid field in the People collection of the Google+ API")]
        public string Id { get; set; }

        /// <summary>
        /// <para type="description">Whether the organizer corresponds to the calendar on which this copy of the event appears. Read-only. The default is False.</para>
        /// </summary>
        [Parameter(Position = 3,
        Mandatory = false,
        ValueFromPipelineByPropertyName = true,
        HelpMessage = "Whether the organizer corresponds to the calendar on which this copy of the event appears. Read-only. The default is False.")]
        public System.Nullable<bool> Self { get; set; }
        #endregion

        protected override void ProcessRecord()
        {
            var body = new Google.Apis.Calendar.v3.Data.Event.OrganizerData()
            {
                DisplayName = this.DisplayName,
                Email = this.Email,
                Id = this.Id,
                Self = this.Self,
            };

            if (ShouldProcess("Event.OrganizerData"))
            {
                WriteObject(body);
            }
        }
    }

    /// <summary>
    /// <para type="synopsis">Creates a new Calendar API Event.RemindersData object.</para>
    /// <para type="description">This provides a Cmdlet-Based approach to creating a Event.RemindersData object which may be required as a parameter for some other Cmdlets in the Calendar API category.</para>
    /// <para type="description">You could alternately create this object by calling New-Object -TypeName Google.Apis.Calendar.v3.Data.Event.RemindersData</para>
    /// <list type="alertSet"><item><term>About this Cmdlet</term><description>
    /// Part of the gShell Project, relating to the Google Calendar API; see Related Links or use the -Online parameter.
    /// </description></item></list>
    /// <example>
    ///   <code>PS C:\> New-GCalendarEventRemindersDataObj</code>
    ///   <para>This automatically generated example serves to show the bare minimum required to call this Cmdlet.</para>
    ///   <para>Additional examples may be added, viewed and edited by users on the community wiki at the URL found in the related links.</para>
    /// </example>
    /// <para type="link" uri="https://github.com/squid808/gShell/wiki/New-GCalendarEvent.RemindersDataObj">[Wiki page for this Cmdlet]</para>
    /// <para type="link" uri="https://github.com/squid808/gShell/wiki/Getting-Started">[Getting started with gShell]</para>
    /// </summary>
    [Cmdlet(VerbsCommon.New, "GCalendarEventRemindersDataObj",
    SupportsShouldProcess = true,
    HelpUri = @"https://github.com/squid808/gShell/wiki/New-GCalendarEvent.RemindersDataObj")]
    [OutputType(typeof(Google.Apis.Calendar.v3.Data.Event.RemindersData))]
    public class NewGCalendarEventRemindersDataObjCommand : PSCmdlet
    {
        #region Properties


        /// <summary>
        /// <para type="description">If the event doesn't use the default reminders, this lists the reminders specific to the event, or, if not set, indicates that no reminders are set for this event. The maximum number of override reminders is 5.</para>
        /// </summary>
        [Parameter(Position = 0,
        Mandatory = false,
        ValueFromPipelineByPropertyName = true,
        HelpMessage = "If the event doesn't use the default reminders, this lists the reminders specific to the event, or, if not set, indicates that no reminders are set for this event. The maximum number of override reminders is 5.")]
        public EventReminder[] Overrides { get; set; }

        /// <summary>
        /// <para type="description">Whether the default reminders of the calendar apply to the event.</para>
        /// </summary>
        [Parameter(Position = 1,
        Mandatory = false,
        ValueFromPipelineByPropertyName = true,
        HelpMessage = "Whether the default reminders of the calendar apply to the event.")]
        public System.Nullable<bool> UseDefault { get; set; }
        #endregion

        protected override void ProcessRecord()
        {
            var body = new Google.Apis.Calendar.v3.Data.Event.RemindersData()
            {
                Overrides = this.Overrides,
                UseDefault = this.UseDefault,
            };

            if (ShouldProcess("Event.RemindersData"))
            {
                WriteObject(body);
            }
        }
    }

    /// <summary>
    /// <para type="synopsis">Creates a new Calendar API Event.SourceData object.</para>
    /// <para type="description">This provides a Cmdlet-Based approach to creating a Event.SourceData object which may be required as a parameter for some other Cmdlets in the Calendar API category.</para>
    /// <para type="description">You could alternately create this object by calling New-Object -TypeName Google.Apis.Calendar.v3.Data.Event.SourceData</para>
    /// <list type="alertSet"><item><term>About this Cmdlet</term><description>
    /// Part of the gShell Project, relating to the Google Calendar API; see Related Links or use the -Online parameter.
    /// </description></item></list>
    /// <example>
    ///   <code>PS C:\> New-GCalendarEventSourceDataObj</code>
    ///   <para>This automatically generated example serves to show the bare minimum required to call this Cmdlet.</para>
    ///   <para>Additional examples may be added, viewed and edited by users on the community wiki at the URL found in the related links.</para>
    /// </example>
    /// <para type="link" uri="https://github.com/squid808/gShell/wiki/New-GCalendarEvent.SourceDataObj">[Wiki page for this Cmdlet]</para>
    /// <para type="link" uri="https://github.com/squid808/gShell/wiki/Getting-Started">[Getting started with gShell]</para>
    /// </summary>
    [Cmdlet(VerbsCommon.New, "GCalendarEventSourceDataObj",
    SupportsShouldProcess = true,
    HelpUri = @"https://github.com/squid808/gShell/wiki/New-GCalendarEvent.SourceDataObj")]
    [OutputType(typeof(Google.Apis.Calendar.v3.Data.Event.SourceData))]
    public class NewGCalendarEventSourceDataObjCommand : PSCmdlet
    {
        #region Properties


        /// <summary>
        /// <para type="description">Title of the source; for example a title of a web page or an email subject.</para>
        /// </summary>
        [Parameter(Position = 0,
        Mandatory = false,
        ValueFromPipelineByPropertyName = true,
        HelpMessage = "Title of the source; for example a title of a web page or an email subject.")]
        public string Title { get; set; }

        /// <summary>
        /// <para type="description">URL of the source pointing to a resource. The URL scheme must be HTTP or HTTPS.</para>
        /// </summary>
        [Parameter(Position = 1,
        Mandatory = false,
        ValueFromPipelineByPropertyName = true,
        HelpMessage = "URL of the source pointing to a resource. The URL scheme must be HTTP or HTTPS.")]
        public string Url { get; set; }
        #endregion

        protected override void ProcessRecord()
        {
            var body = new Google.Apis.Calendar.v3.Data.Event.SourceData()
            {
                Title = this.Title,
                Url = this.Url,
            };

            if (ShouldProcess("Event.SourceData"))
            {
                WriteObject(body);
            }
        }
    }

    /// <summary>
    /// <para type="synopsis">Creates a new Calendar API EventAttachment object.</para>
    /// <para type="description">This provides a Cmdlet-Based approach to creating a EventAttachment object which may be required as a parameter for some other Cmdlets in the Calendar API category.</para>
    /// <para type="description">You could alternately create this object by calling New-Object -TypeName Google.Apis.Calendar.v3.Data.EventAttachment</para>
    /// <list type="alertSet"><item><term>About this Cmdlet</term><description>
    /// Part of the gShell Project, relating to the Google Calendar API; see Related Links or use the -Online parameter.
    /// </description></item></list>
    /// <example>
    ///   <code>PS C:\> New-GCalendarEventAttachmentObj</code>
    ///   <para>This automatically generated example serves to show the bare minimum required to call this Cmdlet.</para>
    ///   <para>Additional examples may be added, viewed and edited by users on the community wiki at the URL found in the related links.</para>
    /// </example>
    /// <para type="link" uri="https://github.com/squid808/gShell/wiki/New-GCalendarEventAttachmentObj">[Wiki page for this Cmdlet]</para>
    /// <para type="link" uri="https://github.com/squid808/gShell/wiki/Getting-Started">[Getting started with gShell]</para>
    /// </summary>
    [Cmdlet(VerbsCommon.New, "GCalendarEventAttachmentObj",
    SupportsShouldProcess = true,
    HelpUri = @"https://github.com/squid808/gShell/wiki/New-GCalendarEventAttachmentObj")]
    [OutputType(typeof(Google.Apis.Calendar.v3.Data.EventAttachment))]
    public class NewGCalendarEventAttachmentObjCommand : PSCmdlet
    {
        #region Properties


        /// <summary>
        /// <para type="description">ID of the attached file. Read-only.For Google Drive files, this is the ID of the corresponding Files resource entry in the Drive API.</para>
        /// </summary>
        [Parameter(Position = 0,
        Mandatory = false,
        ValueFromPipelineByPropertyName = true,
        HelpMessage = "ID of the attached file. Read-only.\nFor Google Drive files, this is the ID of the corresponding Files resource entry in the Drive API.")]
        public string FileId { get; set; }

        /// <summary>
        /// <para type="description">URL link to the attachment.For adding Google Drive file attachments use the same format as in alternateLink property of the Files resource in the Drive API.</para>
        /// </summary>
        [Parameter(Position = 1,
        Mandatory = false,
        ValueFromPipelineByPropertyName = true,
        HelpMessage = "URL link to the attachment.\nFor adding Google Drive file attachments use the same format as in alternateLink property of the Files resource in the Drive API.")]
        public string FileUrl { get; set; }

        /// <summary>
        /// <para type="description">URL link to the attachment's icon. Read-only.</para>
        /// </summary>
        [Parameter(Position = 2,
        Mandatory = false,
        ValueFromPipelineByPropertyName = true,
        HelpMessage = "URL link to the attachment's icon. Read-only.")]
        public string IconLink { get; set; }

        /// <summary>
        /// <para type="description">Internet media type (MIME type) of the attachment.</para>
        /// </summary>
        [Parameter(Position = 3,
        Mandatory = false,
        ValueFromPipelineByPropertyName = true,
        HelpMessage = "Internet media type (MIME type) of the attachment.")]
        public string MimeType { get; set; }

        /// <summary>
        /// <para type="description">Attachment title.</para>
        /// </summary>
        [Parameter(Position = 4,
        Mandatory = false,
        ValueFromPipelineByPropertyName = true,
        HelpMessage = "Attachment title.")]
        public string Title { get; set; }
        #endregion

        protected override void ProcessRecord()
        {
            var body = new Google.Apis.Calendar.v3.Data.EventAttachment()
            {
                FileId = this.FileId,
                FileUrl = this.FileUrl,
                IconLink = this.IconLink,
                MimeType = this.MimeType,
                Title = this.Title,
            };

            if (ShouldProcess("EventAttachment"))
            {
                WriteObject(body);
            }
        }
    }

    /// <summary>
    /// <para type="synopsis">Creates a new Calendar API EventAttendee object.</para>
    /// <para type="description">This provides a Cmdlet-Based approach to creating a EventAttendee object which may be required as a parameter for some other Cmdlets in the Calendar API category.</para>
    /// <para type="description">You could alternately create this object by calling New-Object -TypeName Google.Apis.Calendar.v3.Data.EventAttendee</para>
    /// <list type="alertSet"><item><term>About this Cmdlet</term><description>
    /// Part of the gShell Project, relating to the Google Calendar API; see Related Links or use the -Online parameter.
    /// </description></item></list>
    /// <example>
    ///   <code>PS C:\> New-GCalendarEventAttendeeObj</code>
    ///   <para>This automatically generated example serves to show the bare minimum required to call this Cmdlet.</para>
    ///   <para>Additional examples may be added, viewed and edited by users on the community wiki at the URL found in the related links.</para>
    /// </example>
    /// <para type="link" uri="https://github.com/squid808/gShell/wiki/New-GCalendarEventAttendeeObj">[Wiki page for this Cmdlet]</para>
    /// <para type="link" uri="https://github.com/squid808/gShell/wiki/Getting-Started">[Getting started with gShell]</para>
    /// </summary>
    [Cmdlet(VerbsCommon.New, "GCalendarEventAttendeeObj",
    SupportsShouldProcess = true,
    HelpUri = @"https://github.com/squid808/gShell/wiki/New-GCalendarEventAttendeeObj")]
    [OutputType(typeof(Google.Apis.Calendar.v3.Data.EventAttendee))]
    public class NewGCalendarEventAttendeeObjCommand : PSCmdlet
    {
        #region Properties


        /// <summary>
        /// <para type="description">Number of additional guests. Optional. The default is 0.</para>
        /// </summary>
        [Parameter(Position = 0,
        Mandatory = false,
        ValueFromPipelineByPropertyName = true,
        HelpMessage = "Number of additional guests. Optional. The default is 0.")]
        public System.Nullable<int> AdditionalGuests { get; set; }

        /// <summary>
        /// <para type="description">The attendee's response comment. Optional.</para>
        /// </summary>
        [Parameter(Position = 1,
        Mandatory = false,
        ValueFromPipelineByPropertyName = true,
        HelpMessage = "The attendee's response comment. Optional.")]
        public string Comment { get; set; }

        /// <summary>
        /// <para type="description">The attendee's name, if available. Optional.</para>
        /// </summary>
        [Parameter(Position = 2,
        Mandatory = false,
        ValueFromPipelineByPropertyName = true,
        HelpMessage = "The attendee's name, if available. Optional.")]
        public string DisplayName { get; set; }

        /// <summary>
        /// <para type="description">The attendee's email address, if available. This field must be present when adding an attendee. It must be a valid email address as per RFC5322.</para>
        /// </summary>
        [Parameter(Position = 3,
        Mandatory = false,
        ValueFromPipelineByPropertyName = true,
        HelpMessage = "The attendee's email address, if available. This field must be present when adding an attendee. It must be a valid email address as per RFC5322.")]
        public string Email { get; set; }

        /// <summary>
        /// <para type="description">The attendee's Profile ID, if available. It corresponds to theid field in the People collection of the Google+ API</para>
        /// </summary>
        [Parameter(Position = 4,
        Mandatory = false,
        ValueFromPipelineByPropertyName = true,
        HelpMessage = "The attendee's Profile ID, if available. It corresponds to theid field in the People collection of the Google+ API")]
        public string Id { get; set; }

        /// <summary>
        /// <para type="description">Whether this is an optional attendee. Optional. The default is False.</para>
        /// </summary>
        [Parameter(Position = 5,
        Mandatory = false,
        ValueFromPipelineByPropertyName = true,
        HelpMessage = "Whether this is an optional attendee. Optional. The default is False.")]
        public System.Nullable<bool> Optional { get; set; }

        /// <summary>
        /// <para type="description">Whether the attendee is the organizer of the event. Read-only. The default is False.</para>
        /// </summary>
        [Parameter(Position = 6,
        Mandatory = false,
        ValueFromPipelineByPropertyName = true,
        HelpMessage = "Whether the attendee is the organizer of the event. Read-only. The default is False.")]
        public System.Nullable<bool> Organizer { get; set; }

        /// <summary>
        /// <para type="description">Whether the attendee is a resource. Read-only. The default is False.</para>
        /// </summary>
        [Parameter(Position = 7,
        Mandatory = false,
        ValueFromPipelineByPropertyName = true,
        HelpMessage = "Whether the attendee is a resource. Read-only. The default is False.")]
        public System.Nullable<bool> Resource { get; set; }

        /// <summary>
        /// <para type="description">The attendee's response status. Possible values are:- "needsAction" - The attendee has not responded to the invitation.- "declined" - The attendee has declined the invitation.- "tentative" - The attendee has tentatively accepted the invitation.- "accepted" - The attendee has accepted the invitation.</para>
        /// </summary>
        [Parameter(Position = 8,
        Mandatory = false,
        ValueFromPipelineByPropertyName = true,
        HelpMessage = "The attendee's response status. Possible values are:  \n- \"needsAction\" - The attendee has not responded to the invitation. \n- \"declined\" - The attendee has declined the invitation. \n- \"tentative\" - The attendee has tentatively accepted the invitation. \n- \"accepted\" - The attendee has accepted the invitation.")]
        public string ResponseStatus { get; set; }

        /// <summary>
        /// <para type="description">Whether this entry represents the calendar on which this copy of the event appears. Read-only. The default is False.</para>
        /// </summary>
        [Parameter(Position = 9,
        Mandatory = false,
        ValueFromPipelineByPropertyName = true,
        HelpMessage = "Whether this entry represents the calendar on which this copy of the event appears. Read-only. The default is False.")]
        public System.Nullable<bool> Self { get; set; }
        #endregion

        protected override void ProcessRecord()
        {
            var body = new Google.Apis.Calendar.v3.Data.EventAttendee()
            {
                AdditionalGuests = this.AdditionalGuests,
                Comment = this.Comment,
                DisplayName = this.DisplayName,
                Email = this.Email,
                Id = this.Id,
                Optional = this.Optional,
                Organizer = this.Organizer,
                Resource = this.Resource,
                ResponseStatus = this.ResponseStatus,
                Self = this.Self,
            };

            if (ShouldProcess("EventAttendee"))
            {
                WriteObject(body);
            }
        }
    }

    /// <summary>
    /// <para type="synopsis">Creates a new Calendar API EventDateTime object.</para>
    /// <para type="description">This provides a Cmdlet-Based approach to creating a EventDateTime object which may be required as a parameter for some other Cmdlets in the Calendar API category.</para>
    /// <para type="description">You could alternately create this object by calling New-Object -TypeName Google.Apis.Calendar.v3.Data.EventDateTime</para>
    /// <list type="alertSet"><item><term>About this Cmdlet</term><description>
    /// Part of the gShell Project, relating to the Google Calendar API; see Related Links or use the -Online parameter.
    /// </description></item></list>
    /// <example>
    ///   <code>PS C:\> New-GCalendarEventDateTimeObj</code>
    ///   <para>This automatically generated example serves to show the bare minimum required to call this Cmdlet.</para>
    ///   <para>Additional examples may be added, viewed and edited by users on the community wiki at the URL found in the related links.</para>
    /// </example>
    /// <para type="link" uri="https://github.com/squid808/gShell/wiki/New-GCalendarEventDateTimeObj">[Wiki page for this Cmdlet]</para>
    /// <para type="link" uri="https://github.com/squid808/gShell/wiki/Getting-Started">[Getting started with gShell]</para>
    /// </summary>
    [Cmdlet(VerbsCommon.New, "GCalendarEventDateTimeObj",
    SupportsShouldProcess = true,
    HelpUri = @"https://github.com/squid808/gShell/wiki/New-GCalendarEventDateTimeObj")]
    [OutputType(typeof(Google.Apis.Calendar.v3.Data.EventDateTime))]
    public class NewGCalendarEventDateTimeObjCommand : PSCmdlet
    {
        #region Properties


        /// <summary>
        /// <para type="description">The date, in the format "yyyy-mm-dd", if this is an all-day event.</para>
        /// </summary>
        [Parameter(Position = 0,
        Mandatory = false,
        ValueFromPipelineByPropertyName = true,
        HelpMessage = "The date, in the format \"yyyy-mm-dd\", if this is an all-day event.")]
        public string Date { get; set; }

        /// <summary>
        /// <para type="description">The time, as a combined date-time value (formatted according to RFC3339). A time zone offset is required unless a time zone is explicitly specified in timeZone.</para>
        /// </summary>
        [Parameter(Position = 1,
        Mandatory = false,
        ValueFromPipelineByPropertyName = true,
        HelpMessage = "The time, as a combined date-time value (formatted according to RFC3339). A time zone offset is required unless a time zone is explicitly specified in timeZone.")]
        public System.Nullable<System.DateTime> DateTime { get; set; }

        /// <summary>
        /// <para type="description">The time zone in which the time is specified. (Formatted as an IANA Time Zone Database name, e.g. "Europe/Zurich".) For recurring events this field is required and specifies the time zone in which the recurrence is expanded. For single events this field is optional and indicates a custom time zone for the event start/end.</para>
        /// </summary>
        [Parameter(Position = 2,
        Mandatory = false,
        ValueFromPipelineByPropertyName = true,
        HelpMessage = "The time zone in which the time is specified. (Formatted as an IANA Time Zone Database name, e.g. \"Europe/Zurich\".) For recurring events this field is required and specifies the time zone in which the recurrence is expanded. For single events this field is optional and indicates a custom time zone for the event start/end.")]
        public string TimeZone { get; set; }
        #endregion

        protected override void ProcessRecord()
        {
            var body = new Google.Apis.Calendar.v3.Data.EventDateTime()
            {
                Date = this.Date,
                DateTime = this.DateTime,
                TimeZone = this.TimeZone,
            };

            if (ShouldProcess("EventDateTime"))
            {
                WriteObject(body);
            }
        }
    }

    /// <summary>
    /// <para type="synopsis">Creates a new Calendar API EventReminder object.</para>
    /// <para type="description">This provides a Cmdlet-Based approach to creating a EventReminder object which may be required as a parameter for some other Cmdlets in the Calendar API category.</para>
    /// <para type="description">You could alternately create this object by calling New-Object -TypeName Google.Apis.Calendar.v3.Data.EventReminder</para>
    /// <list type="alertSet"><item><term>About this Cmdlet</term><description>
    /// Part of the gShell Project, relating to the Google Calendar API; see Related Links or use the -Online parameter.
    /// </description></item></list>
    /// <example>
    ///   <code>PS C:\> New-GCalendarEventReminderObj</code>
    ///   <para>This automatically generated example serves to show the bare minimum required to call this Cmdlet.</para>
    ///   <para>Additional examples may be added, viewed and edited by users on the community wiki at the URL found in the related links.</para>
    /// </example>
    /// <para type="link" uri="https://github.com/squid808/gShell/wiki/New-GCalendarEventReminderObj">[Wiki page for this Cmdlet]</para>
    /// <para type="link" uri="https://github.com/squid808/gShell/wiki/Getting-Started">[Getting started with gShell]</para>
    /// </summary>
    [Cmdlet(VerbsCommon.New, "GCalendarEventReminderObj",
    SupportsShouldProcess = true,
    HelpUri = @"https://github.com/squid808/gShell/wiki/New-GCalendarEventReminderObj")]
    [OutputType(typeof(Google.Apis.Calendar.v3.Data.EventReminder))]
    public class NewGCalendarEventReminderObjCommand : PSCmdlet
    {
        #region Properties


        /// <summary>
        /// <para type="description">The method used by this reminder. Possible values are:- "email" - Reminders are sent via email.- "sms" - Reminders are sent via SMS. These are only available for Google Apps for Work, Education, and Government customers. Requests to set SMS reminders for other account types are ignored.- "popup" - Reminders are sent via a UI popup.</para>
        /// </summary>
        [Parameter(Position = 0,
        Mandatory = false,
        ValueFromPipelineByPropertyName = true,
        HelpMessage = "The method used by this reminder. Possible values are:  \n- \"email\" - Reminders are sent via email. \n- \"sms\" - Reminders are sent via SMS. These are only available for Google Apps for Work, Education, and Government customers. Requests to set SMS reminders for other account types are ignored. \n- \"popup\" - Reminders are sent via a UI popup.")]
        public string Method { get; set; }

        /// <summary>
        /// <para type="description">Number of minutes before the start of the event when the reminder should trigger. Valid values are between 0 and 40320 (4 weeks in minutes).</para>
        /// </summary>
        [Parameter(Position = 1,
        Mandatory = false,
        ValueFromPipelineByPropertyName = true,
        HelpMessage = "Number of minutes before the start of the event when the reminder should trigger. Valid values are between 0 and 40320 (4 weeks in minutes).")]
        public System.Nullable<int> Minutes { get; set; }
        #endregion

        protected override void ProcessRecord()
        {
            var body = new Google.Apis.Calendar.v3.Data.EventReminder()
            {
                Method = this.Method,
                Minutes = this.Minutes,
            };

            if (ShouldProcess("EventReminder"))
            {
                WriteObject(body);
            }
        }
    }
}

namespace gShell.Cmdlets.Calendar.Acl
{
    /// <summary>
    /// <para type="synopsis">Deletes an access control rule.</para>
    /// <para type="description">Deletes an access control rule.</para>
    /// <list type="alertSet"><item><term>About this Cmdlet</term><description>
    /// Part of the gShell Project, relating to the Google Calendar API; see Related Links or use the -Online parameter.
    /// </description></item></list>
    /// <example>
    ///   <code>PS C:\> Remove-GCalendarAcl -CalendarId $SomeCalendarIdString -RuleId $SomeRuleIdString</code>
    ///   <para>This automatically generated example serves to show the bare minimum required to call this Cmdlet.</para>
    ///   <para>Additional examples may be added, viewed and edited by users on the community wiki at the URL found in the related links.</para>
    /// </example>
    /// <para type="link" uri="https://github.com/squid808/gShell/wiki/Remove-GCalendarAcl">[Wiki page for this Cmdlet]</para>
    /// <para type="link" uri="https://github.com/squid808/gShell/wiki/Getting-Started">[Getting started with gShell]</para>
    /// </summary>
    [Cmdlet(VerbsCommon.Remove, "GCalendarAcl",
        SupportsShouldProcess = true,
        HelpUri = @"https://github.com/squid808/gShell/wiki/Remove-GCalendarAcl")]
    public class RemoveGCalendarAclCommand : CalendarBase
    {
        #region Properties

        /// <summary>
        /// <para type="description">Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.</para>
        /// </summary>
        [Parameter(Position = 0,
            Mandatory = true,
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the \"primary\" keyword."
            )]
        public string CalendarId { get; set; }

        /// <summary>
        /// <para type="description">ACL rule identifier.</para>
        /// </summary>
        [Parameter(Position = 1,
            Mandatory = true,
            ValueFromPipelineByPropertyName = true,
            HelpMessage = "ACL rule identifier.")]
        public string RuleId { get; set; }

        /// <summary>
        /// <para type="description">A switch to run the cmdlet without prompting</para>
        /// </summary>
        [Parameter(Position = 2,
        Mandatory = false,
        HelpMessage = "A switch to run the cmdlet without prompting")]
        public SwitchParameter Force { get; set; }

        #endregion

        protected override void ProcessRecord()
        {
            string toRemoveTarget = "Calendar Acl";

			if (ShouldProcess(toRemoveTarget))
			{	
				if (Force || ShouldContinue(toRemoveTarget + "will be removed.\nContinue?", "Confirm Removal"))
				{
					try
					{
						WriteDebug("Attempting to remove " + toRemoveTarget + "...");

                        acl.Delete(CalendarId, RuleId, ServiceAccount: gShellServiceAccount, StandardQueryParams: StandardQueryParams);
							
						WriteVerbose("Removal of " + toRemoveTarget + " completed without error.");
					}
					catch (Exception e)
					{
						WriteError(new ErrorRecord(e, e.GetBaseException().ToString(), ErrorCategory.InvalidData, toRemoveTarget));
					}
				}
				else
				{
					WriteError(new ErrorRecord(new Exception("Deletion not confirmed"),
						"", ErrorCategory.InvalidData, toRemoveTarget));
				}
			}
        }
    }

    /// <summary>
    /// <para type="synopsis">Returns an access control rule.</para>
    /// <para type="description">Returns an access control rule.</para>
    /// <list type="alertSet"><item><term>About this Cmdlet</term><description>
    /// Part of the gShell Project, relating to the Google Calendar API; see Related Links or use the -Online parameter.
    /// </description></item></list>
    /// <example>
    ///   <code>PS C:\> Get-GCalendarAcl -CalendarId $SomeCalendarIdString -RuleId $SomeRuleIdString</code>
    ///   <para>This automatically generated example serves to show the bare minimum required to call this Cmdlet.</para>
    ///   <para>Additional examples may be added, viewed and edited by users on the community wiki at the URL found in the related links.</para>
    /// </example>
    /// <example>
    ///   <code>PS C:\> Get-GCalendarAcl -CalendarId $SomeCalendarIdString -All</code>
    ///   <para>This automatically generated example serves to show the bare minimum required to call this Cmdlet.</para>
    ///   <para>Additional examples may be added, viewed and edited by users on the community wiki at the URL found in the related links.</para>
    /// </example>
    /// <para type="link" uri="https://github.com/squid808/gShell/wiki/Get-GCalendarAcl">[Wiki page for this Cmdlet]</para>
    /// <para type="link" uri="https://github.com/squid808/gShell/wiki/Getting-Started">[Getting started with gShell]</para>
    /// </summary>
    [Cmdlet(VerbsCommon.Get, "GCalendarAcl",
        SupportsShouldProcess = true,
        DefaultParameterSetName = "one",
        HelpUri = @"https://github.com/squid808/gShell/wiki/Get-GCalendarAcl")]
    public class GetGCalendarAclCommand : CalendarBase
    {
        #region Properties

        /// <summary>
        /// <para type="description">Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.</para>
        /// </summary>
        [Parameter(Position = 0,
            Mandatory = true,
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the \"primary\" keyword."
            )]
        public string CalendarId { get; set; }

        /// <summary>
        /// <para type="description">ACL rule identifier.</para>
        /// </summary>
        [Parameter(Position = 1,
            ParameterSetName = "one",
            Mandatory = true,
            ValueFromPipelineByPropertyName = true,
            HelpMessage = "ACL rule identifier.")]
        public string RuleId { get; set; }

        /// <summary>
        /// <para type="description">A switch to list all results</para>
        /// </summary>
        [Parameter(Position = 2,
        Mandatory = true,
        ParameterSetName = "list",
        HelpMessage = "A switch to list all results.")]
        public SwitchParameter All { get; set; }

        /// <summary>
        /// <para type="description">Maximum number of entries returned on one result page. By default the value is 100 entries. The page size can never be larger than 250 entries. Optional.</para>
        /// </summary>
        [Parameter(Position = 2,
            ParameterSetName = "list",
            Mandatory = false,
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "Maximum number of entries returned on one result page. By default the value is 100 entries. The page size can never be larger than 250 entries. Optional."
            )]
        public int? MaxResults { get; set; }

        /// <summary>
        /// <para type="description">Whether to include deleted ACLs in the result. Deleted ACLs are represented by role equal to "none". Deleted ACLs will always be included if syncToken is provided. Optional. The default is False.</para>
        /// </summary>
        [Parameter(Position = 3,
            ParameterSetName = "list",
            Mandatory = false,
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "Whether to include deleted ACLs in the result. Deleted ACLs are represented by role equal to \"none\". Deleted ACLs will always be included if syncToken is provided. Optional. The default is False."
            )]
        public bool? ShowDeleted { get; set; }

        /// <summary>
        /// <para type="description">Token obtained from the nextSyncToken field returned on the last page of results from the previous list request. It makes the result of this list request contain only entries that have changed since then. All entries deleted since the previous list request will always be in the result set and it is not allowed to set showDeleted to False.If the syncToken expires, the server will respond with a 410 GONE response code and the client should clear its storage and perform a full synchronization without any syncToken.Learn more about incremental synchronization.Optional. The default is to return all entries.</para>
        /// </summary>
        [Parameter(Position = 4,
            ParameterSetName = "list",
            Mandatory = false,
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "Token obtained from the nextSyncToken field returned on the last page of results from the previous list request. It makes the result of this list request contain only entries that have changed since then. All entries deleted since the previous list request will always be in the result set and it is not allowed to set showDeleted to False.\nIf the syncToken expires, the server will respond with a 410 GONE response code and the client should clear its storage and perform a full synchronization without any syncToken.\nLearn more about incremental synchronization.\nOptional. The default is to return all entries."
            )]
        public string SyncToken { get; set; }

        #endregion

        protected override void ProcessRecord()
        {
            if (ShouldProcess("Calendar Acl", "Get-GCalendarAcl"))
            {
                if (ParameterSetName == "one")
                {
                    WriteObject(acl.Get(CalendarId, RuleId, ServiceAccount: gShellServiceAccount, StandardQueryParams: StandardQueryParams));
                }
                else
                {
                    var properties = new gCalendar.Acl.AclListProperties
                    {
                        ShowDeleted = ShowDeleted,
                        SyncToken = SyncToken
                    };

                    if (MaxResults.HasValue) properties.TotalResults = MaxResults.Value;

                    WriteObject(acl.List(CalendarId, properties, ServiceAccount: gShellServiceAccount, StandardQueryParams: StandardQueryParams).SelectMany(x => x.Items).ToList());
                }
            }
        }
    }

    /// <summary>
    /// <para type="synopsis">Creates an access control rule.</para>
    /// <para type="description">Creates an access control rule.</para>
    /// <list type="alertSet"><item><term>About this Cmdlet</term><description>
    /// Part of the gShell Project, relating to the Google Calendar API; see Related Links or use the -Online parameter.
    /// </description></item></list>
    /// <example>
    ///   <code>PS C:\> New-GCalendarAcl -CalendarId $SomeCalendarIdString -AclRuleBody $SomeAclRuleObj</code>
    ///   <para>This automatically generated example serves to show the bare minimum required to call this Cmdlet.</para>
    ///   <para>Additional examples may be added, viewed and edited by users on the community wiki at the URL found in the related links.</para>
    /// </example>
    /// <para type="link" uri="https://github.com/squid808/gShell/wiki/New-GCalendarAcl">[Wiki page for this Cmdlet]</para>
    /// <para type="link" uri="https://github.com/squid808/gShell/wiki/Getting-Started">[Getting started with gShell]</para>
    /// </summary>
    [Cmdlet(VerbsCommon.New, "GCalendarAcl",
        SupportsShouldProcess = true,
        HelpUri = @"https://github.com/squid808/gShell/wiki/New-GCalendarAcl")]
    public class NewGCalendarAclCommand : CalendarBase
    {
        #region Properties

        /// <summary>
        /// <para type="description">Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.</para>
        /// </summary>
        [Parameter(Position = 0,
            Mandatory = true,
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the \"primary\" keyword."
            )]
        public string CalendarId { get; set; }



        /// <summary><para type="description">An AclRuleBody object</para></summary>
        [Parameter(Position = 2,
            Mandatory = false,
            HelpMessage = "An AclRuleBody object",
            ValueFromPipeline = true,
            ValueFromPipelineByPropertyName = true)]
        public AclRule AclRuleBody { get; set; }

        #endregion

        protected override void ProcessRecord()
        {
            if (ShouldProcess("Calendar Acl", "New-GCalendarAcl"))
            {
                WriteObject(acl.Insert(AclRuleBody, CalendarId, ServiceAccount: gShellServiceAccount, StandardQueryParams: StandardQueryParams));
            }
        }
    }

    /// <summary>
    /// <para type="synopsis">Updates an access control rule. This method supports patch semantics.</para>
    /// <para type="description">Updates an access control rule. This method supports patch semantics.</para>
    /// <list type="alertSet"><item><term>About this Cmdlet</term><description>
    /// Part of the gShell Project, relating to the Google Calendar API; see Related Links or use the -Online parameter.
    /// </description></item></list>
    /// <example>
    ///   <code>PS C:\> Set-GCalendarAcl -CalendarId $SomeCalendarIdString -RuleId $SomeRuleIdString -AclRuleBody $SomeAclRuleObj</code>
    ///   <para>This automatically generated example serves to show the bare minimum required to call this Cmdlet.</para>
    ///   <para>Additional examples may be added, viewed and edited by users on the community wiki at the URL found in the related links.</para>
    /// </example>
    /// <para type="link" uri="https://github.com/squid808/gShell/wiki/Set-GCalendarAcl">[Wiki page for this Cmdlet]</para>
    /// <para type="link" uri="https://github.com/squid808/gShell/wiki/Getting-Started">[Getting started with gShell]</para>
    /// </summary>
    [Cmdlet(VerbsCommon.Set, "GCalendarAcl",
        SupportsShouldProcess = true,
        HelpUri = @"https://github.com/squid808/gShell/wiki/Set-GCalendarAcl")]
    public class SetGCalendarAclCommand : CalendarBase
    {
        #region Properties

        /// <summary>
        /// <para type="description">Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.</para>
        /// </summary>
        [Parameter(Position = 0,
            Mandatory = true,
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the \"primary\" keyword."
            )]
        public string CalendarId { get; set; }

        /// <summary>
        /// <para type="description">ACL rule identifier.</para>
        /// </summary>
        [Parameter(Position = 1,
            Mandatory = true,
            ValueFromPipelineByPropertyName = true,
            HelpMessage = "ACL rule identifier.")]
        public string RuleId { get; set; }



        /// <summary><para type="description">An AclRuleBody object</para></summary>
        [Parameter(Position = 2,
            Mandatory = false,
            HelpMessage = "A, AclRuleBody object",
            ValueFromPipeline = true,
            ValueFromPipelineByPropertyName = true)]
        public AclRule AclRuleBody { get; set; }

        #endregion

        protected override void ProcessRecord()
        {
            if (ShouldProcess("Calendar Acl", "Set-GCalendarAcl"))
            {
                WriteObject(acl.Patch(AclRuleBody, CalendarId, RuleId, ServiceAccount: gShellServiceAccount, StandardQueryParams: StandardQueryParams));
            }
        }
    }

    /// <summary>
    /// <para type="synopsis">Watch for changes to ACL resources.</para>
    /// <para type="description">Watch for changes to ACL resources.</para>
    /// <list type="alertSet"><item><term>About this Cmdlet</term><description>
    /// Part of the gShell Project, relating to the Google Calendar API; see Related Links or use the -Online parameter.
    /// </description></item></list>
    /// <example>
    ///   <code>PS C:\> Watch-GCalendarAcl -CalendarId $SomeCalendarIdString -ChannelBody $SomeChannelObj</code>
    ///   <para>This automatically generated example serves to show the bare minimum required to call this Cmdlet.</para>
    ///   <para>Additional examples may be added, viewed and edited by users on the community wiki at the URL found in the related links.</para>
    /// </example>
    /// <para type="link" uri="https://github.com/squid808/gShell/wiki/Watch-GCalendarAcl">[Wiki page for this Cmdlet]</para>
    /// <para type="link" uri="https://github.com/squid808/gShell/wiki/Getting-Started">[Getting started with gShell]</para>
    /// </summary>
    [Cmdlet(VerbsCommon.Watch, "GCalendarAcl",
        SupportsShouldProcess = true,
        HelpUri = @"https://github.com/squid808/gShell/wiki/Watch-GCalendarAcl")]
    public class WatchGCalendarAclCommand : CalendarBase
    {
        #region Properties

        /// <summary>
        /// <para type="description">Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.</para>
        /// </summary>
        [Parameter(Position = 0,
            Mandatory = true,
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the \"primary\" keyword."
            )]
        public string CalendarId { get; set; }



        /// <summary><para type="description">A ChannelBody object</para></summary>
        [Parameter(Position = 0,
            Mandatory = false,
            HelpMessage = "A ChannelBody object",
            ValueFromPipeline = true,
            ValueFromPipelineByPropertyName = true)]
        public Channel ChannelBody { get; set; }

        /// <summary>
        /// <para type="description">Maximum number of entries returned on one result page. By default the value is 100 entries. The page size can never be larger than 250 entries. Optional.</para>
        /// </summary>
        [Parameter(Position = 2,
            Mandatory = false,
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "Maximum number of entries returned on one result page. By default the value is 100 entries. The page size can never be larger than 250 entries. Optional."
            )]
        public int? MaxResults { get; set; }

        /// <summary>
        /// <para type="description">Whether to include deleted ACLs in the result. Deleted ACLs are represented by role equal to "none". Deleted ACLs will always be included if syncToken is provided. Optional. The default is False.</para>
        /// </summary>
        [Parameter(Position = 3,
            Mandatory = false,
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "Whether to include deleted ACLs in the result. Deleted ACLs are represented by role equal to \"none\". Deleted ACLs will always be included if syncToken is provided. Optional. The default is False."
            )]
        public bool? ShowDeleted { get; set; }

        /// <summary>
        /// <para type="description">Token obtained from the nextSyncToken field returned on the last page of results from the previous list request. It makes the result of this list request contain only entries that have changed since then. All entries deleted since the previous list request will always be in the result set and it is not allowed to set showDeleted to False.If the syncToken expires, the server will respond with a 410 GONE response code and the client should clear its storage and perform a full synchronization without any syncToken.Learn more about incremental synchronization.Optional. The default is to return all entries.</para>
        /// </summary>
        [Parameter(Position = 4,
            Mandatory = false,
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "Token obtained from the nextSyncToken field returned on the last page of results from the previous list request. It makes the result of this list request contain only entries that have changed since then. All entries deleted since the previous list request will always be in the result set and it is not allowed to set showDeleted to False.\nIf the syncToken expires, the server will respond with a 410 GONE response code and the client should clear its storage and perform a full synchronization without any syncToken.\nLearn more about incremental synchronization.\nOptional. The default is to return all entries."
            )]
        public string SyncToken { get; set; }

        #endregion

        protected override void ProcessRecord()
        {
            if (ShouldProcess("Calendar Acl", "Watch-GCalendarAcl"))
            {
                var properties = new gCalendar.Acl.AclWatchProperties
                {
                    ShowDeleted = ShowDeleted,
                    SyncToken = SyncToken
                };


                WriteObject(acl.Watch(ChannelBody, CalendarId, properties, ServiceAccount: gShellServiceAccount, StandardQueryParams: StandardQueryParams));
            }
        }
    }
}

namespace gShell.Cmdlets.Calendar.CalendarList
{
    /// <summary>
    /// <para type="synopsis">Deletes an entry on the user's calendar list.</para>
    /// <para type="description">Deletes an entry on the user's calendar list.</para>
    /// <list type="alertSet"><item><term>About this Cmdlet</term><description>
    /// Part of the gShell Project, relating to the Google Calendar API; see Related Links or use the -Online parameter.
    /// </description></item></list>
    /// <example>
    ///   <code>PS C:\> Remove-GCalendarList -CalendarId $SomeCalendarIdString</code>
    ///   <para>This automatically generated example serves to show the bare minimum required to call this Cmdlet.</para>
    ///   <para>Additional examples may be added, viewed and edited by users on the community wiki at the URL found in the related links.</para>
    /// </example>
    /// <para type="link" uri="https://github.com/squid808/gShell/wiki/Remove-GCalendarList">[Wiki page for this Cmdlet]</para>
    /// <para type="link" uri="https://github.com/squid808/gShell/wiki/Getting-Started">[Getting started with gShell]</para>
    /// </summary>
    [Cmdlet(VerbsCommon.Remove, "GCalendarList",
        SupportsShouldProcess = true,
        HelpUri = @"https://github.com/squid808/gShell/wiki/Remove-GCalendarList")]
    public class RemoveGCalendarListCommand : CalendarBase
    {
        #region Properties

        /// <summary>
        /// <para type="description">Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.</para>
        /// </summary>
        [Parameter(Position = 0,
            Mandatory = true,
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the \"primary\" keyword."
            )]
        public string CalendarId { get; set; }

        /// <summary>
        /// <para type="description">A switch to run the cmdlet without prompting</para>
        /// </summary>
        [Parameter(Position = 1,
        Mandatory = false,
        HelpMessage = "A switch to run the cmdlet without prompting")]
        public SwitchParameter Force { get; set; }

        #endregion

        protected override void ProcessRecord()
        {
            string toRemoveTarget = "Calendar List";

			if (ShouldProcess(toRemoveTarget))
			{	
				if (Force || ShouldContinue(toRemoveTarget + "will be removed.\nContinue?", "Confirm Removal"))
				{
					try
					{
						WriteDebug("Attempting to remove " + toRemoveTarget + "...");

                        calendarList.Delete(CalendarId, ServiceAccount: gShellServiceAccount, StandardQueryParams: StandardQueryParams);
							
						WriteVerbose("Removal of " + toRemoveTarget + " completed without error.");
					}
					catch (Exception e)
					{
						WriteError(new ErrorRecord(e, e.GetBaseException().ToString(), ErrorCategory.InvalidData, toRemoveTarget));
					}
				}
				else
				{
					WriteError(new ErrorRecord(new Exception("Deletion not confirmed"),
						"", ErrorCategory.InvalidData, toRemoveTarget));
				}
			}
        }
    }

    /// <summary>
    /// <para type="synopsis">Returns an entry on the user's calendar list.</para>
    /// <para type="description">Returns an entry on the user's calendar list.</para>
    /// <list type="alertSet"><item><term>About this Cmdlet</term><description>
    /// Part of the gShell Project, relating to the Google Calendar API; see Related Links or use the -Online parameter.
    /// </description></item></list>
    /// <example>
    ///   <code>PS C:\> Get-GCalendarList -CalendarId $SomeCalendarIdString</code>
    ///   <para>This automatically generated example serves to show the bare minimum required to call this Cmdlet.</para>
    ///   <para>Additional examples may be added, viewed and edited by users on the community wiki at the URL found in the related links.</para>
    /// </example>
    /// <example>
    ///   <code>PS C:\> Get-GCalendarList -All</code>
    ///   <para>This automatically generated example serves to show the bare minimum required to call this Cmdlet.</para>
    ///   <para>Additional examples may be added, viewed and edited by users on the community wiki at the URL found in the related links.</para>
    /// </example>
    /// <para type="link" uri="https://github.com/squid808/gShell/wiki/Get-GCalendarList">[Wiki page for this Cmdlet]</para>
    /// <para type="link" uri="https://github.com/squid808/gShell/wiki/Getting-Started">[Getting started with gShell]</para>
    /// </summary>
    [Cmdlet(VerbsCommon.Get, "GCalendarList",
        SupportsShouldProcess = true,
        DefaultParameterSetName = "one",
        HelpUri = @"https://github.com/squid808/gShell/wiki/Get-GCalendarList")]
    public class GetGCalendarListCommand : CalendarBase
    {
        #region Properties

        /// <summary>
        /// <para type="description">Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.</para>
        /// </summary>
        [Parameter(Position = 0,
            ParameterSetName = "one",
            Mandatory = true,
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the \"primary\" keyword."
            )]
        public string CalendarId { get; set; }

        /// <summary>
        /// <para type="description">A switch to list all results</para>
        /// </summary>
        [Parameter(Position = 0,
        Mandatory = true,
        ParameterSetName = "list",
        HelpMessage = "A switch to list all results.")]
        public SwitchParameter All { get; set; }

        /// <summary>
        /// <para type="description">Maximum number of entries returned on one result page. By default the value is 100 entries. The page size can never be larger than 250 entries. Optional.</para>
        /// </summary>
        [Parameter(Position = 1,
            ParameterSetName = "list",
            Mandatory = false,
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "Maximum number of entries returned on one result page. By default the value is 100 entries. The page size can never be larger than 250 entries. Optional."
            )]
        public int? MaxResults { get; set; }

        /// <summary>
        /// <para type="description">The minimum access role for the user in the returned entries. Optional. The default is no restriction.</para>
        /// </summary>
        [Parameter(Position = 2,
            ParameterSetName = "list",
            Mandatory = false,
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "The minimum access role for the user in the returned entries. Optional. The default is no restriction."
            )]
        public CalendarListResource.ListRequest.MinAccessRoleEnum? MinAccessRole { get; set; }

        /// <summary>
        /// <para type="description">Whether to include deleted calendar list entries in the result. Optional. The default is False.</para>
        /// </summary>
        [Parameter(Position = 3,
            ParameterSetName = "list",
            Mandatory = false,
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "Whether to include deleted calendar list entries in the result. Optional. The default is False.")]
        public bool? ShowDeleted { get; set; }

        /// <summary>
        /// <para type="description">Whether to show hidden entries. Optional. The default is False.</para>
        /// </summary>
        [Parameter(Position = 4,
            ParameterSetName = "list",
            Mandatory = false,
            ValueFromPipelineByPropertyName = true,
            HelpMessage = "Whether to show hidden entries. Optional. The default is False.")]
        public bool? ShowHidden { get; set; }

        /// <summary>
        /// <para type="description">Token obtained from the nextSyncToken field returned on the last page of results from the previous list request. It makes the result of this list request contain only entries that have changed since then. If only read-only fields such as calendar properties or ACLs have changed, the entry won't be returned. All entries deleted and hidden since the previous list request will always be in the result set and it is not allowed to set showDeleted neither showHidden to False.To ensure client state consistency minAccessRole query parameter cannot be specified together with nextSyncToken.If the syncToken expires, the server will respond with a 410 GONE response code and the client should clear its storage and perform a full synchronization without any syncToken.Learn more about incremental synchronization.Optional. The default is to return all entries.</para>
        /// </summary>
        [Parameter(Position = 5,
            ParameterSetName = "list",
            Mandatory = false,
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "Token obtained from the nextSyncToken field returned on the last page of results from the previous list request. It makes the result of this list request contain only entries that have changed since then. If only read-only fields such as calendar properties or ACLs have changed, the entry won't be returned. All entries deleted and hidden since the previous list request will always be in the result set and it is not allowed to set showDeleted neither showHidden to False.\nTo ensure client state consistency minAccessRole query parameter cannot be specified together with nextSyncToken.\nIf the syncToken expires, the server will respond with a 410 GONE response code and the client should clear its storage and perform a full synchronization without any syncToken.\nLearn more about incremental synchronization.\nOptional. The default is to return all entries."
            )]
        public string SyncToken { get; set; }

        #endregion

        protected override void ProcessRecord()
        {
            if (ShouldProcess("Calendar CalendarList", "Get-GCalendarList"))
            {
                if (ParameterSetName == "one")
                {
                    WriteObject(calendarList.Get(CalendarId, ServiceAccount: gShellServiceAccount, StandardQueryParams: StandardQueryParams));
                }
                else
                {
                    var properties = new gCalendar.CalendarList.CalendarListListProperties
                    {
                        MinAccessRole = MinAccessRole,
                        ShowDeleted = ShowDeleted,
                        ShowHidden = ShowHidden,
                        SyncToken = SyncToken
                    };

                    if (MaxResults.HasValue) properties.TotalResults = MaxResults.Value;

                    WriteObject(calendarList.List(properties, ServiceAccount: gShellServiceAccount, StandardQueryParams: StandardQueryParams).SelectMany(x => x.Items).ToList());
                }
            }
        }
    }

    /// <summary>
    /// <para type="synopsis">Adds an entry to the user's calendar list.</para>
    /// <para type="description">Adds an entry to the user's calendar list.</para>
    /// <list type="alertSet"><item><term>About this Cmdlet</term><description>
    /// Part of the gShell Project, relating to the Google Calendar API; see Related Links or use the -Online parameter.
    /// </description></item></list>
    /// <example>
    ///   <code>PS C:\> New-GCalendarList -CalendarListEntryBody $SomeCalendarListEntryObj</code>
    ///   <para>This automatically generated example serves to show the bare minimum required to call this Cmdlet.</para>
    ///   <para>Additional examples may be added, viewed and edited by users on the community wiki at the URL found in the related links.</para>
    /// </example>
    /// <para type="link" uri="https://github.com/squid808/gShell/wiki/New-GCalendarList">[Wiki page for this Cmdlet]</para>
    /// <para type="link" uri="https://github.com/squid808/gShell/wiki/Getting-Started">[Getting started with gShell]</para>
    /// </summary>
    [Cmdlet(VerbsCommon.New, "GCalendarList",
        SupportsShouldProcess = true,
        HelpUri = @"https://github.com/squid808/gShell/wiki/New-GCalendarList")]
    public class NewGCalendarListCommand : CalendarBase
    {
        #region Properties


        /// <summary><para type="description">A CalendarListEntryBody object</para></summary>
        [Parameter(Position = 1,
            Mandatory = false,
            HelpMessage = "A CalendarListEntryBody object",
            ValueFromPipeline = true,
            ValueFromPipelineByPropertyName = true)]
        public CalendarListEntry CalendarListEntryBody { get; set; }

        /// <summary>
        /// <para type="description">Whether to use the foregroundColor and backgroundColor fields to write the calendar colors (RGB). If this feature is used, the index-based colorId field will be set to the best matching option automatically. Optional. The default is False.</para>
        /// </summary>
        [Parameter(Position = 1,
            Mandatory = false,
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "Whether to use the foregroundColor and backgroundColor fields to write the calendar colors (RGB). If this feature is used, the index-based colorId field will be set to the best matching option automatically. Optional. The default is False."
            )]
        public bool? ColorRgbFormat { get; set; }

        #endregion

        protected override void ProcessRecord()
        {
            if (ShouldProcess("Calendar CalendarList", "New-GCalendarList"))
            {
                var properties = new gCalendar.CalendarList.CalendarListInsertProperties
                {
                    ColorRgbFormat = ColorRgbFormat
                };


                WriteObject(calendarList.Insert(CalendarListEntryBody, properties, ServiceAccount: gShellServiceAccount, StandardQueryParams: StandardQueryParams));
            }
        }
    }

    /// <summary>
    /// <para type="synopsis">Updates an entry on the user's calendar list. This method supports patch semantics.</para>
    /// <para type="description">Updates an entry on the user's calendar list. This method supports patch semantics.</para>
    /// <list type="alertSet"><item><term>About this Cmdlet</term><description>
    /// Part of the gShell Project, relating to the Google Calendar API; see Related Links or use the -Online parameter.
    /// </description></item></list>
    /// <example>
    ///   <code>PS C:\> Set-GCalendarList -CalendarId $SomeCalendarIdString -CalendarListEntryBody $SomeCalendarListEntryObj</code>
    ///   <para>This automatically generated example serves to show the bare minimum required to call this Cmdlet.</para>
    ///   <para>Additional examples may be added, viewed and edited by users on the community wiki at the URL found in the related links.</para>
    /// </example>
    /// <para type="link" uri="https://github.com/squid808/gShell/wiki/Set-GCalendarList">[Wiki page for this Cmdlet]</para>
    /// <para type="link" uri="https://github.com/squid808/gShell/wiki/Getting-Started">[Getting started with gShell]</para>
    /// </summary>
    [Cmdlet(VerbsCommon.Set, "GCalendarList",
        SupportsShouldProcess = true,
        HelpUri = @"https://github.com/squid808/gShell/wiki/Set-GCalendarList")]
    public class SetGCalendarListCommand : CalendarBase
    {
        #region Properties

        /// <summary>
        /// <para type="description">Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.</para>
        /// </summary>
        [Parameter(Position = 0,
            Mandatory = true,
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the \"primary\" keyword."
            )]
        public string CalendarId { get; set; }



        /// <summary><para type="description">A CalendarListEntryBody object</para></summary>
        [Parameter(Position = 1,
            Mandatory = false,
            HelpMessage = "A CalendarListEntryBody object",
            ValueFromPipeline = true,
            ValueFromPipelineByPropertyName = true)]
        public CalendarListEntry CalendarListEntryBody { get; set; }

        /// <summary>
        /// <para type="description">Whether to use the foregroundColor and backgroundColor fields to write the calendar colors (RGB). If this feature is used, the index-based colorId field will be set to the best matching option automatically. Optional. The default is False.</para>
        /// </summary>
        [Parameter(Position = 2,
            Mandatory = false,
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "Whether to use the foregroundColor and backgroundColor fields to write the calendar colors (RGB). If this feature is used, the index-based colorId field will be set to the best matching option automatically. Optional. The default is False."
            )]
        public bool? ColorRgbFormat { get; set; }

        #endregion

        protected override void ProcessRecord()
        {
            if (ShouldProcess("Calendar CalendarList", "Set-GCalendarList"))
            {
                var properties = new gCalendar.CalendarList.CalendarListPatchProperties
                {
                    ColorRgbFormat = ColorRgbFormat
                };


                WriteObject(calendarList.Patch(CalendarListEntryBody, CalendarId, properties, ServiceAccount: gShellServiceAccount, StandardQueryParams: StandardQueryParams));
            }
        }
    }

    /// <summary>
    /// <para type="synopsis">Watch for changes to CalendarList resources.</para>
    /// <para type="description">Watch for changes to CalendarList resources.</para>
    /// <list type="alertSet"><item><term>About this Cmdlet</term><description>
    /// Part of the gShell Project, relating to the Google Calendar API; see Related Links or use the -Online parameter.
    /// </description></item></list>
    /// <example>
    ///   <code>PS C:\> Watch-GCalendarList -ChannelBody $SomeChannelObj</code>
    ///   <para>This automatically generated example serves to show the bare minimum required to call this Cmdlet.</para>
    ///   <para>Additional examples may be added, viewed and edited by users on the community wiki at the URL found in the related links.</para>
    /// </example>
    /// <para type="link" uri="https://github.com/squid808/gShell/wiki/Watch-GCalendarList">[Wiki page for this Cmdlet]</para>
    /// <para type="link" uri="https://github.com/squid808/gShell/wiki/Getting-Started">[Getting started with gShell]</para>
    /// </summary>
    [Cmdlet(VerbsCommon.Watch, "GCalendarList",
        SupportsShouldProcess = true,
        HelpUri = @"https://github.com/squid808/gShell/wiki/Watch-GCalendarList")]
    public class WatchGCalendarListCommand : CalendarBase
    {
        #region Properties


        /// <summary><para type="description">A ChannelBody object</para></summary>
        [Parameter(Position = 0,
            Mandatory = false,
            HelpMessage = "A ChannelBody object",
            ValueFromPipeline = true,
            ValueFromPipelineByPropertyName = true)]
        public Channel ChannelBody { get; set; }

        /// <summary>
        /// <para type="description">Maximum number of entries returned on one result page. By default the value is 100 entries. The page size can never be larger than 250 entries. Optional.</para>
        /// </summary>
        [Parameter(Position = 1,
            Mandatory = false,
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "Maximum number of entries returned on one result page. By default the value is 100 entries. The page size can never be larger than 250 entries. Optional."
            )]
        public int? MaxResults { get; set; }

        /// <summary>
        /// <para type="description">The minimum access role for the user in the returned entries. Optional. The default is no restriction.</para>
        /// </summary>
        [Parameter(Position = 2,
            Mandatory = false,
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "The minimum access role for the user in the returned entries. Optional. The default is no restriction."
            )]
        public CalendarListResource.WatchRequest.MinAccessRoleEnum? MinAccessRole { get; set; }

        /// <summary>
        /// <para type="description">Whether to include deleted calendar list entries in the result. Optional. The default is False.</para>
        /// </summary>
        [Parameter(Position = 3,
            Mandatory = false,
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "Whether to include deleted calendar list entries in the result. Optional. The default is False.")]
        public bool? ShowDeleted { get; set; }

        /// <summary>
        /// <para type="description">Whether to show hidden entries. Optional. The default is False.</para>
        /// </summary>
        [Parameter(Position = 4,
            Mandatory = false,
            ValueFromPipelineByPropertyName = true,
            HelpMessage = "Whether to show hidden entries. Optional. The default is False.")]
        public bool? ShowHidden { get; set; }

        /// <summary>
        /// <para type="description">Token obtained from the nextSyncToken field returned on the last page of results from the previous list request. It makes the result of this list request contain only entries that have changed since then. If only read-only fields such as calendar properties or ACLs have changed, the entry won't be returned. All entries deleted and hidden since the previous list request will always be in the result set and it is not allowed to set showDeleted neither showHidden to False.To ensure client state consistency minAccessRole query parameter cannot be specified together with nextSyncToken.If the syncToken expires, the server will respond with a 410 GONE response code and the client should clear its storage and perform a full synchronization without any syncToken.Learn more about incremental synchronization.Optional. The default is to return all entries.</para>
        /// </summary>
        [Parameter(Position = 5,
            Mandatory = false,
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "Token obtained from the nextSyncToken field returned on the last page of results from the previous list request. It makes the result of this list request contain only entries that have changed since then. If only read-only fields such as calendar properties or ACLs have changed, the entry won't be returned. All entries deleted and hidden since the previous list request will always be in the result set and it is not allowed to set showDeleted neither showHidden to False.\nTo ensure client state consistency minAccessRole query parameter cannot be specified together with nextSyncToken.\nIf the syncToken expires, the server will respond with a 410 GONE response code and the client should clear its storage and perform a full synchronization without any syncToken.\nLearn more about incremental synchronization.\nOptional. The default is to return all entries."
            )]
        public string SyncToken { get; set; }

        #endregion

        protected override void ProcessRecord()
        {
            if (ShouldProcess("Calendar CalendarList", "Watch-GCalendarList"))
            {
                var properties = new gCalendar.CalendarList.CalendarListWatchProperties
                {
                    MinAccessRole = MinAccessRole,
                    ShowDeleted = ShowDeleted,
                    ShowHidden = ShowHidden,
                    SyncToken = SyncToken
                };


                WriteObject(calendarList.Watch(ChannelBody, properties, ServiceAccount: gShellServiceAccount, StandardQueryParams: StandardQueryParams));
            }
        }
    }
}

namespace gShell.Cmdlets.Calendar.Calendars
{
    /// <summary>
    /// <para type="synopsis">Clears a primary calendar. This operation deletes all events associated with the primary calendar of an account.</para>
    /// <para type="description">Clears a primary calendar. This operation deletes all events associated with the primary calendar of an account.</para>
    /// <list type="alertSet"><item><term>About this Cmdlet</term><description>
    /// Part of the gShell Project, relating to the Google Calendar API; see Related Links or use the -Online parameter.
    /// </description></item></list>
    /// <example>
    ///   <code>PS C:\> Clear-GCalendar -CalendarId $SomeCalendarIdString</code>
    ///   <para>This automatically generated example serves to show the bare minimum required to call this Cmdlet.</para>
    ///   <para>Additional examples may be added, viewed and edited by users on the community wiki at the URL found in the related links.</para>
    /// </example>
    /// <para type="link" uri="https://github.com/squid808/gShell/wiki/Clear-GCalendar">[Wiki page for this Cmdlet]</para>
    /// <para type="link" uri="https://github.com/squid808/gShell/wiki/Getting-Started">[Getting started with gShell]</para>
    /// </summary>
    [Cmdlet(VerbsCommon.Clear, "GCalendar",
        SupportsShouldProcess = true,
        HelpUri = @"https://github.com/squid808/gShell/wiki/Clear-GCalendar")]
    public class ClearGCalendarCommand : CalendarBase
    {
        #region Properties

        /// <summary>
        /// <para type="description">Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.</para>
        /// </summary>
        [Parameter(Position = 0,
            Mandatory = true,
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the \"primary\" keyword."
            )]
        public string CalendarId { get; set; }

        #endregion

        protected override void ProcessRecord()
        {
            if (ShouldProcess("Calendar Calendars", "Clear-GCalendar"))
            {
                calendars.Clear(CalendarId, ServiceAccount: gShellServiceAccount, StandardQueryParams: StandardQueryParams);
            }
        }
    }

    /// <summary>
    /// <para type="synopsis">Deletes a secondary calendar. Use calendars.clear for clearing all events on primary calendars.</para>
    /// <para type="description">Deletes a secondary calendar. Use calendars.clear for clearing all events on primary calendars.</para>
    /// <list type="alertSet"><item><term>About this Cmdlet</term><description>
    /// Part of the gShell Project, relating to the Google Calendar API; see Related Links or use the -Online parameter.
    /// </description></item></list>
    /// <example>
    ///   <code>PS C:\> Remove-GCalendar -CalendarId $SomeCalendarIdString</code>
    ///   <para>This automatically generated example serves to show the bare minimum required to call this Cmdlet.</para>
    ///   <para>Additional examples may be added, viewed and edited by users on the community wiki at the URL found in the related links.</para>
    /// </example>
    /// <para type="link" uri="https://github.com/squid808/gShell/wiki/Remove-GCalendar">[Wiki page for this Cmdlet]</para>
    /// <para type="link" uri="https://github.com/squid808/gShell/wiki/Getting-Started">[Getting started with gShell]</para>
    /// </summary>
    [Cmdlet(VerbsCommon.Remove, "GCalendar",
        SupportsShouldProcess = true,
        HelpUri = @"https://github.com/squid808/gShell/wiki/Remove-GCalendar")]
    public class RemoveGCalendarCommand : CalendarBase
    {
        #region Properties

        /// <summary>
        /// <para type="description">Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.</para>
        /// </summary>
        [Parameter(Position = 0,
            Mandatory = true,
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the \"primary\" keyword."
            )]
        public string CalendarId { get; set; }

        /// <summary>
        /// <para type="description">A switch to run the cmdlet without prompting</para>
        /// </summary>
        [Parameter(Position = 1,
        Mandatory = false,
        HelpMessage = "A switch to run the cmdlet without prompting")]
        public SwitchParameter Force { get; set; }

        #endregion

        protected override void ProcessRecord()
        {
            string toRemoveTarget = "Calendar";

			if (ShouldProcess(toRemoveTarget))
			{	
				if (Force || ShouldContinue(toRemoveTarget + "will be removed.\nContinue?", "Confirm Removal"))
				{
					try
					{
						WriteDebug("Attempting to remove " + toRemoveTarget + "...");

                        calendars.Delete(CalendarId, ServiceAccount: gShellServiceAccount, StandardQueryParams: StandardQueryParams);
							
						WriteVerbose("Removal of " + toRemoveTarget + " completed without error.");
					}
					catch (Exception e)
					{
						WriteError(new ErrorRecord(e, e.GetBaseException().ToString(), ErrorCategory.InvalidData, toRemoveTarget));
					}
				}
				else
				{
					WriteError(new ErrorRecord(new Exception("Deletion not confirmed"),
						"", ErrorCategory.InvalidData, toRemoveTarget));
				}
			}
        }
    }

    /// <summary>
    /// <para type="synopsis">Returns metadata for a calendar.</para>
    /// <para type="description">Returns metadata for a calendar.</para>
    /// <list type="alertSet"><item><term>About this Cmdlet</term><description>
    /// Part of the gShell Project, relating to the Google Calendar API; see Related Links or use the -Online parameter.
    /// </description></item></list>
    /// <example>
    ///   <code>PS C:\> Get-GCalendar -CalendarId $SomeCalendarIdString</code>
    ///   <para>This automatically generated example serves to show the bare minimum required to call this Cmdlet.</para>
    ///   <para>Additional examples may be added, viewed and edited by users on the community wiki at the URL found in the related links.</para>
    /// </example>
    /// <para type="link" uri="https://github.com/squid808/gShell/wiki/Get-GCalendar">[Wiki page for this Cmdlet]</para>
    /// <para type="link" uri="https://github.com/squid808/gShell/wiki/Getting-Started">[Getting started with gShell]</para>
    /// </summary>
    [Cmdlet(VerbsCommon.Get, "GCalendar",
        SupportsShouldProcess = true,
        HelpUri = @"https://github.com/squid808/gShell/wiki/Get-GCalendar")]
    public class GetGCalendarCommand : CalendarBase
    {
        #region Properties

        /// <summary>
        /// <para type="description">Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.</para>
        /// </summary>
        [Parameter(Position = 0,
            Mandatory = true,
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the \"primary\" keyword."
            )]
        public string CalendarId { get; set; }

        #endregion

        protected override void ProcessRecord()
        {
            if (ShouldProcess("Calendar Calendars", "Get-GCalendar"))
            {
                WriteObject(calendars.Get(CalendarId, ServiceAccount: gShellServiceAccount, StandardQueryParams: StandardQueryParams));
            }
        }
    }

    /// <summary>
    /// <para type="synopsis">Creates a secondary calendar.</para>
    /// <para type="description">Creates a secondary calendar.</para>
    /// <list type="alertSet"><item><term>About this Cmdlet</term><description>
    /// Part of the gShell Project, relating to the Google Calendar API; see Related Links or use the -Online parameter.
    /// </description></item></list>
    /// <example>
    ///   <code>PS C:\> New-GCalendar -CalendarBody $SomeCalendarObj</code>
    ///   <para>This automatically generated example serves to show the bare minimum required to call this Cmdlet.</para>
    ///   <para>Additional examples may be added, viewed and edited by users on the community wiki at the URL found in the related links.</para>
    /// </example>
    /// <para type="link" uri="https://github.com/squid808/gShell/wiki/New-GCalendar">[Wiki page for this Cmdlet]</para>
    /// <para type="link" uri="https://github.com/squid808/gShell/wiki/Getting-Started">[Getting started with gShell]</para>
    /// </summary>
    [Cmdlet(VerbsCommon.New, "GCalendar",
        SupportsShouldProcess = true,
        HelpUri = @"https://github.com/squid808/gShell/wiki/New-GCalendar")]
    public class NewGCalendarCommand : CalendarBase
    {
        #region Properties


        /// <summary><para type="description">A CalendarBody object</para></summary>
        [Parameter(Position = 1,
            Mandatory = false,
            HelpMessage = "A CalendarBody object",
            ValueFromPipeline = true,
            ValueFromPipelineByPropertyName = true)]
        public Google.Apis.Calendar.v3.Data.Calendar CalendarBody { get; set; }

        #endregion

        protected override void ProcessRecord()
        {
            if (ShouldProcess("Calendar Calendars", "New-GCalendar"))
            {
                WriteObject(calendars.Insert(CalendarBody, ServiceAccount: gShellServiceAccount, StandardQueryParams: StandardQueryParams));
            }
        }
    }

    /// <summary>
    /// <para type="synopsis">Updates metadata for a calendar. This method supports patch semantics.</para>
    /// <para type="description">Updates metadata for a calendar. This method supports patch semantics.</para>
    /// <list type="alertSet"><item><term>About this Cmdlet</term><description>
    /// Part of the gShell Project, relating to the Google Calendar API; see Related Links or use the -Online parameter.
    /// </description></item></list>
    /// <example>
    ///   <code>PS C:\> Set-GCalendar -CalendarId $SomeCalendarIdString -CalendarBody $SomeCalendarObj</code>
    ///   <para>This automatically generated example serves to show the bare minimum required to call this Cmdlet.</para>
    ///   <para>Additional examples may be added, viewed and edited by users on the community wiki at the URL found in the related links.</para>
    /// </example>
    /// <para type="link" uri="https://github.com/squid808/gShell/wiki/Set-GCalendar">[Wiki page for this Cmdlet]</para>
    /// <para type="link" uri="https://github.com/squid808/gShell/wiki/Getting-Started">[Getting started with gShell]</para>
    /// </summary>
    [Cmdlet(VerbsCommon.Set, "GCalendar",
        SupportsShouldProcess = true,
        HelpUri = @"https://github.com/squid808/gShell/wiki/Set-GCalendar")]
    public class SetGCalendarCommand : CalendarBase
    {
        #region Properties

        /// <summary>
        /// <para type="description">Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.</para>
        /// </summary>
        [Parameter(Position = 0,
            Mandatory = true,
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the \"primary\" keyword."
            )]
        public string CalendarId { get; set; }



        /// <summary><para type="description">A CalendarBody object</para></summary>
        [Parameter(Position = 1,
            Mandatory = false,
            HelpMessage = "A CalendarBody object",
            ValueFromPipeline = true,
            ValueFromPipelineByPropertyName = true)]
        public Google.Apis.Calendar.v3.Data.Calendar CalendarBody { get; set; }

        #endregion

        protected override void ProcessRecord()
        {
            if (ShouldProcess("Calendar Calendars", "Set-GCalendar"))
            {
                WriteObject(calendars.Patch(CalendarBody, CalendarId, ServiceAccount: gShellServiceAccount, StandardQueryParams: StandardQueryParams));
            }
        }
    }

}

namespace gShell.Cmdlets.Calendar.Channels
{
    /// <summary>
    /// <para type="synopsis">Stop watching resources through this channel</para>
    /// <para type="description">Stop watching resources through this channel</para>
    /// <list type="alertSet"><item><term>About this Cmdlet</term><description>
    /// Part of the gShell Project, relating to the Google Calendar API; see Related Links or use the -Online parameter.
    /// </description></item></list>
    /// <example>
    ///   <code>PS C:\> Stop-GCalendarChannel -ChannelBody $SomeChannelObj</code>
    ///   <para>This automatically generated example serves to show the bare minimum required to call this Cmdlet.</para>
    ///   <para>Additional examples may be added, viewed and edited by users on the community wiki at the URL found in the related links.</para>
    /// </example>
    /// <para type="link" uri="https://github.com/squid808/gShell/wiki/Stop-GCalendarChannel">[Wiki page for this Cmdlet]</para>
    /// <para type="link" uri="https://github.com/squid808/gShell/wiki/Getting-Started">[Getting started with gShell]</para>
    /// </summary>
    [Cmdlet(VerbsLifecycle.Stop, "GCalendarChannel",
        SupportsShouldProcess = true,
        HelpUri = @"https://github.com/squid808/gShell/wiki/Stop-GCalendarChannel")]
    public class StopGCalendarChannelCommand : CalendarBase
    {
        #region Properties


        /// <summary><para type="description">A ChannelBody object</para></summary>
        [Parameter(Position = 0,
            Mandatory = false,
            HelpMessage = "A ChannelBody object",
            ValueFromPipeline = true,
            ValueFromPipelineByPropertyName = true)]
        public Channel ChannelBody { get; set; }

        #endregion

        protected override void ProcessRecord()
        {
            if (ShouldProcess("Calendar Channels", "Stop-GCalendarChannel"))
            {
                channels.Stop(ChannelBody, ServiceAccount: gShellServiceAccount, StandardQueryParams: StandardQueryParams);
            }
        }
    }
}

namespace gShell.Cmdlets.Calendar.Colors
{
    /// <summary>
    /// <para type="synopsis">Returns the color definitions for calendars and events.</para>
    /// <para type="description">Returns the color definitions for calendars and events.</para>
    /// <list type="alertSet"><item><term>About this Cmdlet</term><description>
    /// Part of the gShell Project, relating to the Google Calendar API; see Related Links or use the -Online parameter.
    /// </description></item></list>
    /// <example>
    ///   <code>PS C:\> Get-GCalendarColor</code>
    ///   <para>This automatically generated example serves to show the bare minimum required to call this Cmdlet.</para>
    ///   <para>Additional examples may be added, viewed and edited by users on the community wiki at the URL found in the related links.</para>
    /// </example>
    /// <para type="link" uri="https://github.com/squid808/gShell/wiki/Get-GCalendarColor">[Wiki page for this Cmdlet]</para>
    /// <para type="link" uri="https://github.com/squid808/gShell/wiki/Getting-Started">[Getting started with gShell]</para>
    /// </summary>
    [Cmdlet(VerbsCommon.Get, "GCalendarColor",
        SupportsShouldProcess = true,
        HelpUri = @"https://github.com/squid808/gShell/wiki/Get-GCalendarColor")]
    public class GetGCalendarColorCommand : CalendarBase
    {
        #region Properties

        #endregion

        protected override void ProcessRecord()
        {
            if (ShouldProcess("Calendar Colors", "Get-GCalendarColor"))
            {
                WriteObject(colors.Get(ServiceAccount: gShellServiceAccount, StandardQueryParams: StandardQueryParams));
            }
        }
    }
}

namespace gShell.Cmdlets.Calendar.Events
{
    /// <summary>
    /// <para type="synopsis">Deletes an event.</para>
    /// <para type="description">Deletes an event.</para>
    /// <list type="alertSet"><item><term>About this Cmdlet</term><description>
    /// Part of the gShell Project, relating to the Google Calendar API; see Related Links or use the -Online parameter.
    /// </description></item></list>
    /// <example>
    ///   <code>PS C:\> Remove-GCalendarEvent -CalendarId $SomeCalendarIdString -EventId $SomeEventIdString</code>
    ///   <para>This automatically generated example serves to show the bare minimum required to call this Cmdlet.</para>
    ///   <para>Additional examples may be added, viewed and edited by users on the community wiki at the URL found in the related links.</para>
    /// </example>
    /// <para type="link" uri="https://github.com/squid808/gShell/wiki/Remove-GCalendarEvent">[Wiki page for this Cmdlet]</para>
    /// <para type="link" uri="https://github.com/squid808/gShell/wiki/Getting-Started">[Getting started with gShell]</para>
    /// </summary>
    [Cmdlet(VerbsCommon.Remove, "GCalendarEvent",
        SupportsShouldProcess = true,
        HelpUri = @"https://github.com/squid808/gShell/wiki/Remove-GCalendarEvent")]
    public class RemoveGCalendarEventCommand : CalendarBase
    {
        #region Properties

        /// <summary>
        /// <para type="description">Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.</para>
        /// </summary>
        [Parameter(Position = 0,
            Mandatory = true,
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the \"primary\" keyword."
            )]
        public string CalendarId { get; set; }

        /// <summary>
        /// <para type="description">Event identifier.</para>
        /// </summary>
        [Parameter(Position = 1,
            Mandatory = true,
            ValueFromPipelineByPropertyName = true,
            HelpMessage = "Event identifier.")]
        public string EventId { get; set; }

        /// <summary>
        /// <para type="description">Whether to send notifications about the deletion of the event. Optional. The default is False.</para>
        /// </summary>
        [Parameter(Position = 2,
            Mandatory = false,
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "Whether to send notifications about the deletion of the event. Optional. The default is False.")]
        public bool? SendNotifications { get; set; }

        /// <summary>
        /// <para type="description">A switch to run the cmdlet without prompting</para>
        /// </summary>
        [Parameter(Position = 2,
        Mandatory = false,
        HelpMessage = "A switch to run the cmdlet without prompting")]
        public SwitchParameter Force { get; set; }

        #endregion

        protected override void ProcessRecord()
        {
            string toRemoveTarget = "Calendar Event";

			if (ShouldProcess(toRemoveTarget))
			{	
				if (Force || ShouldContinue(toRemoveTarget + "will be removed.\nContinue?", "Confirm Removal"))
				{
					try
					{
						WriteDebug("Attempting to remove " + toRemoveTarget + "...");

                        var properties = new gCalendar.Events.EventsDeleteProperties
                        {
                            SendNotifications = SendNotifications
                        };

                        events.Delete(CalendarId, EventId, properties, ServiceAccount: gShellServiceAccount, StandardQueryParams: StandardQueryParams);
							
						WriteVerbose("Removal of " + toRemoveTarget + " completed without error.");
					}
					catch (Exception e)
					{
						WriteError(new ErrorRecord(e, e.GetBaseException().ToString(), ErrorCategory.InvalidData, toRemoveTarget));
					}
				}
				else
				{
					WriteError(new ErrorRecord(new Exception("Deletion not confirmed"),
						"", ErrorCategory.InvalidData, toRemoveTarget));
				}
			}
        }
    }

    /// <summary>
    /// <para type="synopsis">Returns an event.</para>
    /// <para type="description">Returns an event.</para>
    /// <list type="alertSet"><item><term>About this Cmdlet</term><description>
    /// Part of the gShell Project, relating to the Google Calendar API; see Related Links or use the -Online parameter.
    /// </description></item></list>
    /// <example>
    ///   <code>PS C:\> Get-GCalendarEvent -CalendarId $SomeCalendarIdString -EventId $SomeEventIdString</code>
    ///   <para>This automatically generated example serves to show the bare minimum required to call this Cmdlet.</para>
    ///   <para>Additional examples may be added, viewed and edited by users on the community wiki at the URL found in the related links.</para>
    /// </example>
    /// <example>
    ///   <code>PS C:\> Get-GCalendarEvent -CalendarId $SomeCalendarIdString -All</code>
    ///   <para>This automatically generated example serves to show the bare minimum required to call this Cmdlet.</para>
    ///   <para>Additional examples may be added, viewed and edited by users on the community wiki at the URL found in the related links.</para>
    /// </example>
    /// <para type="link" uri="https://github.com/squid808/gShell/wiki/Get-GCalendarEvent">[Wiki page for this Cmdlet]</para>
    /// <para type="link" uri="https://github.com/squid808/gShell/wiki/Getting-Started">[Getting started with gShell]</para>
    /// </summary>
    [Cmdlet(VerbsCommon.Get, "GCalendarEvent",
        SupportsShouldProcess = true,
        DefaultParameterSetName = "one",
        HelpUri = @"https://github.com/squid808/gShell/wiki/Get-GCalendarEvent")]
    public class GetGCalendarEventCommand : CalendarBase
    {
        #region Properties

        /// <summary>
        /// <para type="description">Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.</para>
        /// </summary>
        [Parameter(Position = 0,
            Mandatory = true,
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the \"primary\" keyword."
            )]
        public string CalendarId { get; set; }

        /// <summary>
        /// <para type="description">Event identifier.</para>
        /// </summary>
        [Parameter(Position = 1,
            Mandatory = true,
            ParameterSetName = "one",
            ValueFromPipelineByPropertyName = true,
            HelpMessage = "Event identifier.")]
        public string EventId { get; set; }

        /// <summary>
        /// <para type="description">Whether to always include a value in the email field for the organizer, creator and attendees, even if no real email is available (i.e. a generated, non-working value will be provided). The use of this option is discouraged and should only be used by clients which cannot handle the absence of an email address value in the mentioned places. Optional. The default is False.</para>
        /// </summary>
        [Parameter(Position = 2,
            Mandatory = false,
            ParameterSetName = "one",
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "Whether to always include a value in the email field for the organizer, creator and attendees, even if no real email is available (i.e. a generated, non-working value will be provided). The use of this option is discouraged and should only be used by clients which cannot handle the absence of an email address value in the mentioned places. Optional. The default is False."
            )]
        [Parameter(Position = 1,
            Mandatory = false,
            ParameterSetName = "list",
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "Whether to always include a value in the email field for the organizer, creator and attendees, even if no real email is available (i.e. a generated, non-working value will be provided). The use of this option is discouraged and should only be used by clients which cannot handle the absence of an email address value in the mentioned places. Optional. The default is False."
            )]
        public bool? AlwaysIncludeEmail { get; set; }

        /// <summary>
        /// <para type="description">The maximum number of attendees to include in the response. If there are more than the specified number of attendees, only the participant is returned. Optional.</para>
        /// </summary>
        [Parameter(Position = 3,
            Mandatory = false,
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "The maximum number of attendees to include in the response. If there are more than the specified number of attendees, only the participant is returned. Optional."
            )]
        public int? MaxAttendees { get; set; }

        /// <summary>
        /// <para type="description">Time zone used in the response. Optional. The default is the time zone of the calendar.</para>
        /// </summary>
        [Parameter(Position = 4,
            Mandatory = false,
            ParameterSetName = "one",
            ValueFromPipelineByPropertyName = true,
            HelpMessage = "Time zone used in the response. Optional. The default is the time zone of the calendar.")]
        [Parameter(Position = 15,
            Mandatory = false,
            ParameterSetName = "list",
            ValueFromPipelineByPropertyName = true,
            HelpMessage = "Time zone used in the response. Optional. The default is the time zone of the calendar.")]
        public string TimeZone { get; set; }

        /// <summary>
        /// <para type="description">Specifies event ID in the iCalendar format to be included in the response. Optional.</para>
        /// </summary>
        [Parameter(Position = 2,
            Mandatory = false,
            ParameterSetName = "list",
            ValueFromPipelineByPropertyName = true,
            HelpMessage = "Specifies event ID in the iCalendar format to be included in the response. Optional.")]
        public string ICalUID { get; set; }

        /// <summary>
        /// <para type="description">Maximum number of events returned on one result page. By default the value is 250 events. The page size can never be larger than 2500 events. Optional.</para>
        /// </summary>
        [Parameter(Position = 4,
            Mandatory = false,
            ParameterSetName = "list",
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "Maximum number of events returned on one result page. By default the value is 250 events. The page size can never be larger than 2500 events. Optional."
            )]
        public int? MaxResults { get; set; }

        /// <summary>
        /// <para type="description">The order of the events returned in the result. Optional. The default is an unspecified, stable order.</para>
        /// </summary>
        [Parameter(Position = 5,
            Mandatory = false,
            ParameterSetName = "list",
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "The order of the events returned in the result. Optional. The default is an unspecified, stable order."
            )]
        public EventsResource.ListRequest.OrderByEnum? OrderBy { get; set; }

        /// <summary>
        /// <para type="description">Extended properties constraint specified as propertyName=value. Matches only private properties. This parameter might be repeated multiple times to return events that match all given constraints.</para>
        /// </summary>
        [Parameter(Position = 6,
            Mandatory = false,
            ParameterSetName = "list",
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "Extended properties constraint specified as propertyName=value. Matches only private properties. This parameter might be repeated multiple times to return events that match all given constraints."
            )]
        public string[] PrivateExtendedProperty { get; set; }

        /// <summary>
        /// <para type="description">Free text search terms to find events that match these terms in any field, except for extended properties. Optional.</para>
        /// </summary>
        [Parameter(Position = 7,
            Mandatory = false,
            ParameterSetName = "list",
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "Free text search terms to find events that match these terms in any field, except for extended properties. Optional."
            )]
        public string Q { get; set; }

        /// <summary>
        /// <para type="description">Extended properties constraint specified as propertyName=value. Matches only shared properties. This parameter might be repeated multiple times to return events that match all given constraints.</para>
        /// </summary>
        [Parameter(Position = 8,
            Mandatory = false,
            ParameterSetName = "list",
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "Extended properties constraint specified as propertyName=value. Matches only shared properties. This parameter might be repeated multiple times to return events that match all given constraints."
            )]
        public string[] SharedExtendedProperty { get; set; }

        /// <summary>
        /// <para type="description">Whether to include deleted events (with status equals "cancelled") in the result. Cancelled instances of recurring events (but not the underlying recurring event) will still be included if showDeleted and singleEvents are both False. If showDeleted and singleEvents are both True, only single instances of deleted events (but not the underlying recurring events) are returned. Optional. The default is False.</para>
        /// </summary>
        [Parameter(Position = 9,
            Mandatory = false,
            ParameterSetName = "list",
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "Whether to include deleted events (with status equals \"cancelled\") in the result. Cancelled instances of recurring events (but not the underlying recurring event) will still be included if showDeleted and singleEvents are both False. If showDeleted and singleEvents are both True, only single instances of deleted events (but not the underlying recurring events) are returned. Optional. The default is False."
            )]
        public bool? ShowDeleted { get; set; }

        /// <summary>
        /// <para type="description">Whether to include hidden invitations in the result. Optional. The default is False.</para>
        /// </summary>
        [Parameter(Position = 10,
            Mandatory = false,
            ParameterSetName = "list",
            ValueFromPipelineByPropertyName = true,
            HelpMessage = "Whether to include hidden invitations in the result. Optional. The default is False.")]
        public bool? ShowHiddenInvitations { get; set; }

        /// <summary>
        /// <para type="description">Whether to expand recurring events into instances and only return single one-off events and instances of recurring events, but not the underlying recurring events themselves. Optional. The default is False.</para>
        /// </summary>
        [Parameter(Position = 11,
            Mandatory = false,
            ParameterSetName = "list",
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "Whether to expand recurring events into instances and only return single one-off events and instances of recurring events, but not the underlying recurring events themselves. Optional. The default is False."
            )]
        public bool? SingleEvents { get; set; }

        /// <summary>
        /// <para type="description">Token obtained from the nextSyncToken field returned on the last page of results from the previous list request. It makes the result of this list request contain only entries that have changed since then. All events deleted since the previous list request will always be in the result set and it is not allowed to set showDeleted to False.There are several query parameters that cannot be specified together with nextSyncToken to ensure consistency of the client state.These are:- iCalUID- orderBy- privateExtendedProperty- q- sharedExtendedProperty- timeMin- timeMax- updatedMin If the syncToken expires, the server will respond with a 410 GONE response code and the client should clear its storage and perform a full synchronization without any syncToken.Learn more about incremental synchronization.Optional. The default is to return all entries.</para>
        /// </summary>
        [Parameter(Position = 12,
            Mandatory = false,
            ParameterSetName = "list",
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "Token obtained from the nextSyncToken field returned on the last page of results from the previous list request. It makes the result of this list request contain only entries that have changed since then. All events deleted since the previous list request will always be in the result set and it is not allowed to set showDeleted to False.\nThere are several query parameters that cannot be specified together with nextSyncToken to ensure consistency of the client state.\n\nThese are: \n- iCalUID \n- orderBy \n- privateExtendedProperty \n- q \n- sharedExtendedProperty \n- timeMin \n- timeMax \n- updatedMin If the syncToken expires, the server will respond with a 410 GONE response code and the client should clear its storage and perform a full synchronization without any syncToken.\nLearn more about incremental synchronization.\nOptional. The default is to return all entries."
            )]
        public string SyncToken { get; set; }

        /// <summary>
        /// <para type="description">Upper bound (exclusive) for an event's start time to filter by. Optional. The default is not to filter by start time. Must be an RFC3339 timestamp with mandatory time zone offset, e.g., 2011-06-03T10:00:00-07:00, 2011-06-03T10:00:00Z. Milliseconds may be provided but will be ignored.</para>
        /// </summary>
        [Parameter(Position = 13,
            Mandatory = false,
            ParameterSetName = "list",
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "Upper bound (exclusive) for an event's start time to filter by. Optional. The default is not to filter by start time. Must be an RFC3339 timestamp with mandatory time zone offset, e.g., 2011-06-03T10:00:00-07:00, 2011-06-03T10:00:00Z. Milliseconds may be provided but will be ignored."
            )]
        public DateTime? TimeMax { get; set; }

        /// <summary>
        /// <para type="description">Lower bound (inclusive) for an event's end time to filter by. Optional. The default is not to filter by end time. Must be an RFC3339 timestamp with mandatory time zone offset, e.g., 2011-06-03T10:00:00-07:00, 2011-06-03T10:00:00Z. Milliseconds may be provided but will be ignored.</para>
        /// </summary>
        [Parameter(Position = 14,
            Mandatory = false,
            ParameterSetName = "list",
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "Lower bound (inclusive) for an event's end time to filter by. Optional. The default is not to filter by end time. Must be an RFC3339 timestamp with mandatory time zone offset, e.g., 2011-06-03T10:00:00-07:00, 2011-06-03T10:00:00Z. Milliseconds may be provided but will be ignored."
            )]
        public DateTime? TimeMin { get; set; }

        /// <summary>
        /// <para type="description">Lower bound for an event's last modification time (as a RFC3339 timestamp) to filter by. When specified, entries deleted since this time will always be included regardless of showDeleted. Optional. The default is not to filter by last modification time.</para>
        /// </summary>
        [Parameter(Position = 16,
            Mandatory = false,
            ParameterSetName = "list",
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "Lower bound for an event's last modification time (as a RFC3339 timestamp) to filter by. When specified, entries deleted since this time will always be included regardless of showDeleted. Optional. The default is not to filter by last modification time."
            )]
        public DateTime? UpdatedMin { get; set; }

        /// <summary>
        /// <para type="description">A switch to list all results</para>
        /// </summary>
        [Parameter(Position = 17,
        ParameterSetName = "list",
        Mandatory = false,
        HelpMessage = "A switch to list all results.")]
        public SwitchParameter All { get; set; }

        #endregion

        protected override void ProcessRecord()
        {
            if (ShouldProcess("Calendar Events", "Get-GCalendarEvent"))
            {
                if (ParameterSetName == "one")
                {
                    var properties = new gCalendar.Events.EventsGetProperties
                    {
                        AlwaysIncludeEmail = AlwaysIncludeEmail,
                        MaxAttendees = MaxAttendees,
                        TimeZone = TimeZone
                    };

                    WriteObject(events.Get(CalendarId, EventId, properties, ServiceAccount: gShellServiceAccount, StandardQueryParams: StandardQueryParams));

                }
                else
                {
                    var properties = new gCalendar.Events.EventsListProperties
                    {
                        AlwaysIncludeEmail = AlwaysIncludeEmail,
                        ICalUID = ICalUID,
                        MaxAttendees = MaxAttendees,
                        OrderBy = OrderBy,
                        Q = Q,
                        ShowDeleted = ShowDeleted,
                        ShowHiddenInvitations = ShowHiddenInvitations,
                        SingleEvents = SingleEvents,
                        SyncToken = SyncToken,
                        TimeMax = TimeMax,
                        TimeMin = TimeMin,
                        TimeZone = TimeZone,
                        UpdatedMin = UpdatedMin
                    };

                    if (this.PrivateExtendedProperty != null) properties.PrivateExtendedProperty = this.PrivateExtendedProperty;
                    if (this.SharedExtendedProperty != null) properties.SharedExtendedProperty = this.SharedExtendedProperty;

                    if (MaxResults.HasValue) properties.TotalResults = MaxResults.Value;

                    var results = events.List(CalendarId, properties, ServiceAccount: gShellServiceAccount, StandardQueryParams: StandardQueryParams).SelectMany(x => x.Items).ToList();

                    WriteObject(results);
                }
            }
        }
    }

    /// <summary>
    /// <para type="synopsis">Imports an event. This operation is used to add a private copy of an existing event to a calendar.</para>
    /// <para type="description">Imports an event. This operation is used to add a private copy of an existing event to a calendar.</para>
    /// <list type="alertSet"><item><term>About this Cmdlet</term><description>
    /// Part of the gShell Project, relating to the Google Calendar API; see Related Links or use the -Online parameter.
    /// </description></item></list>
    /// <example>
    ///   <code>PS C:\> Import-GCalendarEvent -CalendarId $SomeCalendarIdString -EventBody $SomeEventObj</code>
    ///   <para>This automatically generated example serves to show the bare minimum required to call this Cmdlet.</para>
    ///   <para>Additional examples may be added, viewed and edited by users on the community wiki at the URL found in the related links.</para>
    /// </example>
    /// <para type="link" uri="https://github.com/squid808/gShell/wiki/Import-GCalendarEvent">[Wiki page for this Cmdlet]</para>
    /// <para type="link" uri="https://github.com/squid808/gShell/wiki/Getting-Started">[Getting started with gShell]</para>
    /// </summary>
    [Cmdlet(VerbsData.Import, "GCalendarEvent",
        SupportsShouldProcess = true,
        HelpUri = @"https://github.com/squid808/gShell/wiki/Import-GCalendarEvent")]
    public class ImportGCalendarEventCommand : CalendarBase
    {
        #region Properties

        /// <summary>
        /// <para type="description">Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.</para>
        /// </summary>
        [Parameter(Position = 0,
            Mandatory = true,
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the \"primary\" keyword."
            )]
        public string CalendarId { get; set; }



        /// <summary><para type="description">A EventBody object</para></summary>
        [Parameter(Position = 2,
            Mandatory = false,
            HelpMessage = "A EventBody object",
            ValueFromPipeline = true,
            ValueFromPipelineByPropertyName = true)]
        public Event EventBody { get; set; }

        /// <summary>
        /// <para type="description">Whether API client performing operation supports event attachments. Optional. The default is False.</para>
        /// </summary>
        [Parameter(Position = 2,
            Mandatory = false,
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "Whether API client performing operation supports event attachments. Optional. The default is False.")]
        public bool? SupportsAttachments { get; set; }

        #endregion

        protected override void ProcessRecord()
        {
            if (ShouldProcess("Calendar Events", "Import-GCalendarEvent"))
            {
                var properties = new gCalendar.Events.EventsImportProperties
                {
                    SupportsAttachments = SupportsAttachments
                };


                WriteObject(events.Import(EventBody, CalendarId, properties, ServiceAccount: gShellServiceAccount, StandardQueryParams: StandardQueryParams));
            }
        }
    }

    /// <summary>
    /// <para type="synopsis">Creates an event.</para>
    /// <para type="description">Creates an event.</para>
    /// <list type="alertSet"><item><term>About this Cmdlet</term><description>
    /// Part of the gShell Project, relating to the Google Calendar API; see Related Links or use the -Online parameter.
    /// </description></item></list>
    /// <example>
    ///   <code>PS C:\> New-GCalendarEvent -CalendarId $SomeCalendarIdString -EventBody $SomeEventObj</code>
    ///   <para>This automatically generated example serves to show the bare minimum required to call this Cmdlet.</para>
    ///   <para>Additional examples may be added, viewed and edited by users on the community wiki at the URL found in the related links.</para>
    /// </example>
    /// <para type="link" uri="https://github.com/squid808/gShell/wiki/New-GCalendarEvent">[Wiki page for this Cmdlet]</para>
    /// <para type="link" uri="https://github.com/squid808/gShell/wiki/Getting-Started">[Getting started with gShell]</para>
    /// </summary>
    [Cmdlet(VerbsCommon.New, "GCalendarEvent",
        SupportsShouldProcess = true,
        HelpUri = @"https://github.com/squid808/gShell/wiki/New-GCalendarEvent")]
    public class NewGCalendarEventCommand : CalendarBase
    {
        #region Properties

        /// <summary>
        /// <para type="description">Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.</para>
        /// </summary>
        [Parameter(Position = 0,
            Mandatory = true,
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the \"primary\" keyword."
            )]
        public string CalendarId { get; set; }



        /// <summary><para type="description">A EventBody object</para></summary>
        [Parameter(Position = 2,
            Mandatory = false,
            HelpMessage = "A EventBody object",
            ValueFromPipeline = true,
            ValueFromPipelineByPropertyName = true)]
        public Event EventBody { get; set; }

        /// <summary>
        /// <para type="description">The maximum number of attendees to include in the response. If there are more than the specified number of attendees, only the participant is returned. Optional.</para>
        /// </summary>
        [Parameter(Position = 2,
            Mandatory = false,
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "The maximum number of attendees to include in the response. If there are more than the specified number of attendees, only the participant is returned. Optional."
            )]
        public int? MaxAttendees { get; set; }

        /// <summary>
        /// <para type="description">Whether to send notifications about the creation of the new event. Optional. The default is False.</para>
        /// </summary>
        [Parameter(Position = 3,
            Mandatory = false,
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "Whether to send notifications about the creation of the new event. Optional. The default is False.")]
        public bool? SendNotifications { get; set; }

        /// <summary>
        /// <para type="description">Whether API client performing operation supports event attachments. Optional. The default is False.</para>
        /// </summary>
        [Parameter(Position = 4,
            Mandatory = false,
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "Whether API client performing operation supports event attachments. Optional. The default is False.")]
        public bool? SupportsAttachments { get; set; }

        #endregion

        protected override void ProcessRecord()
        {
            if (ShouldProcess("Calendar Events", "New-GCalendarEvent"))
            {
                var properties = new gCalendar.Events.EventsInsertProperties
                {
                    MaxAttendees = MaxAttendees,
                    SendNotifications = SendNotifications,
                    SupportsAttachments = SupportsAttachments
                };


                WriteObject(events.Insert(EventBody, CalendarId, properties, ServiceAccount: gShellServiceAccount, StandardQueryParams: StandardQueryParams));
            }
        }
    }

    /// <summary>
    /// <para type="synopsis">Returns instances of the specified recurring event.</para>
    /// <para type="description">Returns instances of the specified recurring event.</para>
    /// <list type="alertSet"><item><term>About this Cmdlet</term><description>
    /// Part of the gShell Project, relating to the Google Calendar API; see Related Links or use the -Online parameter.
    /// </description></item></list>
    /// <example>
    ///   <code>PS C:\> Get-GCalendarEventInstance -CalendarId $SomeCalendarIdString -EventId $SomeEventIdString</code>
    ///   <para>This automatically generated example serves to show the bare minimum required to call this Cmdlet.</para>
    ///   <para>Additional examples may be added, viewed and edited by users on the community wiki at the URL found in the related links.</para>
    /// </example>
    /// <para type="link" uri="https://github.com/squid808/gShell/wiki/Get-GCalendarEventInstance">[Wiki page for this Cmdlet]</para>
    /// <para type="link" uri="https://github.com/squid808/gShell/wiki/Getting-Started">[Getting started with gShell]</para>
    /// </summary>
    [Cmdlet(VerbsCommon.Get, "GCalendarEventInstance",
        SupportsShouldProcess = true,
        HelpUri = @"https://github.com/squid808/gShell/wiki/Get-GCalendarEventInstance")]
    public class GetGCalendarEventInstanceCommand : CalendarBase
    {
        #region Properties

        /// <summary>
        /// <para type="description">Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.</para>
        /// </summary>
        [Parameter(Position = 0,
            Mandatory = true,
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the \"primary\" keyword."
            )]
        public string CalendarId { get; set; }

        /// <summary>
        /// <para type="description">Recurring event identifier.</para>
        /// </summary>
        [Parameter(Position = 1,
            Mandatory = true,
            ValueFromPipelineByPropertyName = true,
            HelpMessage = "Recurring event identifier.")]
        public string EventId { get; set; }

        /// <summary>
        /// <para type="description">Whether to always include a value in the email field for the organizer, creator and attendees, even if no real email is available (i.e. a generated, non-working value will be provided). The use of this option is discouraged and should only be used by clients which cannot handle the absence of an email address value in the mentioned places. Optional. The default is False.</para>
        /// </summary>
        [Parameter(Position = 2,
            Mandatory = false,
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "Whether to always include a value in the email field for the organizer, creator and attendees, even if no real email is available (i.e. a generated, non-working value will be provided). The use of this option is discouraged and should only be used by clients which cannot handle the absence of an email address value in the mentioned places. Optional. The default is False."
            )]
        public bool? AlwaysIncludeEmail { get; set; }

        /// <summary>
        /// <para type="description">The maximum number of attendees to include in the response. If there are more than the specified number of attendees, only the participant is returned. Optional.</para>
        /// </summary>
        [Parameter(Position = 3,
            Mandatory = false,
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "The maximum number of attendees to include in the response. If there are more than the specified number of attendees, only the participant is returned. Optional."
            )]
        public int? MaxAttendees { get; set; }

        /// <summary>
        /// <para type="description">Maximum number of events returned on one result page. By default the value is 250 events. The page size can never be larger than 2500 events. Optional.</para>
        /// </summary>
        [Parameter(Position = 4,
            Mandatory = false,
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "Maximum number of events returned on one result page. By default the value is 250 events. The page size can never be larger than 2500 events. Optional."
            )]
        public int? MaxResults { get; set; }

        /// <summary>
        /// <para type="description">The original start time of the instance in the result. Optional.</para>
        /// </summary>
        [Parameter(Position = 5,
            Mandatory = false,
            ValueFromPipelineByPropertyName = true,
            HelpMessage = "The original start time of the instance in the result. Optional.")]
        public string OriginalStart { get; set; }

        /// <summary>
        /// <para type="description">Whether to include deleted events (with status equals "cancelled") in the result. Cancelled instances of recurring events will still be included if singleEvents is False. Optional. The default is False.</para>
        /// </summary>
        [Parameter(Position = 6,
            Mandatory = false,
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "Whether to include deleted events (with status equals \"cancelled\") in the result. Cancelled instances of recurring events will still be included if singleEvents is False. Optional. The default is False."
            )]
        public bool? ShowDeleted { get; set; }

        /// <summary>
        /// <para type="description">Upper bound (exclusive) for an event's start time to filter by. Optional. The default is not to filter by start time. Must be an RFC3339 timestamp with mandatory time zone offset.</para>
        /// </summary>
        [Parameter(Position = 7,
            Mandatory = false,
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "Upper bound (exclusive) for an event's start time to filter by. Optional. The default is not to filter by start time. Must be an RFC3339 timestamp with mandatory time zone offset."
            )]
        public DateTime? TimeMax { get; set; }

        /// <summary>
        /// <para type="description">Lower bound (inclusive) for an event's end time to filter by. Optional. The default is not to filter by end time. Must be an RFC3339 timestamp with mandatory time zone offset.</para>
        /// </summary>
        [Parameter(Position = 8,
            Mandatory = false,
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "Lower bound (inclusive) for an event's end time to filter by. Optional. The default is not to filter by end time. Must be an RFC3339 timestamp with mandatory time zone offset."
            )]
        public DateTime? TimeMin { get; set; }

        /// <summary>
        /// <para type="description">Time zone used in the response. Optional. The default is the time zone of the calendar.</para>
        /// </summary>
        [Parameter(Position = 9,
            Mandatory = false,
            ValueFromPipelineByPropertyName = true,
            HelpMessage = "Time zone used in the response. Optional. The default is the time zone of the calendar.")]
        public string TimeZone { get; set; }

        #endregion

        protected override void ProcessRecord()
        {
            if (ShouldProcess("Calendar Events", "Get-GCalendarEventInstance"))
            {
                var properties = new gCalendar.Events.EventsInstancesProperties
                {
                    AlwaysIncludeEmail = AlwaysIncludeEmail,
                    MaxAttendees = MaxAttendees,
                    OriginalStart = OriginalStart,
                    ShowDeleted = ShowDeleted,
                    TimeMax = TimeMax,
                    TimeMin = TimeMin,
                    TimeZone = TimeZone
                };


                WriteObject(events.Instances(CalendarId, EventId, properties, ServiceAccount: gShellServiceAccount, StandardQueryParams: StandardQueryParams));
            }
        }
    }

    /// <summary>
    /// <para type="synopsis">Moves an event to another calendar, i.e. changes an event's organizer.</para>
    /// <para type="description">Moves an event to another calendar, i.e. changes an event's organizer.</para>
    /// <list type="alertSet"><item><term>About this Cmdlet</term><description>
    /// Part of the gShell Project, relating to the Google Calendar API; see Related Links or use the -Online parameter.
    /// </description></item></list>
    /// <example>
    ///   <code>PS C:\> Move-GCalendarEvent -CalendarId $SomeCalendarIdString -EventId $SomeEventIdString -Destination $SomeDestinationString</code>
    ///   <para>This automatically generated example serves to show the bare minimum required to call this Cmdlet.</para>
    ///   <para>Additional examples may be added, viewed and edited by users on the community wiki at the URL found in the related links.</para>
    /// </example>
    /// <para type="link" uri="https://github.com/squid808/gShell/wiki/Move-GCalendarEvent">[Wiki page for this Cmdlet]</para>
    /// <para type="link" uri="https://github.com/squid808/gShell/wiki/Getting-Started">[Getting started with gShell]</para>
    /// </summary>
    [Cmdlet(VerbsCommon.Move, "GCalendarEvent",
        SupportsShouldProcess = true,
        HelpUri = @"https://github.com/squid808/gShell/wiki/Move-GCalendarEvent")]
    public class MoveGCalendarEventCommand : CalendarBase
    {
        #region Properties

        /// <summary>
        /// <para type="description">Calendar identifier of the source calendar where the event currently is on.</para>
        /// </summary>
        [Parameter(Position = 0,
            Mandatory = true,
            ValueFromPipelineByPropertyName = true,
            HelpMessage = "Calendar identifier of the source calendar where the event currently is on.")]
        public string CalendarId { get; set; }

        /// <summary>
        /// <para type="description">Event identifier.</para>
        /// </summary>
        [Parameter(Position = 1,
            Mandatory = true,
            ValueFromPipelineByPropertyName = true,
            HelpMessage = "Event identifier.")]
        public string EventId { get; set; }

        /// <summary>
        /// <para type="description">Calendar identifier of the target calendar where the event is to be moved to.</para>
        /// </summary>
        [Parameter(Position = 2,
            Mandatory = true,
            ValueFromPipelineByPropertyName = true,
            HelpMessage = "Calendar identifier of the target calendar where the event is to be moved to.")]
        public string Destination { get; set; }

        /// <summary>
        /// <para type="description">Whether to send notifications about the change of the event's organizer. Optional. The default is False.</para>
        /// </summary>
        [Parameter(Position = 3,
            Mandatory = false,
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "Whether to send notifications about the change of the event's organizer. Optional. The default is False."
            )]
        public bool? SendNotifications { get; set; }

        #endregion

        protected override void ProcessRecord()
        {
            if (ShouldProcess("Calendar Events", "Move-GCalendarEvent"))
            {
                var properties = new gCalendar.Events.EventsMoveProperties
                {
                    SendNotifications = SendNotifications
                };


                WriteObject(events.Move(CalendarId, EventId, Destination, properties, ServiceAccount: gShellServiceAccount, StandardQueryParams: StandardQueryParams));
            }
        }
    }

    /// <summary>
    /// <para type="synopsis">Updates an event. This method supports patch semantics.</para>
    /// <para type="description">Updates an event. This method supports patch semantics.</para>
    /// <list type="alertSet"><item><term>About this Cmdlet</term><description>
    /// Part of the gShell Project, relating to the Google Calendar API; see Related Links or use the -Online parameter.
    /// </description></item></list>
    /// <example>
    ///   <code>PS C:\> Set-GCalendarEvent -CalendarId $SomeCalendarIdString -EventId $SomeEventIdString -EventBody $SomeEventObj</code>
    ///   <para>This automatically generated example serves to show the bare minimum required to call this Cmdlet.</para>
    ///   <para>Additional examples may be added, viewed and edited by users on the community wiki at the URL found in the related links.</para>
    /// </example>
    /// <para type="link" uri="https://github.com/squid808/gShell/wiki/Set-GCalendarEvent">[Wiki page for this Cmdlet]</para>
    /// <para type="link" uri="https://github.com/squid808/gShell/wiki/Getting-Started">[Getting started with gShell]</para>
    /// </summary>
    [Cmdlet(VerbsCommon.Set, "GCalendarEvent",
        SupportsShouldProcess = true,
        HelpUri = @"https://github.com/squid808/gShell/wiki/Set-GCalendarEvent")]
    public class SetGCalendarEventCommand : CalendarBase
    {
        #region Properties

        /// <summary>
        /// <para type="description">Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.</para>
        /// </summary>
        [Parameter(Position = 0,
            Mandatory = true,
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the \"primary\" keyword."
            )]
        public string CalendarId { get; set; }

        /// <summary>
        /// <para type="description">Event identifier.</para>
        /// </summary>
        [Parameter(Position = 1,
            Mandatory = true,
            ValueFromPipelineByPropertyName = true,
            HelpMessage = "Event identifier.")]
        public string EventId { get; set; }



        /// <summary><para type="description">A EventBody object</para></summary>
        [Parameter(Position = 2,
            Mandatory = false,
            HelpMessage = "A EventBody object",
            ValueFromPipeline = true,
            ValueFromPipelineByPropertyName = true)]
        public Event EventBody { get; set; }

        /// <summary>
        /// <para type="description">Whether to always include a value in the email field for the organizer, creator and attendees, even if no real email is available (i.e. a generated, non-working value will be provided). The use of this option is discouraged and should only be used by clients which cannot handle the absence of an email address value in the mentioned places. Optional. The default is False.</para>
        /// </summary>
        [Parameter(Position = 3,
            Mandatory = false,
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "Whether to always include a value in the email field for the organizer, creator and attendees, even if no real email is available (i.e. a generated, non-working value will be provided). The use of this option is discouraged and should only be used by clients which cannot handle the absence of an email address value in the mentioned places. Optional. The default is False."
            )]
        public bool? AlwaysIncludeEmail { get; set; }

        /// <summary>
        /// <para type="description">The maximum number of attendees to include in the response. If there are more than the specified number of attendees, only the participant is returned. Optional.</para>
        /// </summary>
        [Parameter(Position = 4,
            Mandatory = false,
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "The maximum number of attendees to include in the response. If there are more than the specified number of attendees, only the participant is returned. Optional."
            )]
        public int? MaxAttendees { get; set; }

        /// <summary>
        /// <para type="description">Whether to send notifications about the event update (e.g. attendee's responses, title changes, etc.). Optional. The default is False.</para>
        /// </summary>
        [Parameter(Position = 5,
            Mandatory = false,
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "Whether to send notifications about the event update (e.g. attendee's responses, title changes, etc.). Optional. The default is False."
            )]
        public bool? SendNotifications { get; set; }

        /// <summary>
        /// <para type="description">Whether API client performing operation supports event attachments. Optional. The default is False.</para>
        /// </summary>
        [Parameter(Position = 6,
            Mandatory = false,
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "Whether API client performing operation supports event attachments. Optional. The default is False.")]
        public bool? SupportsAttachments { get; set; }

        #endregion

        protected override void ProcessRecord()
        {
            if (ShouldProcess("Calendar Events", "Set-GCalendarEvent"))
            {
                var properties = new gCalendar.Events.EventsPatchProperties
                {
                    AlwaysIncludeEmail = AlwaysIncludeEmail,
                    MaxAttendees = MaxAttendees,
                    SendNotifications = SendNotifications,
                    SupportsAttachments = SupportsAttachments
                };


                WriteObject(events.Patch(EventBody, CalendarId, EventId, properties, ServiceAccount: gShellServiceAccount, StandardQueryParams: StandardQueryParams));
            }
        }
    }

    /// <summary>
    /// <para type="synopsis">Creates an event based on a simple text string.</para>
    /// <para type="description">Creates an event based on a simple text string.</para>
    /// <list type="alertSet"><item><term>About this Cmdlet</term><description>
    /// Part of the gShell Project, relating to the Google Calendar API; see Related Links or use the -Online parameter.
    /// </description></item></list>
    /// <example>
    ///   <code>PS C:\> Add-GCalendarEvent -CalendarId $SomeCalendarIdString -Text $SomeTextString</code>
    ///   <para>This automatically generated example serves to show the bare minimum required to call this Cmdlet.</para>
    ///   <para>Additional examples may be added, viewed and edited by users on the community wiki at the URL found in the related links.</para>
    /// </example>
    /// <para type="link" uri="https://github.com/squid808/gShell/wiki/Add-GCalendarEvent">[Wiki page for this Cmdlet]</para>
    /// <para type="link" uri="https://github.com/squid808/gShell/wiki/Getting-Started">[Getting started with gShell]</para>
    /// </summary>
    [Cmdlet(VerbsCommon.Add, "GCalendarEvent",
        SupportsShouldProcess = true,
        HelpUri = @"https://github.com/squid808/gShell/wiki/Add-GCalendarEvent")]
    public class AddGCalendarEventCommand : CalendarBase
    {
        #region Properties

        /// <summary>
        /// <para type="description">Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.</para>
        /// </summary>
        [Parameter(Position = 0,
            Mandatory = true,
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the \"primary\" keyword."
            )]
        public string CalendarId { get; set; }

        /// <summary>
        /// <para type="description">The text describing the event to be created.</para>
        /// </summary>
        [Parameter(Position = 1,
            Mandatory = true,
            ValueFromPipelineByPropertyName = true,
            HelpMessage = "The text describing the event to be created.")]
        public string Text { get; set; }

        /// <summary>
        /// <para type="description">Whether to send notifications about the creation of the event. Optional. The default is False.</para>
        /// </summary>
        [Parameter(Position = 2,
            Mandatory = false,
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "Whether to send notifications about the creation of the event. Optional. The default is False.")]
        public bool? SendNotifications { get; set; }

        #endregion

        protected override void ProcessRecord()
        {
            if (ShouldProcess("Calendar Events", "Add-GCalendarEvent"))
            {
                var properties = new gCalendar.Events.EventsQuickAddProperties
                {
                    SendNotifications = SendNotifications
                };


                WriteObject(events.QuickAdd(CalendarId, Text, properties, ServiceAccount: gShellServiceAccount, StandardQueryParams: StandardQueryParams));
            }
        }
    }

    /// <summary>
    /// <para type="synopsis">Updates an event.</para>
    /// <para type="description">Updates an event.</para>
    /// <list type="alertSet"><item><term>About this Cmdlet</term><description>
    /// Part of the gShell Project, relating to the Google Calendar API; see Related Links or use the -Online parameter.
    /// </description></item></list>
    /// <example>
    ///   <code>PS C:\> Update-GCalendarEvent -CalendarId $SomeCalendarIdString -EventId $SomeEventIdString -EventBody $SomeEventObj</code>
    ///   <para>This automatically generated example serves to show the bare minimum required to call this Cmdlet.</para>
    ///   <para>Additional examples may be added, viewed and edited by users on the community wiki at the URL found in the related links.</para>
    /// </example>
    /// <para type="link" uri="https://github.com/squid808/gShell/wiki/Update-GCalendarEvent">[Wiki page for this Cmdlet]</para>
    /// <para type="link" uri="https://github.com/squid808/gShell/wiki/Getting-Started">[Getting started with gShell]</para>
    /// </summary>
    [Cmdlet(VerbsData.Update, "GCalendarEvent",
        SupportsShouldProcess = true,
        HelpUri = @"https://github.com/squid808/gShell/wiki/Update-GCalendarEvent")]
    public class UpdateGCalendarEventCommand : CalendarBase
    {
        #region Properties

        /// <summary>
        /// <para type="description">Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.</para>
        /// </summary>
        [Parameter(Position = 0,
            Mandatory = true,
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the \"primary\" keyword."
            )]
        public string CalendarId { get; set; }

        /// <summary>
        /// <para type="description">Event identifier.</para>
        /// </summary>
        [Parameter(Position = 1,
            Mandatory = true,
            ValueFromPipelineByPropertyName = true,
            HelpMessage = "Event identifier.")]
        public string EventId { get; set; }

        /// <summary>
        /// <para type="description">An EventBody object.</para>
        /// </summary>
        [Parameter(Position = 2,
            HelpMessage = "An EventBody object.",
            Mandatory = false,
            ValueFromPipeline = true,
            ValueFromPipelineByPropertyName = true)]
        public Event EventBody { get; set; }

        /// <summary>
        /// <para type="description">Whether to always include a value in the email field for the organizer, creator and attendees, even if no real email is available (i.e. a generated, non-working value will be provided). The use of this option is discouraged and should only be used by clients which cannot handle the absence of an email address value in the mentioned places. Optional. The default is False.</para>
        /// </summary>
        [Parameter(Position = 3,
            Mandatory = false,
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "Whether to always include a value in the email field for the organizer, creator and attendees, even if no real email is available (i.e. a generated, non-working value will be provided). The use of this option is discouraged and should only be used by clients which cannot handle the absence of an email address value in the mentioned places. Optional. The default is False."
            )]
        public bool? AlwaysIncludeEmail { get; set; }

        /// <summary>
        /// <para type="description">The maximum number of attendees to include in the response. If there are more than the specified number of attendees, only the participant is returned. Optional.</para>
        /// </summary>
        [Parameter(Position = 4,
            Mandatory = false,
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "The maximum number of attendees to include in the response. If there are more than the specified number of attendees, only the participant is returned. Optional."
            )]
        public int? MaxAttendees { get; set; }

        /// <summary>
        /// <para type="description">Whether to send notifications about the event update (e.g. attendee's responses, title changes, etc.). Optional. The default is False.</para>
        /// </summary>
        [Parameter(Position = 5,
            Mandatory = false,
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "Whether to send notifications about the event update (e.g. attendee's responses, title changes, etc.). Optional. The default is False."
            )]
        public bool? SendNotifications { get; set; }

        /// <summary>
        /// <para type="description">Whether API client performing operation supports event attachments. Optional. The default is False.</para>
        /// </summary>
        [Parameter(Position = 6,
            Mandatory = false,
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "Whether API client performing operation supports event attachments. Optional. The default is False.")]
        public bool? SupportsAttachments { get; set; }

        #endregion

        protected override void ProcessRecord()
        {
            if (ShouldProcess("Calendar Events", "Update-GCalendarEvent"))
            {
                var properties = new gCalendar.Events.EventsUpdateProperties
                {
                    AlwaysIncludeEmail = AlwaysIncludeEmail,
                    MaxAttendees = MaxAttendees,
                    SendNotifications = SendNotifications,
                    SupportsAttachments = SupportsAttachments
                };


                WriteObject(events.Update(EventBody, CalendarId, EventId, properties, ServiceAccount: gShellServiceAccount, StandardQueryParams: StandardQueryParams));
            }
        }
    }

    /// <summary>
    /// <para type="synopsis">Watch for changes to Events resources.</para>
    /// <para type="description">Watch for changes to Events resources.</para>
    /// <list type="alertSet"><item><term>About this Cmdlet</term><description>
    /// Part of the gShell Project, relating to the Google Calendar API; see Related Links or use the -Online parameter.
    /// </description></item></list>
    /// <example>
    ///   <code>PS C:\> Watch-GCalendarEvent -CalendarId $SomeCalendarIdString -ChannelBody $SomeChannelObj</code>
    ///   <para>This automatically generated example serves to show the bare minimum required to call this Cmdlet.</para>
    ///   <para>Additional examples may be added, viewed and edited by users on the community wiki at the URL found in the related links.</para>
    /// </example>
    /// <para type="link" uri="https://github.com/squid808/gShell/wiki/Watch-GCalendarEvent">[Wiki page for this Cmdlet]</para>
    /// <para type="link" uri="https://github.com/squid808/gShell/wiki/Getting-Started">[Getting started with gShell]</para>
    /// </summary>
    [Cmdlet(VerbsCommon.Watch, "GCalendarEvent",
        SupportsShouldProcess = true,
        HelpUri = @"https://gaithub.com/squid808/gShell/wiki/Watch-GCalendarEvent")]
    public class WatchGCalendarEventCommand : CalendarBase
    {
        #region Properties

        /// <summary>
        /// <para type="description">Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.</para>
        /// </summary>
        [Parameter(Position = 0,
            Mandatory = true,
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the \"primary\" keyword."
            )]
        public string CalendarId { get; set; }



        /// <summary><para type="description">A ChannelBody object</para></summary>
        [Parameter(Position = 0,
            Mandatory = false,
            HelpMessage = "A ChannelBody object",
            ValueFromPipeline = true,
            ValueFromPipelineByPropertyName = true)]
        public Channel ChannelBody { get; set; }

        /// <summary>
        /// <para type="description">Whether to always include a value in the email field for the organizer, creator and attendees, even if no real email is available (i.e. a generated, non-working value will be provided). The use of this option is discouraged and should only be used by clients which cannot handle the absence of an email address value in the mentioned places. Optional. The default is False.</para>
        /// </summary>
        [Parameter(Position = 2,
            Mandatory = false,
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "Whether to always include a value in the email field for the organizer, creator and attendees, even if no real email is available (i.e. a generated, non-working value will be provided). The use of this option is discouraged and should only be used by clients which cannot handle the absence of an email address value in the mentioned places. Optional. The default is False."
            )]
        public bool? AlwaysIncludeEmail { get; set; }

        /// <summary>
        /// <para type="description">Specifies event ID in the iCalendar format to be included in the response. Optional.</para>
        /// </summary>
        [Parameter(Position = 3,
            Mandatory = false,
            ValueFromPipelineByPropertyName = true,
            HelpMessage = "Specifies event ID in the iCalendar format to be included in the response. Optional.")]
        public string ICalUID { get; set; }

        /// <summary>
        /// <para type="description">The maximum number of attendees to include in the response. If there are more than the specified number of attendees, only the participant is returned. Optional.</para>
        /// </summary>
        [Parameter(Position = 4,
            Mandatory = false,
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "The maximum number of attendees to include in the response. If there are more than the specified number of attendees, only the participant is returned. Optional."
            )]
        public int? MaxAttendees { get; set; }

        /// <summary>
        /// <para type="description">Maximum number of events returned on one result page. By default the value is 250 events. The page size can never be larger than 2500 events. Optional.</para>
        /// </summary>
        [Parameter(Position = 5,
            Mandatory = false,
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "Maximum number of events returned on one result page. By default the value is 250 events. The page size can never be larger than 2500 events. Optional."
            )]
        public int? MaxResults { get; set; }

        /// <summary>
        /// <para type="description">The order of the events returned in the result. Optional. The default is an unspecified, stable order.</para>
        /// </summary>
        [Parameter(Position = 6,
            Mandatory = false,
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "The order of the events returned in the result. Optional. The default is an unspecified, stable order."
            )]
        public EventsResource.WatchRequest.OrderByEnum? OrderBy { get; set; }

        /// <summary>
        /// <para type="description">Extended properties constraint specified as propertyName=value. Matches only private properties. This parameter might be repeated multiple times to return events that match all given constraints.</para>
        /// </summary>
        [Parameter(Position = 7,
            Mandatory = false,
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "Extended properties constraint specified as propertyName=value. Matches only private properties. This parameter might be repeated multiple times to return events that match all given constraints."
            )]
        public string[] PrivateExtendedProperty { get; set; }

        /// <summary>
        /// <para type="description">Free text search terms to find events that match these terms in any field, except for extended properties. Optional.</para>
        /// </summary>
        [Parameter(Position = 8,
            Mandatory = false,
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "Free text search terms to find events that match these terms in any field, except for extended properties. Optional."
            )]
        public string Q { get; set; }

        /// <summary>
        /// <para type="description">Extended properties constraint specified as propertyName=value. Matches only shared properties. This parameter might be repeated multiple times to return events that match all given constraints.</para>
        /// </summary>
        [Parameter(Position = 9,
            Mandatory = false,
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "Extended properties constraint specified as propertyName=value. Matches only shared properties. This parameter might be repeated multiple times to return events that match all given constraints."
            )]
        public string[] SharedExtendedProperty { get; set; }

        /// <summary>
        /// <para type="description">Whether to include deleted events (with status equals "cancelled") in the result. Cancelled instances of recurring events (but not the underlying recurring event) will still be included if showDeleted and singleEvents are both False. If showDeleted and singleEvents are both True, only single instances of deleted events (but not the underlying recurring events) are returned. Optional. The default is False.</para>
        /// </summary>
        [Parameter(Position = 10,
            Mandatory = false,
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "Whether to include deleted events (with status equals \"cancelled\") in the result. Cancelled instances of recurring events (but not the underlying recurring event) will still be included if showDeleted and singleEvents are both False. If showDeleted and singleEvents are both True, only single instances of deleted events (but not the underlying recurring events) are returned. Optional. The default is False."
            )]
        public bool? ShowDeleted { get; set; }

        /// <summary>
        /// <para type="description">Whether to include hidden invitations in the result. Optional. The default is False.</para>
        /// </summary>
        [Parameter(Position = 11,
            Mandatory = false,
            ValueFromPipelineByPropertyName = true,
            HelpMessage = "Whether to include hidden invitations in the result. Optional. The default is False.")]
        public bool? ShowHiddenInvitations { get; set; }

        /// <summary>
        /// <para type="description">Whether to expand recurring events into instances and only return single one-off events and instances of recurring events, but not the underlying recurring events themselves. Optional. The default is False.</para>
        /// </summary>
        [Parameter(Position = 12,
            Mandatory = false,
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "Whether to expand recurring events into instances and only return single one-off events and instances of recurring events, but not the underlying recurring events themselves. Optional. The default is False."
            )]
        public bool? SingleEvents { get; set; }

        /// <summary>
        /// <para type="description">Token obtained from the nextSyncToken field returned on the last page of results from the previous list request. It makes the result of this list request contain only entries that have changed since then. All events deleted since the previous list request will always be in the result set and it is not allowed to set showDeleted to False.There are several query parameters that cannot be specified together with nextSyncToken to ensure consistency of the client state.These are:- iCalUID- orderBy- privateExtendedProperty- q- sharedExtendedProperty- timeMin- timeMax- updatedMin If the syncToken expires, the server will respond with a 410 GONE response code and the client should clear its storage and perform a full synchronization without any syncToken.Learn more about incremental synchronization.Optional. The default is to return all entries.</para>
        /// </summary>
        [Parameter(Position = 13,
            Mandatory = false,
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "Token obtained from the nextSyncToken field returned on the last page of results from the previous list request. It makes the result of this list request contain only entries that have changed since then. All events deleted since the previous list request will always be in the result set and it is not allowed to set showDeleted to False.\nThere are several query parameters that cannot be specified together with nextSyncToken to ensure consistency of the client state.\n\nThese are: \n- iCalUID \n- orderBy \n- privateExtendedProperty \n- q \n- sharedExtendedProperty \n- timeMin \n- timeMax \n- updatedMin If the syncToken expires, the server will respond with a 410 GONE response code and the client should clear its storage and perform a full synchronization without any syncToken.\nLearn more about incremental synchronization.\nOptional. The default is to return all entries."
            )]
        public string SyncToken { get; set; }

        /// <summary>
        /// <para type="description">Upper bound (exclusive) for an event's start time to filter by. Optional. The default is not to filter by start time. Must be an RFC3339 timestamp with mandatory time zone offset, e.g., 2011-06-03T10:00:00-07:00, 2011-06-03T10:00:00Z. Milliseconds may be provided but will be ignored.</para>
        /// </summary>
        [Parameter(Position = 14,
            Mandatory = false,
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "Upper bound (exclusive) for an event's start time to filter by. Optional. The default is not to filter by start time. Must be an RFC3339 timestamp with mandatory time zone offset, e.g., 2011-06-03T10:00:00-07:00, 2011-06-03T10:00:00Z. Milliseconds may be provided but will be ignored."
            )]
        public DateTime? TimeMax { get; set; }

        /// <summary>
        /// <para type="description">Lower bound (inclusive) for an event's end time to filter by. Optional. The default is not to filter by end time. Must be an RFC3339 timestamp with mandatory time zone offset, e.g., 2011-06-03T10:00:00-07:00, 2011-06-03T10:00:00Z. Milliseconds may be provided but will be ignored.</para>
        /// </summary>
        [Parameter(Position = 15,
            Mandatory = false,
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "Lower bound (inclusive) for an event's end time to filter by. Optional. The default is not to filter by end time. Must be an RFC3339 timestamp with mandatory time zone offset, e.g., 2011-06-03T10:00:00-07:00, 2011-06-03T10:00:00Z. Milliseconds may be provided but will be ignored."
            )]
        public DateTime? TimeMin { get; set; }

        /// <summary>
        /// <para type="description">Time zone used in the response. Optional. The default is the time zone of the calendar.</para>
        /// </summary>
        [Parameter(Position = 16,
            Mandatory = false,
            ValueFromPipelineByPropertyName = true,
            HelpMessage = "Time zone used in the response. Optional. The default is the time zone of the calendar.")]
        public string TimeZone { get; set; }

        /// <summary>
        /// <para type="description">Lower bound for an event's last modification time (as a RFC3339 timestamp) to filter by. When specified, entries deleted since this time will always be included regardless of showDeleted. Optional. The default is not to filter by last modification time.</para>
        /// </summary>
        [Parameter(Position = 17,
            Mandatory = false,
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "Lower bound for an event's last modification time (as a RFC3339 timestamp) to filter by. When specified, entries deleted since this time will always be included regardless of showDeleted. Optional. The default is not to filter by last modification time."
            )]
        public DateTime? UpdatedMin { get; set; }

        #endregion

        protected override void ProcessRecord()
        {
            if (ShouldProcess("Calendar Events", "Watch-GCalendarEvent"))
            {
                var properties = new gCalendar.Events.EventsWatchProperties
                {
                    AlwaysIncludeEmail = AlwaysIncludeEmail,
                    ICalUID = ICalUID,
                    MaxAttendees = MaxAttendees,
                    OrderBy = OrderBy,
                    Q = Q,
                    ShowDeleted = ShowDeleted,
                    ShowHiddenInvitations = ShowHiddenInvitations,
                    SingleEvents = SingleEvents,
                    SyncToken = SyncToken,
                    TimeMax = TimeMax,
                    TimeMin = TimeMin,
                    TimeZone = TimeZone,
                    UpdatedMin = UpdatedMin
                };

                if (this.PrivateExtendedProperty != null) properties.PrivateExtendedProperty = this.PrivateExtendedProperty;
                if (this.SharedExtendedProperty != null) properties.SharedExtendedProperty = this.SharedExtendedProperty;

                WriteObject(events.Watch(ChannelBody, CalendarId, properties, ServiceAccount: gShellServiceAccount, StandardQueryParams: StandardQueryParams));
            }
        }
    }
}

namespace gShell.Cmdlets.Calendar.Freebusy
{
    /// <summary>
    /// <para type="synopsis">Returns free/busy information for a set of calendars.</para>
    /// <para type="description">Returns free/busy information for a set of calendars.</para>
    /// <list type="alertSet"><item><term>About this Cmdlet</term><description>
    /// Part of the gShell Project, relating to the Google Calendar API; see Related Links or use the -Online parameter.
    /// </description></item></list>
    /// <example>
    ///   <code>PS C:\> Get-GCalendarFreebusy -FreeBusyRequestBody $SomeFreeBusyRequestObj</code>
    ///   <para>This automatically generated example serves to show the bare minimum required to call this Cmdlet.</para>
    ///   <para>Additional examples may be added, viewed and edited by users on the community wiki at the URL found in the related links.</para>
    /// </example>
    /// <para type="link" uri="https://github.com/squid808/gShell/wiki/Get-GCalendarFreebusy">[Wiki page for this Cmdlet]</para>
    /// <para type="link" uri="https://github.com/squid808/gShell/wiki/Getting-Started">[Getting started with gShell]</para>
    /// </summary>
    [Cmdlet(VerbsCommon.Get, "GCalendarFreebusy",
        SupportsShouldProcess = true,
        HelpUri = @"https://github.com/squid808/gShell/wiki/Get-GCalendarFreebusy")]
    public class GetGCalendarFreebusyCommand : CalendarBase
    {
        #region Properties

        /// <summary>
        /// <para type="description">A FreeBusyRequest object.</para>
        /// </summary>
        [Parameter(Position = 0,
            HelpMessage = "A FreeBusyRequest object.",
            Mandatory = false,
            ValueFromPipeline = true,
            ValueFromPipelineByPropertyName = true)]
        public FreeBusyRequest FreeBusyRequestBody { get; set; }

        #endregion

        protected override void ProcessRecord()
        {
            if (ShouldProcess("Calendar Freebusy", "Get-GCalendarFreebusy"))
            {
                WriteObject(freebusy.Query(FreeBusyRequestBody, ServiceAccount: gShellServiceAccount, StandardQueryParams: StandardQueryParams));
            }
        }
    }
}

namespace gShell.Cmdlets.Calendar.Settings
{
    /// <summary>
    /// <para type="synopsis">Returns a single user setting.</para>
    /// <para type="description">Returns a single user setting.</para>
    /// <list type="alertSet"><item><term>About this Cmdlet</term><description>
    /// Part of the gShell Project, relating to the Google Calendar API; see Related Links or use the -Online parameter.
    /// </description></item></list>
    /// <example>
    ///   <code>PS C:\> Get-GCalendarSettings -Setting $SomeSettingString</code>
    ///   <para>This automatically generated example serves to show the bare minimum required to call this Cmdlet.</para>
    ///   <para>Additional examples may be added, viewed and edited by users on the community wiki at the URL found in the related links.</para>
    /// </example>
    /// <example>
    ///   <code>PS C:\> Get-GCalendarSettings -All</code>
    ///   <para>This automatically generated example serves to show the bare minimum required to call this Cmdlet.</para>
    ///   <para>Additional examples may be added, viewed and edited by users on the community wiki at the URL found in the related links.</para>
    /// </example>
    /// <para type="link" uri="https://github.com/squid808/gShell/wiki/Get-GCalendarSettings">[Wiki page for this Cmdlet]</para>
    /// <para type="link" uri="https://github.com/squid808/gShell/wiki/Getting-Started">[Getting started with gShell]</para>
    /// </summary>
    [Cmdlet(VerbsCommon.Get, "GCalendarSettings",
        SupportsShouldProcess = true,
        DefaultParameterSetName = "one",
        HelpUri = @"https://github.com/squid808/gShell/wiki/Get-GCalendarSettings")]
    public class GetGCalendarSettingsCommand : CalendarBase
    {
        #region Properties

        /// <summary>
        /// <para type="description">The id of the user setting.</para>
        /// </summary>
        [Parameter(Position = 0,
            ParameterSetName = "one",
            Mandatory = true,
            ValueFromPipelineByPropertyName = true,
            HelpMessage = "The id of the user setting.")]
        public string Setting { get; set; }

        /// <summary>
        /// <para type="description">Maximum number of entries returned on one result page. By default the value is 100 entries. The page size can never be larger than 250 entries. Optional.</para>
        /// </summary>
        [Parameter(Position = 0,
            ParameterSetName = "list",
            Mandatory = false,
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "Maximum number of entries returned on one result page. By default the value is 100 entries. The page size can never be larger than 250 entries. Optional."
            )]
        public int? MaxResults { get; set; }

        /// <summary>
        /// <para type="description">Token obtained from the nextSyncToken field returned on the last page of results from the previous list request. It makes the result of this list request contain only entries that have changed since then.If the syncToken expires, the server will respond with a 410 GONE response code and the client should clear its storage and perform a full synchronization without any syncToken.Learn more about incremental synchronization.Optional. The default is to return all entries.</para>
        /// </summary>
        [Parameter(Position = 1,
            ParameterSetName = "list",
            Mandatory = false,
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "Token obtained from the nextSyncToken field returned on the last page of results from the previous list request. It makes the result of this list request contain only entries that have changed since then.\nIf the syncToken expires, the server will respond with a 410 GONE response code and the client should clear its storage and perform a full synchronization without any syncToken.\nLearn more about incremental synchronization.\nOptional. The default is to return all entries."
            )]
        public string SyncToken { get; set; }

        #endregion

        protected override void ProcessRecord()
        {
            if (ShouldProcess("Calendar Settings", "Get-GCalendarSettings"))
            {
                if (ParameterSetName == "one")
                {
                    WriteObject(settings.Get(Setting, ServiceAccount: gShellServiceAccount, StandardQueryParams: StandardQueryParams));
                }
                else
                {
                    var properties = new gCalendar.Settings.SettingsListProperties
                    {
                        SyncToken = SyncToken
                    };

                    if (MaxResults.HasValue) properties.TotalResults = MaxResults.Value;

                    WriteObject(settings.List(properties, ServiceAccount: gShellServiceAccount, StandardQueryParams: StandardQueryParams).SelectMany(x => x.Items.ToList()));
                }
            }
        }
    }

    /// <summary>
    /// <para type="synopsis">Watch for changes to Settings resources.</para>
    /// <para type="description">Watch for changes to Settings resources.</para>
    /// <list type="alertSet"><item><term>About this Cmdlet</term><description>
    /// Part of the gShell Project, relating to the Google Calendar API; see Related Links or use the -Online parameter.
    /// </description></item></list>
    /// <example>
    ///   <code>PS C:\> Watch-GCalendarSettings -ChannelBody $SomeChannelObj</code>
    ///   <para>This automatically generated example serves to show the bare minimum required to call this Cmdlet.</para>
    ///   <para>Additional examples may be added, viewed and edited by users on the community wiki at the URL found in the related links.</para>
    /// </example>
    /// <para type="link" uri="https://github.com/squid808/gShell/wiki/Watch-GCalendarSettings">[Wiki page for this Cmdlet]</para>
    /// <para type="link" uri="https://github.com/squid808/gShell/wiki/Getting-Started">[Getting started with gShell]</para>
    /// </summary>
    [Cmdlet(VerbsCommon.Watch, "GCalendarSettings",
        SupportsShouldProcess = true,
        HelpUri = @"https://github.com/squid808/gShell/wiki/Watch-GCalendarSettings")]
    public class WatchGCalendarSettingsCommand : CalendarBase
    {
        #region Properties


        /// <summary><para type="description">A ChannelBody object</para></summary>
        [Parameter(Position = 0,
            Mandatory = false,
            HelpMessage = "A ChannelBody object",
            ValueFromPipeline = true,
            ValueFromPipelineByPropertyName = true)]
        public Channel ChannelBody { get; set; }

        /// <summary>
        /// <para type="description">Maximum number of entries returned on one result page. By default the value is 100 entries. The page size can never be larger than 250 entries. Optional.</para>
        /// </summary>
        [Parameter(Position = 1,
            Mandatory = false,
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "Maximum number of entries returned on one result page. By default the value is 100 entries. The page size can never be larger than 250 entries. Optional."
            )]
        public int? MaxResults { get; set; }

        /// <summary>
        /// <para type="description">Token obtained from the nextSyncToken field returned on the last page of results from the previous list request. It makes the result of this list request contain only entries that have changed since then.If the syncToken expires, the server will respond with a 410 GONE response code and the client should clear its storage and perform a full synchronization without any syncToken.Learn more about incremental synchronization.Optional. The default is to return all entries.</para>
        /// </summary>
        [Parameter(Position = 2,
            Mandatory = false,
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "Token obtained from the nextSyncToken field returned on the last page of results from the previous list request. It makes the result of this list request contain only entries that have changed since then.\nIf the syncToken expires, the server will respond with a 410 GONE response code and the client should clear its storage and perform a full synchronization without any syncToken.\nLearn more about incremental synchronization.\nOptional. The default is to return all entries."
            )]
        public string SyncToken { get; set; }

        #endregion

        protected override void ProcessRecord()
        {
            if (ShouldProcess("Calendar Settings", "Watch-GCalendarSettings"))
            {
                var properties = new gCalendar.Settings.SettingsWatchProperties
                {
                    SyncToken = SyncToken
                };


                WriteObject(settings.Watch(ChannelBody, properties, ServiceAccount: gShellServiceAccount, StandardQueryParams: StandardQueryParams));
            }
        }
    }
}