// gShell is licensed under the GNU GENERAL PUBLIC LICENSE, Version 3
//
// http://www.gnu.org/licenses/gpl-3.0.en.html
//
// Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
// an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.
//
// gShell is based upon https://github.com/google/google-api-dotnet-client, which is licensed under the Apache 2.0
// license: https://github.com/google/google-api-dotnet-client/blob/master/LICENSE
//
// gShell is reliant upon the Google Apis. Please see the specific API pages for specific licensing information.

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a fork of google-apis-code-generator:
//       https://github.com/squid808/apis-client-generator
//
//     How neat is that? Pretty neat.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using gShell.Cmdlets.Utilities.OAuth2;
using gShell.dotNet;

namespace gShell.Cmdlets.Calendar{

    using System;
    using System.Collections.Generic;
    using System.Management.Automation;

    using Google.Apis.Auth.OAuth2;
    using Google.Apis.Services;
    using v3 = Google.Apis.Calendar.v3;
    using Data = Google.Apis.Calendar.v3.Data;

    using gShell.dotNet.Utilities;
    using gShell.dotNet.Utilities.OAuth2;
    using gCalendar = gShell.dotNet.Calendar;

    /// <summary>
    /// A PowerShell-ready wrapper for the Calendar api, as well as the resources and methods therein.
    /// </summary>
    public abstract class CalendarBase : ServiceAccountCmdletBase
    {

        #region Properties

        /// <summary>The gShell dotNet class wrapper base.</summary>
        protected static gCalendar mainBase { get; set; }


        /// <summary>An instance of the Acl gShell dotNet resource.</summary>
        public Acl acl { get; set; }

        /// <summary>An instance of the CalendarList gShell dotNet resource.</summary>
        public CalendarList calendarList { get; set; }

        /// <summary>An instance of the Calendars gShell dotNet resource.</summary>
        public Calendars calendars { get; set; }

        /// <summary>An instance of the Channels gShell dotNet resource.</summary>
        public Channels channels { get; set; }

        /// <summary>An instance of the Colors gShell dotNet resource.</summary>
        public Colors colors { get; set; }

        /// <summary>An instance of the Events gShell dotNet resource.</summary>
        public Events events { get; set; }

        /// <summary>An instance of the Freebusy gShell dotNet resource.</summary>
        public Freebusy freebusy { get; set; }

        /// <summary>An instance of the Settings gShell dotNet resource.</summary>
        public Settings settings { get; set; }

        /// <summary>
        /// Required to be able to store and retrieve the mainBase from the ServiceWrapperDictionary
        /// </summary>
        protected override Type mainBaseType { get { return typeof(gCalendar); } }
        #endregion

        #region Constructors
        protected CalendarBase()
        {
            mainBase = new gCalendar();

            ServiceWrapperDictionary[mainBaseType] = mainBase;


            acl = new Acl();
            calendarList = new CalendarList();
            calendars = new Calendars();
            channels = new Channels();
            colors = new Colors();
            events = new Events();
            freebusy = new Freebusy();
            settings = new Settings();
        }
        #endregion

        #region Wrapped Methods



        #region Acl

        /// <summary>A wrapper class for the Acl resource.</summary>
        public class Acl
        {




            /// <summary>Deletes an access control rule.</summary>
            /// <param name="CalendarId">Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you
            /// want to access the primary calendar of the currently logged in user, use the "primary" keyword.</param>
            ///
            /// <param name="RuleId">ACL rule identifier.</param>
            public void Delete (string CalendarId, string RuleId, string ServiceAccount = null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {

                mainBase.acl.Delete(CalendarId, RuleId, ServiceAccount, StandardQueryParams);
            }



            /// <summary>Returns an access control rule.</summary>
            /// <param name="CalendarId">Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you
            /// want to access the primary calendar of the currently logged in user, use the "primary" keyword.</param>
            ///
            /// <param name="RuleId">ACL rule identifier.</param>
            public Google.Apis.Calendar.v3.Data.AclRule Get (string CalendarId, string RuleId, string ServiceAccount = null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {

                return mainBase.acl.Get(CalendarId, RuleId, ServiceAccount, StandardQueryParams);
            }



            /// <summary>Creates an access control rule.</summary>
            /// <param name="AclRuleBody">The body of the request.</param>
            /// <param name="CalendarId">Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you
            /// want to access the primary calendar of the currently logged in user, use the "primary" keyword.</param>
            public Google.Apis.Calendar.v3.Data.AclRule Insert (Google.Apis.Calendar.v3.Data.AclRule AclRuleBody, string CalendarId, string ServiceAccount = null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {

                return mainBase.acl.Insert(AclRuleBody, CalendarId, ServiceAccount, StandardQueryParams);
            }



            /// <summary>Returns the rules in the access control list for the calendar.</summary>
            /// <param name="CalendarId">Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you
            /// want to access the primary calendar of the currently logged in user, use the "primary" keyword.</param>
            /// <param name="properties">The optional properties for this method.</param>

            public List<Google.Apis.Calendar.v3.Data.Acl> List(string CalendarId, gCalendar.Acl.AclListProperties properties= null, string ServiceAccount = null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {

                properties = properties ?? new gCalendar.Acl.AclListProperties();
                properties.StartProgressBar = StartProgressBar;
                properties.UpdateProgressBar = UpdateProgressBar;

                return mainBase.acl.List(CalendarId, properties, ServiceAccount, StandardQueryParams);
            }

            /// <summary>Updates an access control rule. This method supports patch semantics.</summary>
            /// <param name="AclRuleBody">The body of the request.</param>
            /// <param name="CalendarId">Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you
            /// want to access the primary calendar of the currently logged in user, use the "primary" keyword.</param>
            ///
            /// <param name="RuleId">ACL rule identifier.</param>
            public Google.Apis.Calendar.v3.Data.AclRule Patch (Google.Apis.Calendar.v3.Data.AclRule AclRuleBody, string CalendarId, string RuleId, string ServiceAccount = null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {

                return mainBase.acl.Patch(AclRuleBody, CalendarId, RuleId, ServiceAccount, StandardQueryParams);
            }



            /// <summary>Updates an access control rule.</summary>
            /// <param name="AclRuleBody">The body of the request.</param>
            /// <param name="CalendarId">Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you
            /// want to access the primary calendar of the currently logged in user, use the "primary" keyword.</param>
            ///
            /// <param name="RuleId">ACL rule identifier.</param>
            public Google.Apis.Calendar.v3.Data.AclRule Update (Google.Apis.Calendar.v3.Data.AclRule AclRuleBody, string CalendarId, string RuleId, string ServiceAccount = null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {

                return mainBase.acl.Update(AclRuleBody, CalendarId, RuleId, ServiceAccount, StandardQueryParams);
            }



            /// <summary>Watch for changes to ACL resources.</summary>
            /// <param name="ChannelBody">The body of the request.</param>
            /// <param name="CalendarId">Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you
            /// want to access the primary calendar of the currently logged in user, use the "primary" keyword.</param>
            /// <param name="properties">The optional properties for this method.</param>
            public Google.Apis.Calendar.v3.Data.Channel Watch (Google.Apis.Calendar.v3.Data.Channel ChannelBody, string CalendarId, gCalendar.Acl.AclWatchProperties properties= null, string ServiceAccount = null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {

                properties = properties ?? new gCalendar.Acl.AclWatchProperties();

                return mainBase.acl.Watch(ChannelBody, CalendarId, properties, ServiceAccount, StandardQueryParams);
            }


        }
        #endregion



        #region CalendarList

        /// <summary>A wrapper class for the CalendarList resource.</summary>
        public class CalendarList
        {




            /// <summary>Deletes an entry on the user's calendar list.</summary>
            /// <param name="CalendarId">Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you
            /// want to access the primary calendar of the currently logged in user, use the "primary" keyword.</param>
            public void Delete (string CalendarId, string ServiceAccount = null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {

                mainBase.calendarList.Delete(CalendarId, ServiceAccount, StandardQueryParams);
            }



            /// <summary>Returns an entry on the user's calendar list.</summary>
            /// <param name="CalendarId">Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you
            /// want to access the primary calendar of the currently logged in user, use the "primary" keyword.</param>
            public Google.Apis.Calendar.v3.Data.CalendarListEntry Get (string CalendarId, string ServiceAccount = null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {

                return mainBase.calendarList.Get(CalendarId, ServiceAccount, StandardQueryParams);
            }



            /// <summary>Adds an entry to the user's calendar list.</summary>
            /// <param name="CalendarListEntryBody">The body of the request.</param>
            /// <param name="properties">The optional properties for this method.</param>
            public Google.Apis.Calendar.v3.Data.CalendarListEntry Insert (Google.Apis.Calendar.v3.Data.CalendarListEntry CalendarListEntryBody, gCalendar.CalendarList.CalendarListInsertProperties properties= null, string ServiceAccount = null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {

                properties = properties ?? new gCalendar.CalendarList.CalendarListInsertProperties();

                return mainBase.calendarList.Insert(CalendarListEntryBody, properties, ServiceAccount, StandardQueryParams);
            }



            /// <summary>Returns entries on the user's calendar list.</summary>
            /// <param name="properties">The optional properties for this method.</param>

            public List<Google.Apis.Calendar.v3.Data.CalendarList> List(gCalendar.CalendarList.CalendarListListProperties properties= null, string ServiceAccount = null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {

                properties = properties ?? new gCalendar.CalendarList.CalendarListListProperties();
                properties.StartProgressBar = StartProgressBar;
                properties.UpdateProgressBar = UpdateProgressBar;

                return mainBase.calendarList.List(properties, ServiceAccount, StandardQueryParams);
            }

            /// <summary>Updates an entry on the user's calendar list. This method supports patch semantics.</summary>
            /// <param name="CalendarListEntryBody">The body of the request.</param>
            /// <param name="CalendarId">Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you
            /// want to access the primary calendar of the currently logged in user, use the "primary" keyword.</param>
            /// <param name="properties">The optional properties for this method.</param>
            public Google.Apis.Calendar.v3.Data.CalendarListEntry Patch (Google.Apis.Calendar.v3.Data.CalendarListEntry CalendarListEntryBody, string CalendarId, gCalendar.CalendarList.CalendarListPatchProperties properties= null, string ServiceAccount = null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {

                properties = properties ?? new gCalendar.CalendarList.CalendarListPatchProperties();

                return mainBase.calendarList.Patch(CalendarListEntryBody, CalendarId, properties, ServiceAccount, StandardQueryParams);
            }



            /// <summary>Updates an entry on the user's calendar list.</summary>
            /// <param name="CalendarListEntryBody">The body of the request.</param>
            /// <param name="CalendarId">Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you
            /// want to access the primary calendar of the currently logged in user, use the "primary" keyword.</param>
            /// <param name="properties">The optional properties for this method.</param>
            public Google.Apis.Calendar.v3.Data.CalendarListEntry Update (Google.Apis.Calendar.v3.Data.CalendarListEntry CalendarListEntryBody, string CalendarId, gCalendar.CalendarList.CalendarListUpdateProperties properties= null, string ServiceAccount = null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {

                properties = properties ?? new gCalendar.CalendarList.CalendarListUpdateProperties();

                return mainBase.calendarList.Update(CalendarListEntryBody, CalendarId, properties, ServiceAccount, StandardQueryParams);
            }



            /// <summary>Watch for changes to CalendarList resources.</summary>
            /// <param name="ChannelBody">The body of the request.</param>
            /// <param name="properties">The optional properties for this method.</param>
            public Google.Apis.Calendar.v3.Data.Channel Watch (Google.Apis.Calendar.v3.Data.Channel ChannelBody, gCalendar.CalendarList.CalendarListWatchProperties properties= null, string ServiceAccount = null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {

                properties = properties ?? new gCalendar.CalendarList.CalendarListWatchProperties();

                return mainBase.calendarList.Watch(ChannelBody, properties, ServiceAccount, StandardQueryParams);
            }


        }
        #endregion



        #region Calendars

        /// <summary>A wrapper class for the Calendars resource.</summary>
        public class Calendars
        {




            /// <summary>Clears a primary calendar. This operation deletes all events associated with the primary
            /// calendar of an account.</summary>
            /// <param name="CalendarId">Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you
            /// want to access the primary calendar of the currently logged in user, use the "primary" keyword.</param>
            public void Clear (string CalendarId, string ServiceAccount = null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {

                mainBase.calendars.Clear(CalendarId, ServiceAccount, StandardQueryParams);
            }



            /// <summary>Deletes a secondary calendar. Use calendars.clear for clearing all events on primary
            /// calendars.</summary>
            /// <param name="CalendarId">Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you
            /// want to access the primary calendar of the currently logged in user, use the "primary" keyword.</param>
            public void Delete (string CalendarId, string ServiceAccount = null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {

                mainBase.calendars.Delete(CalendarId, ServiceAccount, StandardQueryParams);
            }



            /// <summary>Returns metadata for a calendar.</summary>
            /// <param name="CalendarId">Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you
            /// want to access the primary calendar of the currently logged in user, use the "primary" keyword.</param>
            public Google.Apis.Calendar.v3.Data.Calendar Get (string CalendarId, string ServiceAccount = null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {

                return mainBase.calendars.Get(CalendarId, ServiceAccount, StandardQueryParams);
            }



            /// <summary>Creates a secondary calendar.</summary>
            /// <param name="CalendarBody">The body of the request.</param>
            public Google.Apis.Calendar.v3.Data.Calendar Insert (Google.Apis.Calendar.v3.Data.Calendar CalendarBody, string ServiceAccount = null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {

                return mainBase.calendars.Insert(CalendarBody, ServiceAccount, StandardQueryParams);
            }



            /// <summary>Updates metadata for a calendar. This method supports patch semantics.</summary>
            /// <param name="CalendarBody">The body of the request.</param>
            /// <param name="CalendarId">Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you
            /// want to access the primary calendar of the currently logged in user, use the "primary" keyword.</param>
            public Google.Apis.Calendar.v3.Data.Calendar Patch (Google.Apis.Calendar.v3.Data.Calendar CalendarBody, string CalendarId, string ServiceAccount = null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {

                return mainBase.calendars.Patch(CalendarBody, CalendarId, ServiceAccount, StandardQueryParams);
            }



            /// <summary>Updates metadata for a calendar.</summary>
            /// <param name="CalendarBody">The body of the request.</param>
            /// <param name="CalendarId">Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you
            /// want to access the primary calendar of the currently logged in user, use the "primary" keyword.</param>
            public Google.Apis.Calendar.v3.Data.Calendar Update (Google.Apis.Calendar.v3.Data.Calendar CalendarBody, string CalendarId, string ServiceAccount = null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {

                return mainBase.calendars.Update(CalendarBody, CalendarId, ServiceAccount, StandardQueryParams);
            }


        }
        #endregion



        #region Channels

        /// <summary>A wrapper class for the Channels resource.</summary>
        public class Channels
        {




            /// <summary>Stop watching resources through this channel</summary>
            /// <param name="ChannelBody">The body of the request.</param>
            public void Stop (Google.Apis.Calendar.v3.Data.Channel ChannelBody, string ServiceAccount = null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {

                mainBase.channels.Stop(ChannelBody, ServiceAccount, StandardQueryParams);
            }


        }
        #endregion



        #region Colors

        /// <summary>A wrapper class for the Colors resource.</summary>
        public class Colors
        {




            /// <summary>Returns the color definitions for calendars and events.</summary>
            public Google.Apis.Calendar.v3.Data.Colors Get (string ServiceAccount, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {

                return mainBase.colors.Get(ServiceAccount, StandardQueryParams);
            }


        }
        #endregion



        #region Events

        /// <summary>A wrapper class for the Events resource.</summary>
        public class Events
        {




            /// <summary>Deletes an event.</summary>
            /// <param name="CalendarId">Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you
            /// want to access the primary calendar of the currently logged in user, use the "primary" keyword.</param>
            ///
            /// <param name="EventId">Event identifier.</param>
            /// <param name="properties">The optional properties for this method.</param>
            public void Delete (string CalendarId, string EventId, gCalendar.Events.EventsDeleteProperties properties= null, string ServiceAccount = null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {

                properties = properties ?? new gCalendar.Events.EventsDeleteProperties();

                mainBase.events.Delete(CalendarId, EventId, properties, ServiceAccount, StandardQueryParams);
            }



            /// <summary>Returns an event.</summary>
            /// <param name="CalendarId">Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you
            /// want to access the primary calendar of the currently logged in user, use the "primary" keyword.</param>
            ///
            /// <param name="EventId">Event identifier.</param>
            /// <param name="properties">The optional properties for this method.</param>
            public Google.Apis.Calendar.v3.Data.Event Get (string CalendarId, string EventId, gCalendar.Events.EventsGetProperties properties= null, string ServiceAccount = null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {

                properties = properties ?? new gCalendar.Events.EventsGetProperties();

                return mainBase.events.Get(CalendarId, EventId, properties, ServiceAccount, StandardQueryParams);
            }



            /// <summary>Imports an event. This operation is used to add a private copy of an existing event to a
            /// calendar.</summary>
            /// <param name="EventBody">The body of the request.</param>
            /// <param name="CalendarId">Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you
            /// want to access the primary calendar of the currently logged in user, use the "primary" keyword.</param>
            /// <param name="properties">The optional properties for this method.</param>
            public Google.Apis.Calendar.v3.Data.Event Import (Google.Apis.Calendar.v3.Data.Event EventBody, string CalendarId, gCalendar.Events.EventsImportProperties properties= null, string ServiceAccount = null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {

                properties = properties ?? new gCalendar.Events.EventsImportProperties();

                return mainBase.events.Import(EventBody, CalendarId, properties, ServiceAccount, StandardQueryParams);
            }



            /// <summary>Creates an event.</summary>
            /// <param name="EventBody">The body of the request.</param>
            /// <param name="CalendarId">Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you
            /// want to access the primary calendar of the currently logged in user, use the "primary" keyword.</param>
            /// <param name="properties">The optional properties for this method.</param>
            public Google.Apis.Calendar.v3.Data.Event Insert (Google.Apis.Calendar.v3.Data.Event EventBody, string CalendarId, gCalendar.Events.EventsInsertProperties properties= null, string ServiceAccount = null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {

                properties = properties ?? new gCalendar.Events.EventsInsertProperties();

                return mainBase.events.Insert(EventBody, CalendarId, properties, ServiceAccount, StandardQueryParams);
            }



            /// <summary>Returns instances of the specified recurring event.</summary>
            /// <param name="CalendarId">Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you
            /// want to access the primary calendar of the currently logged in user, use the "primary" keyword.</param>
            ///
            /// <param name="EventId">Recurring event identifier.</param>
            /// <param name="properties">The optional properties for this method.</param>

            public List<Google.Apis.Calendar.v3.Data.Events> Instances(string CalendarId, string EventId, gCalendar.Events.EventsInstancesProperties properties= null, string ServiceAccount = null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {

                properties = properties ?? new gCalendar.Events.EventsInstancesProperties();
                properties.StartProgressBar = StartProgressBar;
                properties.UpdateProgressBar = UpdateProgressBar;

                return mainBase.events.Instances(CalendarId, EventId, properties, ServiceAccount, StandardQueryParams);
            }

            /// <summary>Returns events on the specified calendar.</summary>
            /// <param name="CalendarId">Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you
            /// want to access the primary calendar of the currently logged in user, use the "primary" keyword.</param>
            /// <param name="properties">The optional properties for this method.</param>

            public List<Google.Apis.Calendar.v3.Data.Events> List(string CalendarId, gCalendar.Events.EventsListProperties properties= null, string ServiceAccount = null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {

                properties = properties ?? new gCalendar.Events.EventsListProperties();
                properties.StartProgressBar = StartProgressBar;
                properties.UpdateProgressBar = UpdateProgressBar;

                return mainBase.events.List(CalendarId, properties, ServiceAccount, StandardQueryParams);
            }

            /// <summary>Moves an event to another calendar, i.e. changes an event's organizer.</summary>
            /// <param name="CalendarId">Calendar identifier of the source calendar where the event currently is on.</param>
            ///
            /// <param name="EventId">Event identifier.</param>
            /// <param name="Destination">Calendar identifier of the target
            /// calendar where the event is to be moved to.</param>
            /// <param name="properties">The optional properties for this method.</param>
            public Google.Apis.Calendar.v3.Data.Event Move (string CalendarId, string EventId, string Destination, gCalendar.Events.EventsMoveProperties properties= null, string ServiceAccount = null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {

                properties = properties ?? new gCalendar.Events.EventsMoveProperties();

                return mainBase.events.Move(CalendarId, EventId, Destination, properties, ServiceAccount, StandardQueryParams);
            }



            /// <summary>Updates an event. This method supports patch semantics.</summary>
            /// <param name="EventBody">The body of the request.</param>
            /// <param name="CalendarId">Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you
            /// want to access the primary calendar of the currently logged in user, use the "primary" keyword.</param>
            ///
            /// <param name="EventId">Event identifier.</param>
            /// <param name="properties">The optional properties for this method.</param>
            public Google.Apis.Calendar.v3.Data.Event Patch (Google.Apis.Calendar.v3.Data.Event EventBody, string CalendarId, string EventId, gCalendar.Events.EventsPatchProperties properties= null, string ServiceAccount = null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {

                properties = properties ?? new gCalendar.Events.EventsPatchProperties();

                return mainBase.events.Patch(EventBody, CalendarId, EventId, properties, ServiceAccount, StandardQueryParams);
            }



            /// <summary>Creates an event based on a simple text string.</summary>
            /// <param name="CalendarId">Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you
            /// want to access the primary calendar of the currently logged in user, use the "primary" keyword.</param>
            ///
            /// <param name="Text">The text describing the event to be created.</param>
            /// <param name="properties">The optional properties for this method.</param>
            public Google.Apis.Calendar.v3.Data.Event QuickAdd (string CalendarId, string Text, gCalendar.Events.EventsQuickAddProperties properties= null, string ServiceAccount = null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {

                properties = properties ?? new gCalendar.Events.EventsQuickAddProperties();

                return mainBase.events.QuickAdd(CalendarId, Text, properties, ServiceAccount, StandardQueryParams);
            }



            /// <summary>Updates an event.</summary>
            /// <param name="EventBody">The body of the request.</param>
            /// <param name="CalendarId">Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you
            /// want to access the primary calendar of the currently logged in user, use the "primary" keyword.</param>
            ///
            /// <param name="EventId">Event identifier.</param>
            /// <param name="properties">The optional properties for this method.</param>
            public Google.Apis.Calendar.v3.Data.Event Update (Google.Apis.Calendar.v3.Data.Event EventBody, string CalendarId, string EventId, gCalendar.Events.EventsUpdateProperties properties= null, string ServiceAccount = null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {

                properties = properties ?? new gCalendar.Events.EventsUpdateProperties();

                return mainBase.events.Update(EventBody, CalendarId, EventId, properties, ServiceAccount, StandardQueryParams);
            }



            /// <summary>Watch for changes to Events resources.</summary>
            /// <param name="ChannelBody">The body of the request.</param>
            /// <param name="CalendarId">Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you
            /// want to access the primary calendar of the currently logged in user, use the "primary" keyword.</param>
            /// <param name="properties">The optional properties for this method.</param>
            public Google.Apis.Calendar.v3.Data.Channel Watch (Google.Apis.Calendar.v3.Data.Channel ChannelBody, string CalendarId, gCalendar.Events.EventsWatchProperties properties= null, string ServiceAccount = null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {

                properties = properties ?? new gCalendar.Events.EventsWatchProperties();

                return mainBase.events.Watch(ChannelBody, CalendarId, properties, ServiceAccount, StandardQueryParams);
            }


        }
        #endregion



        #region Freebusy

        /// <summary>A wrapper class for the Freebusy resource.</summary>
        public class Freebusy
        {




            /// <summary>Returns free/busy information for a set of calendars.</summary>
            /// <param name="FreeBusyRequestBody">The body of the request.</param>
            public Google.Apis.Calendar.v3.Data.FreeBusyResponse Query (Google.Apis.Calendar.v3.Data.FreeBusyRequest FreeBusyRequestBody, string ServiceAccount = null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {

                return mainBase.freebusy.Query(FreeBusyRequestBody, ServiceAccount, StandardQueryParams);
            }


        }
        #endregion



        #region Settings

        /// <summary>A wrapper class for the Settings resource.</summary>
        public class Settings
        {




            /// <summary>Returns a single user setting.</summary>
            /// <param name="Setting">The id of the user setting.</param>
            public Google.Apis.Calendar.v3.Data.Setting Get (string Setting, string ServiceAccount = null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {

                return mainBase.settings.Get(Setting, ServiceAccount, StandardQueryParams);
            }



            /// <summary>Returns all user settings for the authenticated user.</summary>
            /// <param name="properties">The optional properties for this method.</param>

            public List<Google.Apis.Calendar.v3.Data.Settings> List(gCalendar.Settings.SettingsListProperties properties= null, string ServiceAccount = null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {

                properties = properties ?? new gCalendar.Settings.SettingsListProperties();
                properties.StartProgressBar = StartProgressBar;
                properties.UpdateProgressBar = UpdateProgressBar;

                return mainBase.settings.List(properties, ServiceAccount, StandardQueryParams);
            }

            /// <summary>Watch for changes to Settings resources.</summary>
            /// <param name="ChannelBody">The body of the request.</param>
            /// <param name="properties">The optional properties for this method.</param>
            public Google.Apis.Calendar.v3.Data.Channel Watch (Google.Apis.Calendar.v3.Data.Channel ChannelBody, gCalendar.Settings.SettingsWatchProperties properties= null, string ServiceAccount = null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {

                properties = properties ?? new gCalendar.Settings.SettingsWatchProperties();

                return mainBase.settings.Watch(ChannelBody, properties, ServiceAccount, StandardQueryParams);
            }


        }
        #endregion

        #endregion

    }
}



namespace gShell.dotNet
{
    using System;
    using System.Collections.Generic;

    using gShell.dotNet;
    using gShell.dotNet.Utilities.OAuth2;

    using v3 = Google.Apis.Calendar.v3;
    using Data = Google.Apis.Calendar.v3.Data;

    /// <summary>The dotNet gShell version of the calendar api.</summary>
    public class Calendar : ServiceWrapper<v3.CalendarService>, IServiceWrapper<Google.Apis.Services.IClientService>
    {

        protected override bool worksWithGmail { get { return true; } }

        /// <summary>Creates a new v3.Calendar service.</summary>
        /// <param name="domain">The domain to which this service will be authenticated.</param>
        /// <param name="authInfo">The authenticated AuthInfo for this user and domain.</param>
        /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>

        protected override v3.CalendarService CreateNewService(string domain, AuthenticatedUserInfo authInfo, string gShellServiceAccount = null)
        {
            return new v3.CalendarService(OAuth2Base.GetInitializer(domain, authInfo, gShellServiceAccount));
        }

        /// <summary>Returns the api name and version in {name}:{version} format.</summary>
        public override string apiNameAndVersion { get { return "calendar:v3"; } }


        /// <summary>Gets or sets the acl resource class.</summary>
        public Acl acl{ get; set; }

        /// <summary>Gets or sets the calendarList resource class.</summary>
        public CalendarList calendarList{ get; set; }

        /// <summary>Gets or sets the calendars resource class.</summary>
        public Calendars calendars{ get; set; }

        /// <summary>Gets or sets the channels resource class.</summary>
        public Channels channels{ get; set; }

        /// <summary>Gets or sets the colors resource class.</summary>
        public Colors colors{ get; set; }

        /// <summary>Gets or sets the events resource class.</summary>
        public Events events{ get; set; }

        /// <summary>Gets or sets the freebusy resource class.</summary>
        public Freebusy freebusy{ get; set; }

        /// <summary>Gets or sets the settings resource class.</summary>
        public Settings settings{ get; set; }

        public Calendar()
        {

            acl = new Acl();
            calendarList = new CalendarList();
            calendars = new Calendars();
            channels = new Channels();
            colors = new Colors();
            events = new Events();
            freebusy = new Freebusy();
            settings = new Settings();
        }



        /// <summary>The "acl" collection of methods.</summary>
        public class Acl
        {

            /// <summary>Optional parameters for the Acl List method.</summary>
            public class AclListProperties
            {
                /// <summary>Maximum number of entries returned on one result page. By default the value is 100 entries. The page size can never be larger than 250 entries. Optional.</summary>
                public int? MaxResults = null;

                /// <summary>Whether to include deleted ACLs in the result. Deleted ACLs are represented by role equal to "none". Deleted ACLs will always be included if syncToken is provided. Optional. The default is False.</summary>
                public System.Nullable<bool> ShowDeleted = null;

                /// <summary>Token obtained from the nextSyncToken field returned on the last page of results from the previous list request. It makes the result of this list request contain only entries that have changed since then. All entries deleted since the previous list request will always be in the result set and it is not allowed to set showDeleted to False.If the syncToken expires, the server will respond with a 410 GONE response code and the client should clear its storage and perform a full synchronization without any syncToken.Learn more about incremental synchronization.Optional. The default is to return all entries.</summary>
                public string SyncToken = null;

                /// <summary>A delegate that is used to start a progress bar.</summary>
                public Action<string, string> StartProgressBar = null;

                /// <summary>A delegate that is used to update a progress bar.</summary>
                public Action<int, int, string, string> UpdateProgressBar = null;

                /// <summary>A counter for the total number of results to pull when iterating through paged results.</summary>
                public int TotalResults = 0;
            }

            /// <summary>Optional parameters for the Acl Watch method.</summary>
            public class AclWatchProperties
            {
                /// <summary>Maximum number of entries returned on one result page. By default the value is 100 entries. The page size can never be larger than 250 entries. Optional.</summary>
                public int? MaxResults = null;

                /// <summary>Whether to include deleted ACLs in the result. Deleted ACLs are represented by role equal to "none". Deleted ACLs will always be included if syncToken is provided. Optional. The default is False.</summary>
                public System.Nullable<bool> ShowDeleted = null;

                /// <summary>Token obtained from the nextSyncToken field returned on the last page of results from the previous list request. It makes the result of this list request contain only entries that have changed since then. All entries deleted since the previous list request will always be in the result set and it is not allowed to set showDeleted to False.If the syncToken expires, the server will respond with a 410 GONE response code and the client should clear its storage and perform a full synchronization without any syncToken.Learn more about incremental synchronization.Optional. The default is to return all entries.</summary>
                public string SyncToken = null;
            }


            /// <summary>Deletes an access control rule.</summary>
            /// <param name="CalendarId">Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you
            /// want to access the primary calendar of the currently logged in user, use the "primary" keyword.</param>
            ///
            /// <param name="RuleId">ACL rule identifier.</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public void Delete (string CalendarId, string RuleId, string ServiceAccount = null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {
                var request = GetService(ServiceAccount).Acl.Delete(CalendarId, RuleId);

                if (StandardQueryParams != null) {
                    request.Fields = StandardQueryParams.fields;
                    request.QuotaUser = StandardQueryParams.quotaUser;
                    request.UserIp = StandardQueryParams.userIp;
                }



                request.Execute();
            }

            /// <summary>Returns an access control rule.</summary>
            /// <param name="CalendarId">Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you
            /// want to access the primary calendar of the currently logged in user, use the "primary" keyword.</param>
            ///
            /// <param name="RuleId">ACL rule identifier.</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public Google.Apis.Calendar.v3.Data.AclRule Get (string CalendarId, string RuleId, string ServiceAccount = null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {
                var request = GetService(ServiceAccount).Acl.Get(CalendarId, RuleId);

                if (StandardQueryParams != null) {
                    request.Fields = StandardQueryParams.fields;
                    request.QuotaUser = StandardQueryParams.quotaUser;
                    request.UserIp = StandardQueryParams.userIp;
                }



                return request.Execute();
            }

            /// <summary>Creates an access control rule.</summary>
            /// <param name="AclRuleBody">The body of the request.</param>
            /// <param name="CalendarId">Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you
            /// want to access the primary calendar of the currently logged in user, use the "primary" keyword.</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public Google.Apis.Calendar.v3.Data.AclRule Insert (Google.Apis.Calendar.v3.Data.AclRule AclRuleBody, string CalendarId, string ServiceAccount = null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {
                var request = GetService(ServiceAccount).Acl.Insert(AclRuleBody, CalendarId);

                if (StandardQueryParams != null) {
                    request.Fields = StandardQueryParams.fields;
                    request.QuotaUser = StandardQueryParams.quotaUser;
                    request.UserIp = StandardQueryParams.userIp;
                }



                return request.Execute();
            }

            /// <summary>Returns the rules in the access control list for the calendar.</summary>
            /// <param name="CalendarId">Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you
            /// want to access the primary calendar of the currently logged in user, use the "primary" keyword.</param>
            /// <param name="properties">The optional properties for this method.</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public List<Google.Apis.Calendar.v3.Data.Acl> List(
                string CalendarId, AclListProperties properties= null, string ServiceAccount = null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {
                var results = new List<Google.Apis.Calendar.v3.Data.Acl>();

                v3.AclResource.ListRequest request = GetService(ServiceAccount).Acl.List(CalendarId);

                if (StandardQueryParams != null) {
                    request.Fields = StandardQueryParams.fields;
                    request.QuotaUser = StandardQueryParams.quotaUser;
                    request.UserIp = StandardQueryParams.userIp;
                }

                if (properties != null)
                {
                    request.MaxResults = properties.MaxResults;
                    request.ShowDeleted = properties.ShowDeleted;
                    request.SyncToken = properties.SyncToken;

                }

                if (null != properties.StartProgressBar)
                {
                    properties.StartProgressBar("Gathering Acl",
                        string.Format("-Collecting Acl page 1"));
                }

                Google.Apis.Calendar.v3.Data.Acl pagedResult = request.Execute();

                if (pagedResult != null)
                {
                    results.Add(pagedResult);

                    while (!string.IsNullOrWhiteSpace(pagedResult.NextPageToken) &&
                        pagedResult.NextPageToken != request.PageToken &&
                    (properties.TotalResults == 0 || results.Count < properties.TotalResults))
                    {
                        request.PageToken = pagedResult.NextPageToken;

                        if (null != properties.UpdateProgressBar)
                        {
                            properties.UpdateProgressBar(5, 10, "Gathering Acl",
                                    string.Format("-Collecting Acl page {0}",
                                        (results.Count + 1).ToString()));
                        }
                        pagedResult = request.Execute();
                        results.Add(pagedResult);
                    }

                    if (null != properties.UpdateProgressBar)
                    {
                        properties.UpdateProgressBar(1, 2, "Gathering Acl",
                                string.Format("-Returning {0} pages.", results.Count.ToString()));
                    }
                }

                return results;
            }

            /// <summary>Updates an access control rule. This method supports patch semantics.</summary>
            /// <param name="AclRuleBody">The body of the request.</param>
            /// <param name="CalendarId">Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you
            /// want to access the primary calendar of the currently logged in user, use the "primary" keyword.</param>
            ///
            /// <param name="RuleId">ACL rule identifier.</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public Google.Apis.Calendar.v3.Data.AclRule Patch (Google.Apis.Calendar.v3.Data.AclRule AclRuleBody, string CalendarId, string RuleId, string ServiceAccount = null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {
                var request = GetService(ServiceAccount).Acl.Patch(AclRuleBody, CalendarId, RuleId);

                if (StandardQueryParams != null) {
                    request.Fields = StandardQueryParams.fields;
                    request.QuotaUser = StandardQueryParams.quotaUser;
                    request.UserIp = StandardQueryParams.userIp;
                }



                return request.Execute();
            }

            /// <summary>Updates an access control rule.</summary>
            /// <param name="AclRuleBody">The body of the request.</param>
            /// <param name="CalendarId">Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you
            /// want to access the primary calendar of the currently logged in user, use the "primary" keyword.</param>
            ///
            /// <param name="RuleId">ACL rule identifier.</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public Google.Apis.Calendar.v3.Data.AclRule Update (Google.Apis.Calendar.v3.Data.AclRule AclRuleBody, string CalendarId, string RuleId, string ServiceAccount = null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {
                var request = GetService(ServiceAccount).Acl.Update(AclRuleBody, CalendarId, RuleId);

                if (StandardQueryParams != null) {
                    request.Fields = StandardQueryParams.fields;
                    request.QuotaUser = StandardQueryParams.quotaUser;
                    request.UserIp = StandardQueryParams.userIp;
                }



                return request.Execute();
            }

            /// <summary>Watch for changes to ACL resources.</summary>
            /// <param name="ChannelBody">The body of the request.</param>
            /// <param name="CalendarId">Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you
            /// want to access the primary calendar of the currently logged in user, use the "primary" keyword.</param>
            /// <param name="properties">The optional properties for this method.</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public Google.Apis.Calendar.v3.Data.Channel Watch (Google.Apis.Calendar.v3.Data.Channel ChannelBody, string CalendarId, AclWatchProperties properties= null, string ServiceAccount = null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {
                var request = GetService(ServiceAccount).Acl.Watch(ChannelBody, CalendarId);

                if (StandardQueryParams != null) {
                    request.Fields = StandardQueryParams.fields;
                    request.QuotaUser = StandardQueryParams.quotaUser;
                    request.UserIp = StandardQueryParams.userIp;
                }

                if (properties != null)    {
                    request.MaxResults = properties.MaxResults;
                    request.ShowDeleted = properties.ShowDeleted;
                    request.SyncToken = properties.SyncToken;
                }

                return request.Execute();
            }

        }

        /// <summary>The "calendarList" collection of methods.</summary>
        public class CalendarList
        {

            /// <summary>Optional parameters for the CalendarList Insert method.</summary>
            public class CalendarListInsertProperties
            {
                /// <summary>Whether to use the foregroundColor and backgroundColor fields to write the calendar colors (RGB). If this feature is used, the index-based colorId field will be set to the best matching option automatically. Optional. The default is False.</summary>
                public System.Nullable<bool> ColorRgbFormat = null;
            }

            /// <summary>Optional parameters for the CalendarList List method.</summary>
            public class CalendarListListProperties
            {
                /// <summary>Maximum number of entries returned on one result page. By default the value is 100 entries. The page size can never be larger than 250 entries. Optional.</summary>
                public int? MaxResults = null;

                /// <summary>The minimum access role for the user in the returned entries. Optional. The default is no restriction.</summary>
                public v3.CalendarListResource.ListRequest.MinAccessRoleEnum?MinAccessRole = null;

                /// <summary>Whether to include deleted calendar list entries in the result. Optional. The default is False.</summary>
                public System.Nullable<bool> ShowDeleted = null;

                /// <summary>Whether to show hidden entries. Optional. The default is False.</summary>
                public System.Nullable<bool> ShowHidden = null;

                /// <summary>Token obtained from the nextSyncToken field returned on the last page of results from the previous list request. It makes the result of this list request contain only entries that have changed since then. If only read-only fields such as calendar properties or ACLs have changed, the entry won't be returned. All entries deleted and hidden since the previous list request will always be in the result set and it is not allowed to set showDeleted neither showHidden to False.To ensure client state consistency minAccessRole query parameter cannot be specified together with nextSyncToken.If the syncToken expires, the server will respond with a 410 GONE response code and the client should clear its storage and perform a full synchronization without any syncToken.Learn more about incremental synchronization.Optional. The default is to return all entries.</summary>
                public string SyncToken = null;

                /// <summary>A delegate that is used to start a progress bar.</summary>
                public Action<string, string> StartProgressBar = null;

                /// <summary>A delegate that is used to update a progress bar.</summary>
                public Action<int, int, string, string> UpdateProgressBar = null;

                /// <summary>A counter for the total number of results to pull when iterating through paged results.</summary>
                public int TotalResults = 0;
            }

            /// <summary>Optional parameters for the CalendarList Patch method.</summary>
            public class CalendarListPatchProperties
            {
                /// <summary>Whether to use the foregroundColor and backgroundColor fields to write the calendar colors (RGB). If this feature is used, the index-based colorId field will be set to the best matching option automatically. Optional. The default is False.</summary>
                public System.Nullable<bool> ColorRgbFormat = null;
            }

            /// <summary>Optional parameters for the CalendarList Update method.</summary>
            public class CalendarListUpdateProperties
            {
                /// <summary>Whether to use the foregroundColor and backgroundColor fields to write the calendar colors (RGB). If this feature is used, the index-based colorId field will be set to the best matching option automatically. Optional. The default is False.</summary>
                public System.Nullable<bool> ColorRgbFormat = null;
            }

            /// <summary>Optional parameters for the CalendarList Watch method.</summary>
            public class CalendarListWatchProperties
            {
                /// <summary>Maximum number of entries returned on one result page. By default the value is 100 entries. The page size can never be larger than 250 entries. Optional.</summary>
                public int? MaxResults = null;

                /// <summary>The minimum access role for the user in the returned entries. Optional. The default is no restriction.</summary>
                public v3.CalendarListResource.WatchRequest.MinAccessRoleEnum?MinAccessRole = null;

                /// <summary>Whether to include deleted calendar list entries in the result. Optional. The default is False.</summary>
                public System.Nullable<bool> ShowDeleted = null;

                /// <summary>Whether to show hidden entries. Optional. The default is False.</summary>
                public System.Nullable<bool> ShowHidden = null;

                /// <summary>Token obtained from the nextSyncToken field returned on the last page of results from the previous list request. It makes the result of this list request contain only entries that have changed since then. If only read-only fields such as calendar properties or ACLs have changed, the entry won't be returned. All entries deleted and hidden since the previous list request will always be in the result set and it is not allowed to set showDeleted neither showHidden to False.To ensure client state consistency minAccessRole query parameter cannot be specified together with nextSyncToken.If the syncToken expires, the server will respond with a 410 GONE response code and the client should clear its storage and perform a full synchronization without any syncToken.Learn more about incremental synchronization.Optional. The default is to return all entries.</summary>
                public string SyncToken = null;
            }


            /// <summary>Deletes an entry on the user's calendar list.</summary>
            /// <param name="CalendarId">Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you
            /// want to access the primary calendar of the currently logged in user, use the "primary" keyword.</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public void Delete (string CalendarId, string ServiceAccount = null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {
                var request = GetService(ServiceAccount).CalendarList.Delete(CalendarId);

                if (StandardQueryParams != null) {
                    request.Fields = StandardQueryParams.fields;
                    request.QuotaUser = StandardQueryParams.quotaUser;
                    request.UserIp = StandardQueryParams.userIp;
                }



                request.Execute();
            }

            /// <summary>Returns an entry on the user's calendar list.</summary>
            /// <param name="CalendarId">Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you
            /// want to access the primary calendar of the currently logged in user, use the "primary" keyword.</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public Google.Apis.Calendar.v3.Data.CalendarListEntry Get (string CalendarId, string ServiceAccount = null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {
                var request = GetService(ServiceAccount).CalendarList.Get(CalendarId);

                if (StandardQueryParams != null) {
                    request.Fields = StandardQueryParams.fields;
                    request.QuotaUser = StandardQueryParams.quotaUser;
                    request.UserIp = StandardQueryParams.userIp;
                }



                return request.Execute();
            }

            /// <summary>Adds an entry to the user's calendar list.</summary>
            /// <param name="CalendarListEntryBody">The body of the request.</param>
            /// <param name="properties">The optional properties for this method.</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public Google.Apis.Calendar.v3.Data.CalendarListEntry Insert (Google.Apis.Calendar.v3.Data.CalendarListEntry CalendarListEntryBody, CalendarListInsertProperties properties= null, string ServiceAccount = null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {
                var request = GetService(ServiceAccount).CalendarList.Insert(CalendarListEntryBody);

                if (StandardQueryParams != null) {
                    request.Fields = StandardQueryParams.fields;
                    request.QuotaUser = StandardQueryParams.quotaUser;
                    request.UserIp = StandardQueryParams.userIp;
                }

                if (properties != null)    {
                    request.ColorRgbFormat = properties.ColorRgbFormat;
                }

                return request.Execute();
            }

            /// <summary>Returns entries on the user's calendar list.</summary>
            /// <param name="properties">The optional properties for this method.</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public List<Google.Apis.Calendar.v3.Data.CalendarList> List(
                CalendarListListProperties properties= null, string ServiceAccount = null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {
                var results = new List<Google.Apis.Calendar.v3.Data.CalendarList>();

                v3.CalendarListResource.ListRequest request = GetService(ServiceAccount).CalendarList.List();

                if (StandardQueryParams != null) {
                    request.Fields = StandardQueryParams.fields;
                    request.QuotaUser = StandardQueryParams.quotaUser;
                    request.UserIp = StandardQueryParams.userIp;
                }

                if (properties != null)
                {
                    request.MaxResults = properties.MaxResults;
                    request.MinAccessRole = properties.MinAccessRole;
                    request.ShowDeleted = properties.ShowDeleted;
                    request.ShowHidden = properties.ShowHidden;
                    request.SyncToken = properties.SyncToken;

                }

                if (null != properties.StartProgressBar)
                {
                    properties.StartProgressBar("Gathering CalendarList",
                        string.Format("-Collecting CalendarList page 1"));
                }

                Google.Apis.Calendar.v3.Data.CalendarList pagedResult = request.Execute();

                if (pagedResult != null)
                {
                    results.Add(pagedResult);

                    while (!string.IsNullOrWhiteSpace(pagedResult.NextPageToken) &&
                        pagedResult.NextPageToken != request.PageToken &&
                    (properties.TotalResults == 0 || results.Count < properties.TotalResults))
                    {
                        request.PageToken = pagedResult.NextPageToken;

                        if (null != properties.UpdateProgressBar)
                        {
                            properties.UpdateProgressBar(5, 10, "Gathering CalendarList",
                                    string.Format("-Collecting CalendarList page {0}",
                                        (results.Count + 1).ToString()));
                        }
                        pagedResult = request.Execute();
                        results.Add(pagedResult);
                    }

                    if (null != properties.UpdateProgressBar)
                    {
                        properties.UpdateProgressBar(1, 2, "Gathering CalendarList",
                                string.Format("-Returning {0} pages.", results.Count.ToString()));
                    }
                }

                return results;
            }

            /// <summary>Updates an entry on the user's calendar list. This method supports patch semantics.</summary>
            /// <param name="CalendarListEntryBody">The body of the request.</param>
            /// <param name="CalendarId">Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you
            /// want to access the primary calendar of the currently logged in user, use the "primary" keyword.</param>
            /// <param name="properties">The optional properties for this method.</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public Google.Apis.Calendar.v3.Data.CalendarListEntry Patch (Google.Apis.Calendar.v3.Data.CalendarListEntry CalendarListEntryBody, string CalendarId, CalendarListPatchProperties properties= null, string ServiceAccount = null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {
                var request = GetService(ServiceAccount).CalendarList.Patch(CalendarListEntryBody, CalendarId);

                if (StandardQueryParams != null) {
                    request.Fields = StandardQueryParams.fields;
                    request.QuotaUser = StandardQueryParams.quotaUser;
                    request.UserIp = StandardQueryParams.userIp;
                }

                if (properties != null)    {
                    request.ColorRgbFormat = properties.ColorRgbFormat;
                }

                return request.Execute();
            }

            /// <summary>Updates an entry on the user's calendar list.</summary>
            /// <param name="CalendarListEntryBody">The body of the request.</param>
            /// <param name="CalendarId">Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you
            /// want to access the primary calendar of the currently logged in user, use the "primary" keyword.</param>
            /// <param name="properties">The optional properties for this method.</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public Google.Apis.Calendar.v3.Data.CalendarListEntry Update (Google.Apis.Calendar.v3.Data.CalendarListEntry CalendarListEntryBody, string CalendarId, CalendarListUpdateProperties properties= null, string ServiceAccount = null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {
                var request = GetService(ServiceAccount).CalendarList.Update(CalendarListEntryBody, CalendarId);

                if (StandardQueryParams != null) {
                    request.Fields = StandardQueryParams.fields;
                    request.QuotaUser = StandardQueryParams.quotaUser;
                    request.UserIp = StandardQueryParams.userIp;
                }

                if (properties != null)    {
                    request.ColorRgbFormat = properties.ColorRgbFormat;
                }

                return request.Execute();
            }

            /// <summary>Watch for changes to CalendarList resources.</summary>
            /// <param name="ChannelBody">The body of the request.</param>
            /// <param name="properties">The optional properties for this method.</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public Google.Apis.Calendar.v3.Data.Channel Watch (Google.Apis.Calendar.v3.Data.Channel ChannelBody, CalendarListWatchProperties properties= null, string ServiceAccount = null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {
                var request = GetService(ServiceAccount).CalendarList.Watch(ChannelBody);

                if (StandardQueryParams != null) {
                    request.Fields = StandardQueryParams.fields;
                    request.QuotaUser = StandardQueryParams.quotaUser;
                    request.UserIp = StandardQueryParams.userIp;
                }

                if (properties != null)    {
                    request.MaxResults = properties.MaxResults;
                    request.MinAccessRole = properties.MinAccessRole;
                    request.ShowDeleted = properties.ShowDeleted;
                    request.ShowHidden = properties.ShowHidden;
                    request.SyncToken = properties.SyncToken;
                }

                return request.Execute();
            }

        }

        /// <summary>The "calendars" collection of methods.</summary>
        public class Calendars
        {




            /// <summary>Clears a primary calendar. This operation deletes all events associated with the primary
            /// calendar of an account.</summary>
            /// <param name="CalendarId">Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you
            /// want to access the primary calendar of the currently logged in user, use the "primary" keyword.</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public void Clear (string CalendarId, string ServiceAccount = null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {
                var request = GetService(ServiceAccount).Calendars.Clear(CalendarId);

                if (StandardQueryParams != null) {
                    request.Fields = StandardQueryParams.fields;
                    request.QuotaUser = StandardQueryParams.quotaUser;
                    request.UserIp = StandardQueryParams.userIp;
                }



                request.Execute();
            }

            /// <summary>Deletes a secondary calendar. Use calendars.clear for clearing all events on primary
            /// calendars.</summary>
            /// <param name="CalendarId">Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you
            /// want to access the primary calendar of the currently logged in user, use the "primary" keyword.</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public void Delete (string CalendarId, string ServiceAccount = null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {
                var request = GetService(ServiceAccount).Calendars.Delete(CalendarId);

                if (StandardQueryParams != null) {
                    request.Fields = StandardQueryParams.fields;
                    request.QuotaUser = StandardQueryParams.quotaUser;
                    request.UserIp = StandardQueryParams.userIp;
                }



                request.Execute();
            }

            /// <summary>Returns metadata for a calendar.</summary>
            /// <param name="CalendarId">Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you
            /// want to access the primary calendar of the currently logged in user, use the "primary" keyword.</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public Google.Apis.Calendar.v3.Data.Calendar Get (string CalendarId, string ServiceAccount = null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {
                var request = GetService(ServiceAccount).Calendars.Get(CalendarId);

                if (StandardQueryParams != null) {
                    request.Fields = StandardQueryParams.fields;
                    request.QuotaUser = StandardQueryParams.quotaUser;
                    request.UserIp = StandardQueryParams.userIp;
                }



                return request.Execute();
            }

            /// <summary>Creates a secondary calendar.</summary>
            /// <param name="CalendarBody">The body of the request.</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public Google.Apis.Calendar.v3.Data.Calendar Insert (Google.Apis.Calendar.v3.Data.Calendar CalendarBody, string ServiceAccount = null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {
                var request = GetService(ServiceAccount).Calendars.Insert(CalendarBody);

                if (StandardQueryParams != null) {
                    request.Fields = StandardQueryParams.fields;
                    request.QuotaUser = StandardQueryParams.quotaUser;
                    request.UserIp = StandardQueryParams.userIp;
                }



                return request.Execute();
            }

            /// <summary>Updates metadata for a calendar. This method supports patch semantics.</summary>
            /// <param name="CalendarBody">The body of the request.</param>
            /// <param name="CalendarId">Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you
            /// want to access the primary calendar of the currently logged in user, use the "primary" keyword.</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public Google.Apis.Calendar.v3.Data.Calendar Patch (Google.Apis.Calendar.v3.Data.Calendar CalendarBody, string CalendarId, string ServiceAccount = null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {
                var request = GetService(ServiceAccount).Calendars.Patch(CalendarBody, CalendarId);

                if (StandardQueryParams != null) {
                    request.Fields = StandardQueryParams.fields;
                    request.QuotaUser = StandardQueryParams.quotaUser;
                    request.UserIp = StandardQueryParams.userIp;
                }



                return request.Execute();
            }

            /// <summary>Updates metadata for a calendar.</summary>
            /// <param name="CalendarBody">The body of the request.</param>
            /// <param name="CalendarId">Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you
            /// want to access the primary calendar of the currently logged in user, use the "primary" keyword.</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public Google.Apis.Calendar.v3.Data.Calendar Update (Google.Apis.Calendar.v3.Data.Calendar CalendarBody, string CalendarId, string ServiceAccount = null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {
                var request = GetService(ServiceAccount).Calendars.Update(CalendarBody, CalendarId);

                if (StandardQueryParams != null) {
                    request.Fields = StandardQueryParams.fields;
                    request.QuotaUser = StandardQueryParams.quotaUser;
                    request.UserIp = StandardQueryParams.userIp;
                }



                return request.Execute();
            }

        }

        /// <summary>The "channels" collection of methods.</summary>
        public class Channels
        {




            /// <summary>Stop watching resources through this channel</summary>
            /// <param name="ChannelBody">The body of the request.</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public void Stop (Google.Apis.Calendar.v3.Data.Channel ChannelBody, string ServiceAccount = null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {
                var request = GetService(ServiceAccount).Channels.Stop(ChannelBody);

                if (StandardQueryParams != null) {
                    request.Fields = StandardQueryParams.fields;
                    request.QuotaUser = StandardQueryParams.quotaUser;
                    request.UserIp = StandardQueryParams.userIp;
                }



                request.Execute();
            }

        }

        /// <summary>The "colors" collection of methods.</summary>
        public class Colors
        {




            /// <summary>Returns the color definitions for calendars and events.</summary>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public Google.Apis.Calendar.v3.Data.Colors Get (string ServiceAccount, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {
                var request = GetService(ServiceAccount).Colors.Get();

                if (StandardQueryParams != null) {
                    request.Fields = StandardQueryParams.fields;
                    request.QuotaUser = StandardQueryParams.quotaUser;
                    request.UserIp = StandardQueryParams.userIp;
                }



                return request.Execute();
            }

        }

        /// <summary>The "events" collection of methods.</summary>
        public class Events
        {

            /// <summary>Optional parameters for the Events Delete method.</summary>
            public class EventsDeleteProperties
            {
                /// <summary>Whether to send notifications about the deletion of the event. Optional. The default is False.</summary>
                public System.Nullable<bool> SendNotifications = null;
            }

            /// <summary>Optional parameters for the Events Get method.</summary>
            public class EventsGetProperties
            {
                /// <summary>Whether to always include a value in the email field for the organizer, creator and attendees, even if no real email is available (i.e. a generated, non-working value will be provided). The use of this option is discouraged and should only be used by clients which cannot handle the absence of an email address value in the mentioned places. Optional. The default is False.</summary>
                public System.Nullable<bool> AlwaysIncludeEmail = null;

                /// <summary>The maximum number of attendees to include in the response. If there are more than the specified number of attendees, only the participant is returned. Optional.</summary>
                public System.Nullable<int> MaxAttendees = null;

                /// <summary>Time zone used in the response. Optional. The default is the time zone of the calendar.</summary>
                public string TimeZone = null;
            }

            /// <summary>Optional parameters for the Events Import method.</summary>
            public class EventsImportProperties
            {
                /// <summary>Whether API client performing operation supports event attachments. Optional. The default is False.</summary>
                public System.Nullable<bool> SupportsAttachments = null;
            }

            /// <summary>Optional parameters for the Events Insert method.</summary>
            public class EventsInsertProperties
            {
                /// <summary>The maximum number of attendees to include in the response. If there are more than the specified number of attendees, only the participant is returned. Optional.</summary>
                public System.Nullable<int> MaxAttendees = null;

                /// <summary>Whether to send notifications about the creation of the new event. Optional. The default is False.</summary>
                public System.Nullable<bool> SendNotifications = null;

                /// <summary>Whether API client performing operation supports event attachments. Optional. The default is False.</summary>
                public System.Nullable<bool> SupportsAttachments = null;
            }

            /// <summary>Optional parameters for the Events Instances method.</summary>
            public class EventsInstancesProperties
            {
                /// <summary>Whether to always include a value in the email field for the organizer, creator and attendees, even if no real email is available (i.e. a generated, non-working value will be provided). The use of this option is discouraged and should only be used by clients which cannot handle the absence of an email address value in the mentioned places. Optional. The default is False.</summary>
                public System.Nullable<bool> AlwaysIncludeEmail = null;

                /// <summary>The maximum number of attendees to include in the response. If there are more than the specified number of attendees, only the participant is returned. Optional.</summary>
                public System.Nullable<int> MaxAttendees = null;

                /// <summary>Maximum number of events returned on one result page. By default the value is 250 events. The page size can never be larger than 2500 events. Optional.</summary>
                public int? MaxResults = null;

                /// <summary>The original start time of the instance in the result. Optional.</summary>
                public string OriginalStart = null;

                /// <summary>Whether to include deleted events (with status equals "cancelled") in the result. Cancelled instances of recurring events will still be included if singleEvents is False. Optional. The default is False.</summary>
                public System.Nullable<bool> ShowDeleted = null;

                /// <summary>Upper bound (exclusive) for an event's start time to filter by. Optional. The default is not to filter by start time. Must be an RFC3339 timestamp with mandatory time zone offset.</summary>
                public System.Nullable<System.DateTime> TimeMax = null;

                /// <summary>Lower bound (inclusive) for an event's end time to filter by. Optional. The default is not to filter by end time. Must be an RFC3339 timestamp with mandatory time zone offset.</summary>
                public System.Nullable<System.DateTime> TimeMin = null;

                /// <summary>Time zone used in the response. Optional. The default is the time zone of the calendar.</summary>
                public string TimeZone = null;

                /// <summary>A delegate that is used to start a progress bar.</summary>
                public Action<string, string> StartProgressBar = null;

                /// <summary>A delegate that is used to update a progress bar.</summary>
                public Action<int, int, string, string> UpdateProgressBar = null;

                /// <summary>A counter for the total number of results to pull when iterating through paged results.</summary>
                public int TotalResults = 0;
            }

            /// <summary>Optional parameters for the Events List method.</summary>
            public class EventsListProperties
            {
                /// <summary>Whether to always include a value in the email field for the organizer, creator and attendees, even if no real email is available (i.e. a generated, non-working value will be provided). The use of this option is discouraged and should only be used by clients which cannot handle the absence of an email address value in the mentioned places. Optional. The default is False.</summary>
                public System.Nullable<bool> AlwaysIncludeEmail = null;

                /// <summary>Specifies event ID in the iCalendar format to be included in the response. Optional.</summary>
                public string ICalUID = null;

                /// <summary>The maximum number of attendees to include in the response. If there are more than the specified number of attendees, only the participant is returned. Optional.</summary>
                public System.Nullable<int> MaxAttendees = null;

                /// <summary>Maximum number of events returned on one result page. By default the value is 250 events. The page size can never be larger than 2500 events. Optional.</summary>
                public int? MaxResults = null;

                /// <summary>The order of the events returned in the result. Optional. The default is an unspecified, stable order.</summary>
                public v3.EventsResource.ListRequest.OrderByEnum?OrderBy = null;

                /// <summary>Extended properties constraint specified as propertyName=value. Matches only private properties. This parameter might be repeated multiple times to return events that match all given constraints.</summary>
                public Google.Apis.Util.Repeatable<string>PrivateExtendedProperty = null;

                /// <summary>Free text search terms to find events that match these terms in any field, except for extended properties. Optional.</summary>
                public string Q = null;

                /// <summary>Extended properties constraint specified as propertyName=value. Matches only shared properties. This parameter might be repeated multiple times to return events that match all given constraints.</summary>
                public Google.Apis.Util.Repeatable<string>SharedExtendedProperty = null;

                /// <summary>Whether to include deleted events (with status equals "cancelled") in the result. Cancelled instances of recurring events (but not the underlying recurring event) will still be included if showDeleted and singleEvents are both False. If showDeleted and singleEvents are both True, only single instances of deleted events (but not the underlying recurring events) are returned. Optional. The default is False.</summary>
                public System.Nullable<bool> ShowDeleted = null;

                /// <summary>Whether to include hidden invitations in the result. Optional. The default is False.</summary>
                public System.Nullable<bool> ShowHiddenInvitations = null;

                /// <summary>Whether to expand recurring events into instances and only return single one-off events and instances of recurring events, but not the underlying recurring events themselves. Optional. The default is False.</summary>
                public System.Nullable<bool> SingleEvents = null;

                /// <summary>Token obtained from the nextSyncToken field returned on the last page of results from the previous list request. It makes the result of this list request contain only entries that have changed since then. All events deleted since the previous list request will always be in the result set and it is not allowed to set showDeleted to False.There are several query parameters that cannot be specified together with nextSyncToken to ensure consistency of the client state.These are:- iCalUID- orderBy- privateExtendedProperty- q- sharedExtendedProperty- timeMin- timeMax- updatedMin If the syncToken expires, the server will respond with a 410 GONE response code and the client should clear its storage and perform a full synchronization without any syncToken.Learn more about incremental synchronization.Optional. The default is to return all entries.</summary>
                public string SyncToken = null;

                /// <summary>Upper bound (exclusive) for an event's start time to filter by. Optional. The default is not to filter by start time. Must be an RFC3339 timestamp with mandatory time zone offset, e.g., 2011-06-03T10:00:00-07:00, 2011-06-03T10:00:00Z. Milliseconds may be provided but will be ignored.</summary>
                public System.Nullable<System.DateTime> TimeMax = null;

                /// <summary>Lower bound (inclusive) for an event's end time to filter by. Optional. The default is not to filter by end time. Must be an RFC3339 timestamp with mandatory time zone offset, e.g., 2011-06-03T10:00:00-07:00, 2011-06-03T10:00:00Z. Milliseconds may be provided but will be ignored.</summary>
                public System.Nullable<System.DateTime> TimeMin = null;

                /// <summary>Time zone used in the response. Optional. The default is the time zone of the calendar.</summary>
                public string TimeZone = null;

                /// <summary>Lower bound for an event's last modification time (as a RFC3339 timestamp) to filter by. When specified, entries deleted since this time will always be included regardless of showDeleted. Optional. The default is not to filter by last modification time.</summary>
                public System.Nullable<System.DateTime> UpdatedMin = null;

                /// <summary>A delegate that is used to start a progress bar.</summary>
                public Action<string, string> StartProgressBar = null;

                /// <summary>A delegate that is used to update a progress bar.</summary>
                public Action<int, int, string, string> UpdateProgressBar = null;

                /// <summary>A counter for the total number of results to pull when iterating through paged results.</summary>
                public int TotalResults = 0;
            }

            /// <summary>Optional parameters for the Events Move method.</summary>
            public class EventsMoveProperties
            {
                /// <summary>Whether to send notifications about the change of the event's organizer. Optional. The default is False.</summary>
                public System.Nullable<bool> SendNotifications = null;
            }

            /// <summary>Optional parameters for the Events Patch method.</summary>
            public class EventsPatchProperties
            {
                /// <summary>Whether to always include a value in the email field for the organizer, creator and attendees, even if no real email is available (i.e. a generated, non-working value will be provided). The use of this option is discouraged and should only be used by clients which cannot handle the absence of an email address value in the mentioned places. Optional. The default is False.</summary>
                public System.Nullable<bool> AlwaysIncludeEmail = null;

                /// <summary>The maximum number of attendees to include in the response. If there are more than the specified number of attendees, only the participant is returned. Optional.</summary>
                public System.Nullable<int> MaxAttendees = null;

                /// <summary>Whether to send notifications about the event update (e.g. attendee's responses, title changes, etc.). Optional. The default is False.</summary>
                public System.Nullable<bool> SendNotifications = null;

                /// <summary>Whether API client performing operation supports event attachments. Optional. The default is False.</summary>
                public System.Nullable<bool> SupportsAttachments = null;
            }

            /// <summary>Optional parameters for the Events QuickAdd method.</summary>
            public class EventsQuickAddProperties
            {
                /// <summary>Whether to send notifications about the creation of the event. Optional. The default is False.</summary>
                public System.Nullable<bool> SendNotifications = null;
            }

            /// <summary>Optional parameters for the Events Update method.</summary>
            public class EventsUpdateProperties
            {
                /// <summary>Whether to always include a value in the email field for the organizer, creator and attendees, even if no real email is available (i.e. a generated, non-working value will be provided). The use of this option is discouraged and should only be used by clients which cannot handle the absence of an email address value in the mentioned places. Optional. The default is False.</summary>
                public System.Nullable<bool> AlwaysIncludeEmail = null;

                /// <summary>The maximum number of attendees to include in the response. If there are more than the specified number of attendees, only the participant is returned. Optional.</summary>
                public System.Nullable<int> MaxAttendees = null;

                /// <summary>Whether to send notifications about the event update (e.g. attendee's responses, title changes, etc.). Optional. The default is False.</summary>
                public System.Nullable<bool> SendNotifications = null;

                /// <summary>Whether API client performing operation supports event attachments. Optional. The default is False.</summary>
                public System.Nullable<bool> SupportsAttachments = null;
            }

            /// <summary>Optional parameters for the Events Watch method.</summary>
            public class EventsWatchProperties
            {
                /// <summary>Whether to always include a value in the email field for the organizer, creator and attendees, even if no real email is available (i.e. a generated, non-working value will be provided). The use of this option is discouraged and should only be used by clients which cannot handle the absence of an email address value in the mentioned places. Optional. The default is False.</summary>
                public System.Nullable<bool> AlwaysIncludeEmail = null;

                /// <summary>Specifies event ID in the iCalendar format to be included in the response. Optional.</summary>
                public string ICalUID = null;

                /// <summary>The maximum number of attendees to include in the response. If there are more than the specified number of attendees, only the participant is returned. Optional.</summary>
                public System.Nullable<int> MaxAttendees = null;

                /// <summary>Maximum number of events returned on one result page. By default the value is 250 events. The page size can never be larger than 2500 events. Optional.</summary>
                public int? MaxResults = null;

                /// <summary>The order of the events returned in the result. Optional. The default is an unspecified, stable order.</summary>
                public v3.EventsResource.WatchRequest.OrderByEnum?OrderBy = null;

                /// <summary>Extended properties constraint specified as propertyName=value. Matches only private properties. This parameter might be repeated multiple times to return events that match all given constraints.</summary>
                public Google.Apis.Util.Repeatable<string>PrivateExtendedProperty = null;

                /// <summary>Free text search terms to find events that match these terms in any field, except for extended properties. Optional.</summary>
                public string Q = null;

                /// <summary>Extended properties constraint specified as propertyName=value. Matches only shared properties. This parameter might be repeated multiple times to return events that match all given constraints.</summary>
                public Google.Apis.Util.Repeatable<string>SharedExtendedProperty = null;

                /// <summary>Whether to include deleted events (with status equals "cancelled") in the result. Cancelled instances of recurring events (but not the underlying recurring event) will still be included if showDeleted and singleEvents are both False. If showDeleted and singleEvents are both True, only single instances of deleted events (but not the underlying recurring events) are returned. Optional. The default is False.</summary>
                public System.Nullable<bool> ShowDeleted = null;

                /// <summary>Whether to include hidden invitations in the result. Optional. The default is False.</summary>
                public System.Nullable<bool> ShowHiddenInvitations = null;

                /// <summary>Whether to expand recurring events into instances and only return single one-off events and instances of recurring events, but not the underlying recurring events themselves. Optional. The default is False.</summary>
                public System.Nullable<bool> SingleEvents = null;

                /// <summary>Token obtained from the nextSyncToken field returned on the last page of results from the previous list request. It makes the result of this list request contain only entries that have changed since then. All events deleted since the previous list request will always be in the result set and it is not allowed to set showDeleted to False.There are several query parameters that cannot be specified together with nextSyncToken to ensure consistency of the client state.These are:- iCalUID- orderBy- privateExtendedProperty- q- sharedExtendedProperty- timeMin- timeMax- updatedMin If the syncToken expires, the server will respond with a 410 GONE response code and the client should clear its storage and perform a full synchronization without any syncToken.Learn more about incremental synchronization.Optional. The default is to return all entries.</summary>
                public string SyncToken = null;

                /// <summary>Upper bound (exclusive) for an event's start time to filter by. Optional. The default is not to filter by start time. Must be an RFC3339 timestamp with mandatory time zone offset, e.g., 2011-06-03T10:00:00-07:00, 2011-06-03T10:00:00Z. Milliseconds may be provided but will be ignored.</summary>
                public System.Nullable<System.DateTime> TimeMax = null;

                /// <summary>Lower bound (inclusive) for an event's end time to filter by. Optional. The default is not to filter by end time. Must be an RFC3339 timestamp with mandatory time zone offset, e.g., 2011-06-03T10:00:00-07:00, 2011-06-03T10:00:00Z. Milliseconds may be provided but will be ignored.</summary>
                public System.Nullable<System.DateTime> TimeMin = null;

                /// <summary>Time zone used in the response. Optional. The default is the time zone of the calendar.</summary>
                public string TimeZone = null;

                /// <summary>Lower bound for an event's last modification time (as a RFC3339 timestamp) to filter by. When specified, entries deleted since this time will always be included regardless of showDeleted. Optional. The default is not to filter by last modification time.</summary>
                public System.Nullable<System.DateTime> UpdatedMin = null;
            }


            /// <summary>Deletes an event.</summary>
            /// <param name="CalendarId">Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you
            /// want to access the primary calendar of the currently logged in user, use the "primary" keyword.</param>
            ///
            /// <param name="EventId">Event identifier.</param>
            /// <param name="properties">The optional properties for this method.</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public void Delete (string CalendarId, string EventId, EventsDeleteProperties properties= null, string ServiceAccount = null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {
                var request = GetService(ServiceAccount).Events.Delete(CalendarId, EventId);

                if (StandardQueryParams != null) {
                    request.Fields = StandardQueryParams.fields;
                    request.QuotaUser = StandardQueryParams.quotaUser;
                    request.UserIp = StandardQueryParams.userIp;
                }

                if (properties != null)    {
                    request.SendNotifications = properties.SendNotifications;
                }

                request.Execute();
            }

            /// <summary>Returns an event.</summary>
            /// <param name="CalendarId">Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you
            /// want to access the primary calendar of the currently logged in user, use the "primary" keyword.</param>
            ///
            /// <param name="EventId">Event identifier.</param>
            /// <param name="properties">The optional properties for this method.</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public Google.Apis.Calendar.v3.Data.Event Get (string CalendarId, string EventId, EventsGetProperties properties= null, string ServiceAccount = null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {
                var request = GetService(ServiceAccount).Events.Get(CalendarId, EventId);

                if (StandardQueryParams != null) {
                    request.Fields = StandardQueryParams.fields;
                    request.QuotaUser = StandardQueryParams.quotaUser;
                    request.UserIp = StandardQueryParams.userIp;
                }

                if (properties != null)    {
                    request.AlwaysIncludeEmail = properties.AlwaysIncludeEmail;
                    request.MaxAttendees = properties.MaxAttendees;
                    request.TimeZone = properties.TimeZone;
                }

                return request.Execute();
            }

            /// <summary>Imports an event. This operation is used to add a private copy of an existing event to a
            /// calendar.</summary>
            /// <param name="EventBody">The body of the request.</param>
            /// <param name="CalendarId">Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you
            /// want to access the primary calendar of the currently logged in user, use the "primary" keyword.</param>
            /// <param name="properties">The optional properties for this method.</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public Google.Apis.Calendar.v3.Data.Event Import (Google.Apis.Calendar.v3.Data.Event EventBody, string CalendarId, EventsImportProperties properties= null, string ServiceAccount = null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {
                var request = GetService(ServiceAccount).Events.Import(EventBody, CalendarId);

                if (StandardQueryParams != null) {
                    request.Fields = StandardQueryParams.fields;
                    request.QuotaUser = StandardQueryParams.quotaUser;
                    request.UserIp = StandardQueryParams.userIp;
                }

                if (properties != null)    {
                    request.SupportsAttachments = properties.SupportsAttachments;
                }

                return request.Execute();
            }

            /// <summary>Creates an event.</summary>
            /// <param name="EventBody">The body of the request.</param>
            /// <param name="CalendarId">Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you
            /// want to access the primary calendar of the currently logged in user, use the "primary" keyword.</param>
            /// <param name="properties">The optional properties for this method.</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public Google.Apis.Calendar.v3.Data.Event Insert (Google.Apis.Calendar.v3.Data.Event EventBody, string CalendarId, EventsInsertProperties properties= null, string ServiceAccount = null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {
                var request = GetService(ServiceAccount).Events.Insert(EventBody, CalendarId);

                if (StandardQueryParams != null) {
                    request.Fields = StandardQueryParams.fields;
                    request.QuotaUser = StandardQueryParams.quotaUser;
                    request.UserIp = StandardQueryParams.userIp;
                }

                if (properties != null)    {
                    request.MaxAttendees = properties.MaxAttendees;
                    request.SendNotifications = properties.SendNotifications;
                    request.SupportsAttachments = properties.SupportsAttachments;
                }

                return request.Execute();
            }

            /// <summary>Returns instances of the specified recurring event.</summary>
            /// <param name="CalendarId">Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you
            /// want to access the primary calendar of the currently logged in user, use the "primary" keyword.</param>
            ///
            /// <param name="EventId">Recurring event identifier.</param>
            /// <param name="properties">The optional properties for this method.</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public List<Google.Apis.Calendar.v3.Data.Events> Instances(
                string CalendarId, string EventId, EventsInstancesProperties properties= null, string ServiceAccount = null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {
                var results = new List<Google.Apis.Calendar.v3.Data.Events>();

                v3.EventsResource.InstancesRequest request = GetService(ServiceAccount).Events.Instances(CalendarId, EventId);

                if (StandardQueryParams != null) {
                    request.Fields = StandardQueryParams.fields;
                    request.QuotaUser = StandardQueryParams.quotaUser;
                    request.UserIp = StandardQueryParams.userIp;
                }

                if (properties != null)
                {
                    request.AlwaysIncludeEmail = properties.AlwaysIncludeEmail;
                    request.MaxAttendees = properties.MaxAttendees;
                    request.MaxResults = properties.MaxResults;
                    request.OriginalStart = properties.OriginalStart;
                    request.ShowDeleted = properties.ShowDeleted;
                    request.TimeMax = properties.TimeMax;
                    request.TimeMin = properties.TimeMin;
                    request.TimeZone = properties.TimeZone;

                }

                if (null != properties.StartProgressBar)
                {
                    properties.StartProgressBar("Gathering Events",
                        string.Format("-Collecting Events page 1"));
                }

                Google.Apis.Calendar.v3.Data.Events pagedResult = request.Execute();

                if (pagedResult != null)
                {
                    results.Add(pagedResult);

                    while (!string.IsNullOrWhiteSpace(pagedResult.NextPageToken) &&
                        pagedResult.NextPageToken != request.PageToken &&
                    (properties.TotalResults == 0 || results.Count < properties.TotalResults))
                    {
                        request.PageToken = pagedResult.NextPageToken;

                        if (null != properties.UpdateProgressBar)
                        {
                            properties.UpdateProgressBar(5, 10, "Gathering Events",
                                    string.Format("-Collecting Events page {0}",
                                        (results.Count + 1).ToString()));
                        }
                        pagedResult = request.Execute();
                        results.Add(pagedResult);
                    }

                    if (null != properties.UpdateProgressBar)
                    {
                        properties.UpdateProgressBar(1, 2, "Gathering Events",
                                string.Format("-Returning {0} pages.", results.Count.ToString()));
                    }
                }

                return results;
            }

            /// <summary>Returns events on the specified calendar.</summary>
            /// <param name="CalendarId">Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you
            /// want to access the primary calendar of the currently logged in user, use the "primary" keyword.</param>
            /// <param name="properties">The optional properties for this method.</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public List<Google.Apis.Calendar.v3.Data.Events> List(
                string CalendarId, EventsListProperties properties= null, string ServiceAccount = null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {
                var results = new List<Google.Apis.Calendar.v3.Data.Events>();

                v3.EventsResource.ListRequest request = GetService(ServiceAccount).Events.List(CalendarId);

                if (StandardQueryParams != null) {
                    request.Fields = StandardQueryParams.fields;
                    request.QuotaUser = StandardQueryParams.quotaUser;
                    request.UserIp = StandardQueryParams.userIp;
                }

                if (properties != null)
                {
                    request.AlwaysIncludeEmail = properties.AlwaysIncludeEmail;
                    request.ICalUID = properties.ICalUID;
                    request.MaxAttendees = properties.MaxAttendees;
                    request.MaxResults = properties.MaxResults;
                    request.OrderBy = properties.OrderBy;
                    request.PrivateExtendedProperty = properties.PrivateExtendedProperty;
                    request.Q = properties.Q;
                    request.SharedExtendedProperty = properties.SharedExtendedProperty;
                    request.ShowDeleted = properties.ShowDeleted;
                    request.ShowHiddenInvitations = properties.ShowHiddenInvitations;
                    request.SingleEvents = properties.SingleEvents;
                    request.SyncToken = properties.SyncToken;
                    request.TimeMax = properties.TimeMax;
                    request.TimeMin = properties.TimeMin;
                    request.TimeZone = properties.TimeZone;
                    request.UpdatedMin = properties.UpdatedMin;

                }

                if (null != properties.StartProgressBar)
                {
                    properties.StartProgressBar("Gathering Events",
                        string.Format("-Collecting Events page 1"));
                }

                Google.Apis.Calendar.v3.Data.Events pagedResult = request.Execute();

                if (pagedResult != null)
                {
                    results.Add(pagedResult);

                    while (!string.IsNullOrWhiteSpace(pagedResult.NextPageToken) &&
                        pagedResult.NextPageToken != request.PageToken &&
                    (properties.TotalResults == 0 || results.Count < properties.TotalResults))
                    {
                        request.PageToken = pagedResult.NextPageToken;

                        if (null != properties.UpdateProgressBar)
                        {
                            properties.UpdateProgressBar(5, 10, "Gathering Events",
                                    string.Format("-Collecting Events page {0}",
                                        (results.Count + 1).ToString()));
                        }
                        pagedResult = request.Execute();
                        results.Add(pagedResult);
                    }

                    if (null != properties.UpdateProgressBar)
                    {
                        properties.UpdateProgressBar(1, 2, "Gathering Events",
                                string.Format("-Returning {0} pages.", results.Count.ToString()));
                    }
                }

                return results;
            }

            /// <summary>Moves an event to another calendar, i.e. changes an event's organizer.</summary>
            /// <param name="CalendarId">Calendar identifier of the source calendar where the event currently is on.</param>
            ///
            /// <param name="EventId">Event identifier.</param>
            /// <param name="Destination">Calendar identifier of the target
            /// calendar where the event is to be moved to.</param>
            /// <param name="properties">The optional properties for this method.</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public Google.Apis.Calendar.v3.Data.Event Move (string CalendarId, string EventId, string Destination, EventsMoveProperties properties= null, string ServiceAccount = null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {
                var request = GetService(ServiceAccount).Events.Move(CalendarId, EventId, Destination);

                if (StandardQueryParams != null) {
                    request.Fields = StandardQueryParams.fields;
                    request.QuotaUser = StandardQueryParams.quotaUser;
                    request.UserIp = StandardQueryParams.userIp;
                }

                if (properties != null)    {
                    request.SendNotifications = properties.SendNotifications;
                }

                return request.Execute();
            }

            /// <summary>Updates an event. This method supports patch semantics.</summary>
            /// <param name="EventBody">The body of the request.</param>
            /// <param name="CalendarId">Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you
            /// want to access the primary calendar of the currently logged in user, use the "primary" keyword.</param>
            ///
            /// <param name="EventId">Event identifier.</param>
            /// <param name="properties">The optional properties for this method.</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public Google.Apis.Calendar.v3.Data.Event Patch (Google.Apis.Calendar.v3.Data.Event EventBody, string CalendarId, string EventId, EventsPatchProperties properties= null, string ServiceAccount = null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {
                var request = GetService(ServiceAccount).Events.Patch(EventBody, CalendarId, EventId);

                if (StandardQueryParams != null) {
                    request.Fields = StandardQueryParams.fields;
                    request.QuotaUser = StandardQueryParams.quotaUser;
                    request.UserIp = StandardQueryParams.userIp;
                }

                if (properties != null)    {
                    request.AlwaysIncludeEmail = properties.AlwaysIncludeEmail;
                    request.MaxAttendees = properties.MaxAttendees;
                    request.SendNotifications = properties.SendNotifications;
                    request.SupportsAttachments = properties.SupportsAttachments;
                }

                return request.Execute();
            }

            /// <summary>Creates an event based on a simple text string.</summary>
            /// <param name="CalendarId">Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you
            /// want to access the primary calendar of the currently logged in user, use the "primary" keyword.</param>
            ///
            /// <param name="Text">The text describing the event to be created.</param>
            /// <param name="properties">The optional properties for this method.</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public Google.Apis.Calendar.v3.Data.Event QuickAdd (string CalendarId, string Text, EventsQuickAddProperties properties= null, string ServiceAccount = null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {
                var request = GetService(ServiceAccount).Events.QuickAdd(CalendarId, Text);

                if (StandardQueryParams != null) {
                    request.Fields = StandardQueryParams.fields;
                    request.QuotaUser = StandardQueryParams.quotaUser;
                    request.UserIp = StandardQueryParams.userIp;
                }

                if (properties != null)    {
                    request.SendNotifications = properties.SendNotifications;
                }

                return request.Execute();
            }

            /// <summary>Updates an event.</summary>
            /// <param name="EventBody">The body of the request.</param>
            /// <param name="CalendarId">Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you
            /// want to access the primary calendar of the currently logged in user, use the "primary" keyword.</param>
            ///
            /// <param name="EventId">Event identifier.</param>
            /// <param name="properties">The optional properties for this method.</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public Google.Apis.Calendar.v3.Data.Event Update (Google.Apis.Calendar.v3.Data.Event EventBody, string CalendarId, string EventId, EventsUpdateProperties properties= null, string ServiceAccount = null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {
                var request = GetService(ServiceAccount).Events.Update(EventBody, CalendarId, EventId);

                if (StandardQueryParams != null) {
                    request.Fields = StandardQueryParams.fields;
                    request.QuotaUser = StandardQueryParams.quotaUser;
                    request.UserIp = StandardQueryParams.userIp;
                }

                if (properties != null)    {
                    request.AlwaysIncludeEmail = properties.AlwaysIncludeEmail;
                    request.MaxAttendees = properties.MaxAttendees;
                    request.SendNotifications = properties.SendNotifications;
                    request.SupportsAttachments = properties.SupportsAttachments;
                }

                return request.Execute();
            }

            /// <summary>Watch for changes to Events resources.</summary>
            /// <param name="ChannelBody">The body of the request.</param>
            /// <param name="CalendarId">Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you
            /// want to access the primary calendar of the currently logged in user, use the "primary" keyword.</param>
            /// <param name="properties">The optional properties for this method.</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public Google.Apis.Calendar.v3.Data.Channel Watch (Google.Apis.Calendar.v3.Data.Channel ChannelBody, string CalendarId, EventsWatchProperties properties= null, string ServiceAccount = null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {
                var request = GetService(ServiceAccount).Events.Watch(ChannelBody, CalendarId);

                if (StandardQueryParams != null) {
                    request.Fields = StandardQueryParams.fields;
                    request.QuotaUser = StandardQueryParams.quotaUser;
                    request.UserIp = StandardQueryParams.userIp;
                }

                if (properties != null)    {
                    request.AlwaysIncludeEmail = properties.AlwaysIncludeEmail;
                    request.ICalUID = properties.ICalUID;
                    request.MaxAttendees = properties.MaxAttendees;
                    request.MaxResults = properties.MaxResults;
                    request.OrderBy = properties.OrderBy;
                    request.PrivateExtendedProperty = properties.PrivateExtendedProperty;
                    request.Q = properties.Q;
                    request.SharedExtendedProperty = properties.SharedExtendedProperty;
                    request.ShowDeleted = properties.ShowDeleted;
                    request.ShowHiddenInvitations = properties.ShowHiddenInvitations;
                    request.SingleEvents = properties.SingleEvents;
                    request.SyncToken = properties.SyncToken;
                    request.TimeMax = properties.TimeMax;
                    request.TimeMin = properties.TimeMin;
                    request.TimeZone = properties.TimeZone;
                    request.UpdatedMin = properties.UpdatedMin;
                }

                return request.Execute();
            }

        }

        /// <summary>The "freebusy" collection of methods.</summary>
        public class Freebusy
        {




            /// <summary>Returns free/busy information for a set of calendars.</summary>
            /// <param name="FreeBusyRequestBody">The body of the request.</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public Google.Apis.Calendar.v3.Data.FreeBusyResponse Query (Google.Apis.Calendar.v3.Data.FreeBusyRequest FreeBusyRequestBody, string ServiceAccount = null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {
                var request = GetService(ServiceAccount).Freebusy.Query(FreeBusyRequestBody);

                if (StandardQueryParams != null) {
                    request.Fields = StandardQueryParams.fields;
                    request.QuotaUser = StandardQueryParams.quotaUser;
                    request.UserIp = StandardQueryParams.userIp;
                }



                return request.Execute();
            }

        }

        /// <summary>The "settings" collection of methods.</summary>
        public class Settings
        {

            /// <summary>Optional parameters for the Settings List method.</summary>
            public class SettingsListProperties
            {
                /// <summary>Maximum number of entries returned on one result page. By default the value is 100 entries. The page size can never be larger than 250 entries. Optional.</summary>
                public int? MaxResults = null;

                /// <summary>Token obtained from the nextSyncToken field returned on the last page of results from the previous list request. It makes the result of this list request contain only entries that have changed since then.If the syncToken expires, the server will respond with a 410 GONE response code and the client should clear its storage and perform a full synchronization without any syncToken.Learn more about incremental synchronization.Optional. The default is to return all entries.</summary>
                public string SyncToken = null;

                /// <summary>A delegate that is used to start a progress bar.</summary>
                public Action<string, string> StartProgressBar = null;

                /// <summary>A delegate that is used to update a progress bar.</summary>
                public Action<int, int, string, string> UpdateProgressBar = null;

                /// <summary>A counter for the total number of results to pull when iterating through paged results.</summary>
                public int TotalResults = 0;
            }

            /// <summary>Optional parameters for the Settings Watch method.</summary>
            public class SettingsWatchProperties
            {
                /// <summary>Maximum number of entries returned on one result page. By default the value is 100 entries. The page size can never be larger than 250 entries. Optional.</summary>
                public int? MaxResults = null;

                /// <summary>Token obtained from the nextSyncToken field returned on the last page of results from the previous list request. It makes the result of this list request contain only entries that have changed since then.If the syncToken expires, the server will respond with a 410 GONE response code and the client should clear its storage and perform a full synchronization without any syncToken.Learn more about incremental synchronization.Optional. The default is to return all entries.</summary>
                public string SyncToken = null;
            }


            /// <summary>Returns a single user setting.</summary>
            /// <param name="Setting">The id of the user setting.</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public Google.Apis.Calendar.v3.Data.Setting Get (string Setting, string ServiceAccount = null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {
                var request = GetService(ServiceAccount).Settings.Get(Setting);

                if (StandardQueryParams != null) {
                    request.Fields = StandardQueryParams.fields;
                    request.QuotaUser = StandardQueryParams.quotaUser;
                    request.UserIp = StandardQueryParams.userIp;
                }



                return request.Execute();
            }

            /// <summary>Returns all user settings for the authenticated user.</summary>
            /// <param name="properties">The optional properties for this method.</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public List<Google.Apis.Calendar.v3.Data.Settings> List(
                SettingsListProperties properties= null, string ServiceAccount = null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {
                var results = new List<Google.Apis.Calendar.v3.Data.Settings>();

                v3.SettingsResource.ListRequest request = GetService(ServiceAccount).Settings.List();

                if (StandardQueryParams != null) {
                    request.Fields = StandardQueryParams.fields;
                    request.QuotaUser = StandardQueryParams.quotaUser;
                    request.UserIp = StandardQueryParams.userIp;
                }

                if (properties != null)
                {
                    request.MaxResults = properties.MaxResults;
                    request.SyncToken = properties.SyncToken;

                }

                if (null != properties.StartProgressBar)
                {
                    properties.StartProgressBar("Gathering Settings",
                        string.Format("-Collecting Settings page 1"));
                }

                Google.Apis.Calendar.v3.Data.Settings pagedResult = request.Execute();

                if (pagedResult != null)
                {
                    results.Add(pagedResult);

                    while (!string.IsNullOrWhiteSpace(pagedResult.NextPageToken) &&
                        pagedResult.NextPageToken != request.PageToken &&
                    (properties.TotalResults == 0 || results.Count < properties.TotalResults))
                    {
                        request.PageToken = pagedResult.NextPageToken;

                        if (null != properties.UpdateProgressBar)
                        {
                            properties.UpdateProgressBar(5, 10, "Gathering Settings",
                                    string.Format("-Collecting Settings page {0}",
                                        (results.Count + 1).ToString()));
                        }
                        pagedResult = request.Execute();
                        results.Add(pagedResult);
                    }

                    if (null != properties.UpdateProgressBar)
                    {
                        properties.UpdateProgressBar(1, 2, "Gathering Settings",
                                string.Format("-Returning {0} pages.", results.Count.ToString()));
                    }
                }

                return results;
            }

            /// <summary>Watch for changes to Settings resources.</summary>
            /// <param name="ChannelBody">The body of the request.</param>
            /// <param name="properties">The optional properties for this method.</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public Google.Apis.Calendar.v3.Data.Channel Watch (Google.Apis.Calendar.v3.Data.Channel ChannelBody, SettingsWatchProperties properties= null, string ServiceAccount = null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {
                var request = GetService(ServiceAccount).Settings.Watch(ChannelBody);

                if (StandardQueryParams != null) {
                    request.Fields = StandardQueryParams.fields;
                    request.QuotaUser = StandardQueryParams.quotaUser;
                    request.UserIp = StandardQueryParams.userIp;
                }

                if (properties != null)    {
                    request.MaxResults = properties.MaxResults;
                    request.SyncToken = properties.SyncToken;
                }

                return request.Execute();
            }

        }

    }
}