// gShell is licensed under the GNU GENERAL PUBLIC LICENSE, Version 3
//
// http://www.gnu.org/licenses/gpl-3.0.en.html
//
// Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
// an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.
//
// gShell is based upon https://github.com/google/google-api-dotnet-client, which is licensed under the Apache 2.0
// license: https://github.com/google/google-api-dotnet-client/blob/master/LICENSE
//
// gShell is reliant upon the Google Apis. Please see the specific API pages for specific licensing information.

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a fork of google-apis-code-generator:
//       https://github.com/squid808/apis-client-generator
//
//     How neat is that? Pretty neat.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using gShell.Cmdlets.Utilities.OAuth2;
using gShell.dotNet;

namespace gShell.Cmdlets.Drive{

    using System;
    using System.Collections.Generic;
    using System.Management.Automation;

    using Google.Apis.Auth.OAuth2;
    using Google.Apis.Services;
    using v3 = Google.Apis.Drive.v3;
    using Data = Google.Apis.Drive.v3.Data;

    using gShell.dotNet.Utilities;
    using gShell.dotNet.Utilities.OAuth2;
    using gDrive = gShell.dotNet.Drive;

    /// <summary>
    /// A PowerShell-ready wrapper for the Drive api, as well as the resources and methods therein.
    /// </summary>
    public abstract class DriveBase : ServiceAccountCmdletBase
    {

        #region Properties

        /// <summary>The gShell dotNet class wrapper base.</summary>
        protected static gDrive mainBase { get; set; }


        /// <summary>An instance of the About gShell dotNet resource.</summary>
        public About about { get; set; }

        /// <summary>An instance of the Changes gShell dotNet resource.</summary>
        public Changes changes { get; set; }

        /// <summary>An instance of the Channels gShell dotNet resource.</summary>
        public Channels channels { get; set; }

        /// <summary>An instance of the Comments gShell dotNet resource.</summary>
        public Comments comments { get; set; }

        /// <summary>An instance of the Files gShell dotNet resource.</summary>
        public Files files { get; set; }

        /// <summary>An instance of the Permissions gShell dotNet resource.</summary>
        public Permissions permissions { get; set; }

        /// <summary>An instance of the Replies gShell dotNet resource.</summary>
        public Replies replies { get; set; }

        /// <summary>An instance of the Revisions gShell dotNet resource.</summary>
        public Revisions revisions { get; set; }

        /// <summary>
        /// Required to be able to store and retrieve the mainBase from the ServiceWrapperDictionary
        /// </summary>
        protected override Type mainBaseType { get { return typeof(gDrive); } }
        #endregion

        #region Constructors
        protected DriveBase()
        {
            mainBase = new gDrive();

            ServiceWrapperDictionary[mainBaseType] = mainBase;


            about = new About();
            changes = new Changes();
            channels = new Channels();
            comments = new Comments();
            files = new Files();
            permissions = new Permissions();
            replies = new Replies();
            revisions = new Revisions();
        }
        #endregion

        #region Wrapped Methods



        #region About

        /// <summary>A wrapper class for the About resource.</summary>
        public class About
        {




            /// <summary>Gets information about the user, the user's Drive, and system capabilities.</summary>
            public Google.Apis.Drive.v3.Data.About Get (string ServiceAccount = null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {

                return mainBase.about.Get(ServiceAccount, StandardQueryParams);
            }


        }
        #endregion



        #region Changes

        /// <summary>A wrapper class for the Changes resource.</summary>
        public class Changes
        {




            /// <summary>Gets the starting pageToken for listing future changes.</summary>
            public Google.Apis.Drive.v3.Data.StartPageToken GetStartPageToken (string ServiceAccount = null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {

                return mainBase.changes.GetStartPageToken(ServiceAccount, StandardQueryParams);
            }



            /// <summary>Lists changes for a user.</summary>
            /// <param name="PageToken">The token for continuing a previous list request on the next page. This should be set to the
            /// value of 'nextPageToken' from the previous response or to the response from the getStartPageToken
            /// method.</param>
            /// <param name="properties">The optional properties for this method.</param>
            public Google.Apis.Drive.v3.Data.ChangeList List (string PageToken, gDrive.Changes.ChangesListProperties properties= null, string ServiceAccount = null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {

                properties = properties ?? new gDrive.Changes.ChangesListProperties();

                return mainBase.changes.List(PageToken, properties, ServiceAccount, StandardQueryParams);
            }



            /// <summary>Subscribes to changes for a user.</summary>
            /// <param name="ChannelBody">The body of the request.</param>
            /// <param name="PageToken">The token for continuing a previous list request on the next page. This should be set to the
            /// value of 'nextPageToken' from the previous response or to the response from the getStartPageToken
            /// method.</param>
            /// <param name="properties">The optional properties for this method.</param>
            public Google.Apis.Drive.v3.Data.Channel Watch (Google.Apis.Drive.v3.Data.Channel ChannelBody, string PageToken, gDrive.Changes.ChangesWatchProperties properties= null, string ServiceAccount = null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {

                properties = properties ?? new gDrive.Changes.ChangesWatchProperties();

                return mainBase.changes.Watch(ChannelBody, PageToken, properties, ServiceAccount, StandardQueryParams);
            }


        }
        #endregion



        #region Channels

        /// <summary>A wrapper class for the Channels resource.</summary>
        public class Channels
        {




            /// <summary>Stop watching resources through this channel</summary>
            /// <param name="ChannelBody">The body of the request.</param>
            public void Stop (Google.Apis.Drive.v3.Data.Channel ChannelBody, string ServiceAccount = null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {

                mainBase.channels.Stop(ChannelBody, ServiceAccount, StandardQueryParams);
            }


        }
        #endregion



        #region Comments

        /// <summary>A wrapper class for the Comments resource.</summary>
        public class Comments
        {




            /// <summary>Creates a new comment on a file.</summary>
            /// <param name="CommentBody">The body of the request.</param>
            /// <param name="FileId">The ID of the file.</param>
            public Google.Apis.Drive.v3.Data.Comment Create (Google.Apis.Drive.v3.Data.Comment CommentBody, string FileId, string ServiceAccount = null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {

                return mainBase.comments.Create(CommentBody, FileId, ServiceAccount, StandardQueryParams);
            }



            /// <summary>Deletes a comment.</summary>
            /// <param name="FileId">The ID of the file.</param>
            /// <param name="CommentId">The ID of the comment.</param>
            public void Delete (string FileId, string CommentId, string ServiceAccount = null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {

                mainBase.comments.Delete(FileId, CommentId, ServiceAccount, StandardQueryParams);
            }



            /// <summary>Gets a comment by ID.</summary>
            /// <param name="FileId">The ID of the file.</param>
            /// <param name="CommentId">The ID of the comment.</param>
            /// <param name="properties">The optional properties for this method.</param>
            public Google.Apis.Drive.v3.Data.Comment Get (string FileId, string CommentId, gDrive.Comments.CommentsGetProperties properties= null, string ServiceAccount = null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {

                properties = properties ?? new gDrive.Comments.CommentsGetProperties();

                return mainBase.comments.Get(FileId, CommentId, properties, ServiceAccount, StandardQueryParams);
            }



            /// <summary>Lists a file's comments.</summary>
            /// <param name="FileId">The ID of the file.</param>
            /// <param name="properties">The optional properties for this method.</param>

            public List<Google.Apis.Drive.v3.Data.CommentList> List(string FileId, gDrive.Comments.CommentsListProperties properties= null, string ServiceAccount = null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {

                properties = properties ?? new gDrive.Comments.CommentsListProperties();


                return mainBase.comments.List(FileId, properties, ServiceAccount, StandardQueryParams);
            }

            /// <summary>Updates a comment with patch semantics.</summary>
            /// <param name="CommentBody">The body of the request.</param>
            /// <param name="FileId">The ID of the file.</param>
            /// <param name="CommentId">The ID of the comment.</param>
            public Google.Apis.Drive.v3.Data.Comment Update (Google.Apis.Drive.v3.Data.Comment CommentBody, string FileId, string CommentId, string ServiceAccount = null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {

                return mainBase.comments.Update(CommentBody, FileId, CommentId, ServiceAccount, StandardQueryParams);
            }


        }
        #endregion



        #region Files

        /// <summary>A wrapper class for the Files resource.</summary>
        public class Files
        {




            /// <summary>Creates a copy of a file and applies any requested updates with patch semantics.</summary>
            /// <param name="FileBody">The body of the request.</param>
            /// <param name="FileId">The ID of the file.</param>
            /// <param name="properties">The optional properties for this method.</param>
            public Google.Apis.Drive.v3.Data.File Copy (Google.Apis.Drive.v3.Data.File FileBody, string FileId, gDrive.Files.FilesCopyProperties properties= null, string ServiceAccount = null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {

                properties = properties ?? new gDrive.Files.FilesCopyProperties();

                return mainBase.files.Copy(FileBody, FileId, properties, ServiceAccount, StandardQueryParams);
            }



            /// <summary>Creates a new file.</summary>
            /// <param name="FileBody">The body of the request.</param>
            /// <param name="properties">The optional properties for this method.</param>
            public Google.Apis.Drive.v3.Data.File Create (Google.Apis.Drive.v3.Data.File FileBody, gDrive.Files.FilesCreateProperties properties= null, string ServiceAccount = null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {

                properties = properties ?? new gDrive.Files.FilesCreateProperties();

                return mainBase.files.Create(FileBody, properties, ServiceAccount, StandardQueryParams);
            }


            /// <summary>3</summary>
            public void Create (Google.Apis.Drive.v3.Data.File FileBody, System.IO.Stream stream, string contentType, gDrive.Files.FilesCreateProperties properties= null, string ServiceAccount = null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {

                properties = properties ?? new gDrive.Files.FilesCreateProperties();

                mainBase.files.Create(FileBody, stream, contentType, properties, ServiceAccount, StandardQueryParams);
            }

            /// <summary>Permanently deletes a file owned by the user without moving it to the trash. If the target is a
            /// folder, all descendants owned by the user are also deleted.</summary>
            /// <param name="FileId">The ID of the file.</param>
            public void Delete (string FileId, string ServiceAccount = null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {

                mainBase.files.Delete(FileId, ServiceAccount, StandardQueryParams);
            }



            /// <summary>Permanently deletes all of the user's trashed files.</summary>
            public void EmptyTrash (string ServiceAccount = null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {

                mainBase.files.EmptyTrash(ServiceAccount, StandardQueryParams);
            }



            /// <summary>Exports a Google Doc to the requested MIME type and returns the exported content.</summary>
            /// <param name="FileId">The ID of the file.</param>
            /// <param name="MimeType">The MIME type of the format
            /// requested for this export.</param>
            public void Export (string FileId, string MimeType, string DownloadPath, string ServiceAccount = null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {

                mainBase.files.Export(FileId, MimeType, DownloadPath, ServiceAccount, StandardQueryParams);
            }



            /// <summary>Generates a set of file IDs which can be provided in create requests.</summary>
            /// <param name="properties">The optional properties for this method.</param>
            public Google.Apis.Drive.v3.Data.GeneratedIds GenerateIds (gDrive.Files.FilesGenerateIdsProperties properties= null, string ServiceAccount = null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {

                properties = properties ?? new gDrive.Files.FilesGenerateIdsProperties();

                return mainBase.files.GenerateIds(properties, ServiceAccount, StandardQueryParams);
            }



            /// <summary>Gets a file's metadata or content by ID.</summary>
            /// <param name="FileId">The ID of the file.</param>
            /// <param name="properties">The optional properties for this method.</param>
            public Google.Apis.Drive.v3.Data.File Get (string FileId, gDrive.Files.FilesGetProperties properties= null, string ServiceAccount = null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {

                properties = properties ?? new gDrive.Files.FilesGetProperties();

                return mainBase.files.Get(FileId, properties, ServiceAccount, StandardQueryParams);
            }



            /// <summary>Lists or searches files.</summary>
            /// <param name="properties">The optional properties for this method.</param>

            public List<Google.Apis.Drive.v3.Data.FileList> List(gDrive.Files.FilesListProperties properties= null, string ServiceAccount = null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {

                properties = properties ?? new gDrive.Files.FilesListProperties();


                return mainBase.files.List(properties, ServiceAccount, StandardQueryParams);
            }

            /// <summary>Updates a file's metadata and/or content with patch semantics.</summary>
            /// <param name="FileBody">The body of the request.</param>
            /// <param name="FileId">The ID of the file.</param>
            /// <param name="properties">The optional properties for this method.</param>
            public Google.Apis.Drive.v3.Data.File Update (Google.Apis.Drive.v3.Data.File FileBody, string FileId, gDrive.Files.FilesUpdateProperties properties= null, string ServiceAccount = null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {

                properties = properties ?? new gDrive.Files.FilesUpdateProperties();

                return mainBase.files.Update(FileBody, FileId, properties, ServiceAccount, StandardQueryParams);
            }


            /// <summary>3</summary>
            public void Update (Google.Apis.Drive.v3.Data.File FileBody, string fileId, System.IO.Stream stream, string contentType, gDrive.Files.FilesUpdateProperties properties= null, string ServiceAccount = null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {

                properties = properties ?? new gDrive.Files.FilesUpdateProperties();

                mainBase.files.Update(FileBody, fileId, stream, contentType, properties, ServiceAccount, StandardQueryParams);
            }

            /// <summary>Subscribes to changes to a file</summary>
            /// <param name="ChannelBody">The body of the request.</param>
            /// <param name="FileId">The ID of the file.</param>
            /// <param name="properties">The optional properties for this method.</param>
            public Google.Apis.Drive.v3.Data.Channel Watch (Google.Apis.Drive.v3.Data.Channel ChannelBody, string FileId, gDrive.Files.FilesWatchProperties properties= null, string ServiceAccount = null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {

                properties = properties ?? new gDrive.Files.FilesWatchProperties();

                return mainBase.files.Watch(ChannelBody, FileId, properties, ServiceAccount, StandardQueryParams);
            }


        }
        #endregion



        #region Permissions

        /// <summary>A wrapper class for the Permissions resource.</summary>
        public class Permissions
        {




            /// <summary>Creates a permission for a file.</summary>
            /// <param name="PermissionBody">The body of the request.</param>
            /// <param name="FileId">The ID of the file.</param>
            /// <param name="properties">The optional properties for this method.</param>
            public Google.Apis.Drive.v3.Data.Permission Create (Google.Apis.Drive.v3.Data.Permission PermissionBody, string FileId, gDrive.Permissions.PermissionsCreateProperties properties= null, string ServiceAccount = null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {

                properties = properties ?? new gDrive.Permissions.PermissionsCreateProperties();

                return mainBase.permissions.Create(PermissionBody, FileId, properties, ServiceAccount, StandardQueryParams);
            }



            /// <summary>Deletes a permission.</summary>
            /// <param name="FileId">The ID of the file.</param>
            /// <param name="PermissionId">The ID of the
            /// permission.</param>
            public void Delete (string FileId, string PermissionId, string ServiceAccount = null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {

                mainBase.permissions.Delete(FileId, PermissionId, ServiceAccount, StandardQueryParams);
            }



            /// <summary>Gets a permission by ID.</summary>
            /// <param name="FileId">The ID of the file.</param>
            /// <param name="PermissionId">The ID of the
            /// permission.</param>
            public Google.Apis.Drive.v3.Data.Permission Get (string FileId, string PermissionId, string ServiceAccount = null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {

                return mainBase.permissions.Get(FileId, PermissionId, ServiceAccount, StandardQueryParams);
            }



            /// <summary>Lists a file's permissions.</summary>
            /// <param name="FileId">The ID of the file.</param>
            public Google.Apis.Drive.v3.Data.PermissionList List (string FileId, string ServiceAccount = null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {

                return mainBase.permissions.List(FileId, ServiceAccount, StandardQueryParams);
            }



            /// <summary>Updates a permission with patch semantics.</summary>
            /// <param name="PermissionBody">The body of the request.</param>
            /// <param name="FileId">The ID of the file.</param>
            /// <param name="PermissionId">The ID of the
            /// permission.</param>
            /// <param name="properties">The optional properties for this method.</param>
            public Google.Apis.Drive.v3.Data.Permission Update (Google.Apis.Drive.v3.Data.Permission PermissionBody, string FileId, string PermissionId, gDrive.Permissions.PermissionsUpdateProperties properties= null, string ServiceAccount = null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {

                properties = properties ?? new gDrive.Permissions.PermissionsUpdateProperties();

                return mainBase.permissions.Update(PermissionBody, FileId, PermissionId, properties, ServiceAccount, StandardQueryParams);
            }


        }
        #endregion



        #region Replies

        /// <summary>A wrapper class for the Replies resource.</summary>
        public class Replies
        {




            /// <summary>Creates a new reply to a comment.</summary>
            /// <param name="ReplyBody">The body of the request.</param>
            /// <param name="FileId">The ID of the file.</param>
            /// <param name="CommentId">The ID of the comment.</param>
            public Google.Apis.Drive.v3.Data.Reply Create (Google.Apis.Drive.v3.Data.Reply ReplyBody, string FileId, string CommentId, string ServiceAccount = null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {

                return mainBase.replies.Create(ReplyBody, FileId, CommentId, ServiceAccount, StandardQueryParams);
            }



            /// <summary>Deletes a reply.</summary>
            /// <param name="FileId">The ID of the file.</param>
            /// <param name="CommentId">The ID of the
            /// comment.</param>
            /// <param name="ReplyId">The ID of the reply.</param>
            public void Delete (string FileId, string CommentId, string ReplyId, string ServiceAccount = null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {

                mainBase.replies.Delete(FileId, CommentId, ReplyId, ServiceAccount, StandardQueryParams);
            }



            /// <summary>Gets a reply by ID.</summary>
            /// <param name="FileId">The ID of the file.</param>
            /// <param name="CommentId">The ID of the
            /// comment.</param>
            /// <param name="ReplyId">The ID of the reply.</param>
            /// <param name="properties">The optional properties for this method.</param>
            public Google.Apis.Drive.v3.Data.Reply Get (string FileId, string CommentId, string ReplyId, gDrive.Replies.RepliesGetProperties properties= null, string ServiceAccount = null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {

                properties = properties ?? new gDrive.Replies.RepliesGetProperties();

                return mainBase.replies.Get(FileId, CommentId, ReplyId, properties, ServiceAccount, StandardQueryParams);
            }



            /// <summary>Lists a comment's replies.</summary>
            /// <param name="FileId">The ID of the file.</param>
            /// <param name="CommentId">The ID of the comment.</param>
            /// <param name="properties">The optional properties for this method.</param>

            public List<Google.Apis.Drive.v3.Data.ReplyList> List(string FileId, string CommentId, gDrive.Replies.RepliesListProperties properties= null, string ServiceAccount = null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {

                properties = properties ?? new gDrive.Replies.RepliesListProperties();


                return mainBase.replies.List(FileId, CommentId, properties, ServiceAccount, StandardQueryParams);
            }

            /// <summary>Updates a reply with patch semantics.</summary>
            /// <param name="ReplyBody">The body of the request.</param>
            /// <param name="FileId">The ID of the file.</param>
            /// <param name="CommentId">The ID of the
            /// comment.</param>
            /// <param name="ReplyId">The ID of the reply.</param>
            public Google.Apis.Drive.v3.Data.Reply Update (Google.Apis.Drive.v3.Data.Reply ReplyBody, string FileId, string CommentId, string ReplyId, string ServiceAccount = null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {

                return mainBase.replies.Update(ReplyBody, FileId, CommentId, ReplyId, ServiceAccount, StandardQueryParams);
            }


        }
        #endregion



        #region Revisions

        /// <summary>A wrapper class for the Revisions resource.</summary>
        public class Revisions
        {




            /// <summary>Permanently deletes a revision. This method is only applicable to files with binary content in
            /// Drive.</summary>
            /// <param name="FileId">The ID of the file.</param>
            /// <param name="RevisionId">The ID of the
            /// revision.</param>
            public void Delete (string FileId, string RevisionId, string ServiceAccount = null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {

                mainBase.revisions.Delete(FileId, RevisionId, ServiceAccount, StandardQueryParams);
            }



            /// <summary>Gets a revision's metadata or content by ID.</summary>
            /// <param name="FileId">The ID of the file.</param>
            /// <param name="RevisionId">The ID of the
            /// revision.</param>
            /// <param name="properties">The optional properties for this method.</param>
            public Google.Apis.Drive.v3.Data.Revision Get (string FileId, string RevisionId, gDrive.Revisions.RevisionsGetProperties properties= null, string ServiceAccount = null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {

                properties = properties ?? new gDrive.Revisions.RevisionsGetProperties();

                return mainBase.revisions.Get(FileId, RevisionId, properties, ServiceAccount, StandardQueryParams);
            }



            /// <summary>Lists a file's revisions.</summary>
            /// <param name="FileId">The ID of the file.</param>
            /// <param name="properties">The optional properties for this method.</param>

            public List<Google.Apis.Drive.v3.Data.RevisionList> List(string FileId, gDrive.Revisions.RevisionsListProperties properties= null, string ServiceAccount = null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {

                properties = properties ?? new gDrive.Revisions.RevisionsListProperties();


                return mainBase.revisions.List(FileId, properties, ServiceAccount, StandardQueryParams);
            }

            /// <summary>Updates a revision with patch semantics.</summary>
            /// <param name="RevisionBody">The body of the request.</param>
            /// <param name="FileId">The ID of the file.</param>
            /// <param name="RevisionId">The ID of the
            /// revision.</param>
            public Google.Apis.Drive.v3.Data.Revision Update (Google.Apis.Drive.v3.Data.Revision RevisionBody, string FileId, string RevisionId, string ServiceAccount = null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {

                return mainBase.revisions.Update(RevisionBody, FileId, RevisionId, ServiceAccount, StandardQueryParams);
            }


        }
        #endregion

        #endregion

    }
}



namespace gShell.dotNet
{
    using System;
    using System.Collections.Generic;

    using gShell.dotNet;
    using gShell.dotNet.Utilities.OAuth2;

    using v3 = Google.Apis.Drive.v3;
    using Data = Google.Apis.Drive.v3.Data;

    /// <summary>The dotNet gShell version of the drive api.</summary>
    public class Drive : ServiceWrapper<v3.DriveService>, IServiceWrapper<Google.Apis.Services.IClientService>
    {

        protected override bool worksWithGmail { get { return true; } }

        /// <summary>Creates a new v3.Drive service.</summary>
        /// <param name="domain">The domain to which this service will be authenticated.</param>
        /// <param name="authInfo">The authenticated AuthInfo for this user and domain.</param>
        /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>

        protected override v3.DriveService CreateNewService(string domain, AuthenticatedUserInfo authInfo, string gShellServiceAccount = null)
        {
            return new v3.DriveService(OAuth2Base.GetInitializer(domain, authInfo, gShellServiceAccount));
        }

        /// <summary>Returns the api name and version in {name}:{version} format.</summary>
        public override string apiNameAndVersion { get { return "drive:v3"; } }


        /// <summary>Gets or sets the about resource class.</summary>
        public About about{ get; set; }

        /// <summary>Gets or sets the changes resource class.</summary>
        public Changes changes{ get; set; }

        /// <summary>Gets or sets the channels resource class.</summary>
        public Channels channels{ get; set; }

        /// <summary>Gets or sets the comments resource class.</summary>
        public Comments comments{ get; set; }

        /// <summary>Gets or sets the files resource class.</summary>
        public Files files{ get; set; }

        /// <summary>Gets or sets the permissions resource class.</summary>
        public Permissions permissions{ get; set; }

        /// <summary>Gets or sets the replies resource class.</summary>
        public Replies replies{ get; set; }

        /// <summary>Gets or sets the revisions resource class.</summary>
        public Revisions revisions{ get; set; }

        public Drive()
        {

            about = new About();
            changes = new Changes();
            channels = new Channels();
            comments = new Comments();
            files = new Files();
            permissions = new Permissions();
            replies = new Replies();
            revisions = new Revisions();
        }



        /// <summary>The "about" collection of methods.</summary>
        public class About
        {




            /// <summary>Gets information about the user, the user's Drive, and system capabilities.</summary>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public Google.Apis.Drive.v3.Data.About Get (string ServiceAccount = null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {
                var request = GetService(ServiceAccount).About.Get();

                if (StandardQueryParams != null) {
                    request.Fields = StandardQueryParams.fields;
                    request.QuotaUser = StandardQueryParams.quotaUser;
                    request.UserIp = StandardQueryParams.userIp;
                }



                return request.Execute();
            }

        }

        /// <summary>The "changes" collection of methods.</summary>
        public class Changes
        {

            /// <summary>Optional parameters for the Changes List method.</summary>
            public class ChangesListProperties
            {
                /// <summary>Whether to include changes indicating that items have left the view of the changes list, for example by deletion or lost access.</summary>
                public System.Nullable<bool> IncludeRemoved = null;

                /// <summary>The maximum number of changes to return per page.</summary>
                public System.Nullable<int> PageSize = null;

                /// <summary>Whether to restrict the results to changes inside the My Drive hierarchy. This omits changes to files such as those in the Application Data folder or shared files which have not been added to My Drive.</summary>
                public System.Nullable<bool> RestrictToMyDrive = null;

                /// <summary>A comma-separated list of spaces to query within the user corpus. Supported values are 'drive', 'appDataFolder' and 'photos'.</summary>
                public string Spaces = null;
            }

            /// <summary>Optional parameters for the Changes Watch method.</summary>
            public class ChangesWatchProperties
            {
                /// <summary>Whether to include changes indicating that items have left the view of the changes list, for example by deletion or lost access.</summary>
                public System.Nullable<bool> IncludeRemoved = null;

                /// <summary>The maximum number of changes to return per page.</summary>
                public System.Nullable<int> PageSize = null;

                /// <summary>Whether to restrict the results to changes inside the My Drive hierarchy. This omits changes to files such as those in the Application Data folder or shared files which have not been added to My Drive.</summary>
                public System.Nullable<bool> RestrictToMyDrive = null;

                /// <summary>A comma-separated list of spaces to query within the user corpus. Supported values are 'drive', 'appDataFolder' and 'photos'.</summary>
                public string Spaces = null;
            }


            /// <summary>Gets the starting pageToken for listing future changes.</summary>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public Google.Apis.Drive.v3.Data.StartPageToken GetStartPageToken (string ServiceAccount = null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {
                var request = GetService(ServiceAccount).Changes.GetStartPageToken();

                if (StandardQueryParams != null) {
                    request.Fields = StandardQueryParams.fields;
                    request.QuotaUser = StandardQueryParams.quotaUser;
                    request.UserIp = StandardQueryParams.userIp;
                }



                return request.Execute();
            }

            /// <summary>Lists changes for a user.</summary>
            /// <param name="PageToken">The token for continuing a previous list request on the next page. This should be set to the
            /// value of 'nextPageToken' from the previous response or to the response from the getStartPageToken
            /// method.</param>
            /// <param name="properties">The optional properties for this method.</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public Google.Apis.Drive.v3.Data.ChangeList List (string PageToken, ChangesListProperties properties= null, string ServiceAccount = null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {
                var request = GetService(ServiceAccount).Changes.List(PageToken);

                if (StandardQueryParams != null) {
                    request.Fields = StandardQueryParams.fields;
                    request.QuotaUser = StandardQueryParams.quotaUser;
                    request.UserIp = StandardQueryParams.userIp;
                }

                if (properties != null)    {
                    request.IncludeRemoved = properties.IncludeRemoved;
                    request.PageSize = properties.PageSize;
                    request.RestrictToMyDrive = properties.RestrictToMyDrive;
                    request.Spaces = properties.Spaces;
                }

                return request.Execute();
            }

            /// <summary>Subscribes to changes for a user.</summary>
            /// <param name="ChannelBody">The body of the request.</param>
            /// <param name="PageToken">The token for continuing a previous list request on the next page. This should be set to the
            /// value of 'nextPageToken' from the previous response or to the response from the getStartPageToken
            /// method.</param>
            /// <param name="properties">The optional properties for this method.</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public Google.Apis.Drive.v3.Data.Channel Watch (Google.Apis.Drive.v3.Data.Channel ChannelBody, string PageToken, ChangesWatchProperties properties= null, string ServiceAccount = null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {
                var request = GetService(ServiceAccount).Changes.Watch(ChannelBody, PageToken);

                if (StandardQueryParams != null) {
                    request.Fields = StandardQueryParams.fields;
                    request.QuotaUser = StandardQueryParams.quotaUser;
                    request.UserIp = StandardQueryParams.userIp;
                }

                if (properties != null)    {
                    request.IncludeRemoved = properties.IncludeRemoved;
                    request.PageSize = properties.PageSize;
                    request.RestrictToMyDrive = properties.RestrictToMyDrive;
                    request.Spaces = properties.Spaces;
                }

                return request.Execute();
            }

        }

        /// <summary>The "channels" collection of methods.</summary>
        public class Channels
        {




            /// <summary>Stop watching resources through this channel</summary>
            /// <param name="ChannelBody">The body of the request.</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public void Stop (Google.Apis.Drive.v3.Data.Channel ChannelBody, string ServiceAccount = null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {
                var request = GetService(ServiceAccount).Channels.Stop(ChannelBody);

                if (StandardQueryParams != null) {
                    request.Fields = StandardQueryParams.fields;
                    request.QuotaUser = StandardQueryParams.quotaUser;
                    request.UserIp = StandardQueryParams.userIp;
                }



                request.Execute();
            }

        }

        /// <summary>The "comments" collection of methods.</summary>
        public class Comments
        {

            /// <summary>Optional parameters for the Comments Get method.</summary>
            public class CommentsGetProperties
            {
                /// <summary>Whether to return deleted comments. Deleted comments will not include their original content.</summary>
                public System.Nullable<bool> IncludeDeleted = null;
            }

            /// <summary>Optional parameters for the Comments List method.</summary>
            public class CommentsListProperties
            {
                /// <summary>Whether to include deleted comments. Deleted comments will not include their original content.</summary>
                public System.Nullable<bool> IncludeDeleted = null;

                /// <summary>The maximum number of comments to return per page.</summary>
                public System.Nullable<int> PageSize = null;

                /// <summary>The minimum value of 'modifiedTime' for the result comments (RFC 3339 date-time).</summary>
                public string StartModifiedTime = null;

                /// <summary>A delegate that is used to start a progress bar.</summary>
                public Action<string, string> StartProgressBar = null;

                /// <summary>A delegate that is used to update a progress bar.</summary>
                public Action<int, int, string, string> UpdateProgressBar = null;

                /// <summary>A counter for the total number of results to pull when iterating through paged results.</summary>
                public int TotalResults = 0;
            }


            /// <summary>Creates a new comment on a file.</summary>
            /// <param name="CommentBody">The body of the request.</param>
            /// <param name="FileId">The ID of the file.</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public Google.Apis.Drive.v3.Data.Comment Create (Google.Apis.Drive.v3.Data.Comment CommentBody, string FileId, string ServiceAccount = null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {
                var request = GetService(ServiceAccount).Comments.Create(CommentBody, FileId);

                if (StandardQueryParams != null) {
                    request.Fields = StandardQueryParams.fields;
                    request.QuotaUser = StandardQueryParams.quotaUser;
                    request.UserIp = StandardQueryParams.userIp;
                }



                return request.Execute();
            }

            /// <summary>Deletes a comment.</summary>
            /// <param name="FileId">The ID of the file.</param>
            /// <param name="CommentId">The ID of the comment.</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public void Delete (string FileId, string CommentId, string ServiceAccount = null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {
                var request = GetService(ServiceAccount).Comments.Delete(FileId, CommentId);

                if (StandardQueryParams != null) {
                    request.Fields = StandardQueryParams.fields;
                    request.QuotaUser = StandardQueryParams.quotaUser;
                    request.UserIp = StandardQueryParams.userIp;
                }



                request.Execute();
            }

            /// <summary>Gets a comment by ID.</summary>
            /// <param name="FileId">The ID of the file.</param>
            /// <param name="CommentId">The ID of the comment.</param>
            /// <param name="properties">The optional properties for this method.</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public Google.Apis.Drive.v3.Data.Comment Get (string FileId, string CommentId, CommentsGetProperties properties= null, string ServiceAccount = null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {
                var request = GetService(ServiceAccount).Comments.Get(FileId, CommentId);

                if (StandardQueryParams != null) {
                    request.Fields = StandardQueryParams.fields;
                    request.QuotaUser = StandardQueryParams.quotaUser;
                    request.UserIp = StandardQueryParams.userIp;
                }

                if (properties != null)    {
                    request.IncludeDeleted = properties.IncludeDeleted;
                }

                return request.Execute();
            }

            /// <summary>Lists a file's comments.</summary>
            /// <param name="FileId">The ID of the file.</param>
            /// <param name="properties">The optional properties for this method.</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public List<Google.Apis.Drive.v3.Data.CommentList> List(
                string FileId, CommentsListProperties properties= null, string ServiceAccount = null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {
                var results = new List<Google.Apis.Drive.v3.Data.CommentList>();

                v3.CommentsResource.ListRequest request = GetService(ServiceAccount).Comments.List(FileId);

                if (StandardQueryParams != null) {
                    request.Fields = StandardQueryParams.fields;
                    request.QuotaUser = StandardQueryParams.quotaUser;
                    request.UserIp = StandardQueryParams.userIp;
                }

                if (properties != null)
                {
                    request.IncludeDeleted = properties.IncludeDeleted;
                    request.PageSize = properties.PageSize;
                    request.StartModifiedTime = properties.StartModifiedTime;

                }

                if (null != properties.StartProgressBar)
                {
                    properties.StartProgressBar("Gathering Comments",
                        string.Format("-Collecting Comments page 1"));
                }

                Google.Apis.Drive.v3.Data.CommentList pagedResult = request.Execute();

                if (pagedResult != null)
                {
                    results.Add(pagedResult);

                    while (!string.IsNullOrWhiteSpace(pagedResult.NextPageToken) &&
                        pagedResult.NextPageToken != request.PageToken &&
                    (properties.TotalResults == 0 || results.Count < properties.TotalResults))
                    {
                        request.PageToken = pagedResult.NextPageToken;

                        if (null != properties.UpdateProgressBar)
                        {
                            properties.UpdateProgressBar(5, 10, "Gathering Comments",
                                    string.Format("-Collecting Comments page {0}",
                                        (results.Count + 1).ToString()));
                        }
                        pagedResult = request.Execute();
                        results.Add(pagedResult);
                    }

                    if (null != properties.UpdateProgressBar)
                    {
                        properties.UpdateProgressBar(1, 2, "Gathering Comments",
                                string.Format("-Returning {0} pages.", results.Count.ToString()));
                    }
                }

                return results;
            }

            /// <summary>Updates a comment with patch semantics.</summary>
            /// <param name="CommentBody">The body of the request.</param>
            /// <param name="FileId">The ID of the file.</param>
            /// <param name="CommentId">The ID of the comment.</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public Google.Apis.Drive.v3.Data.Comment Update (Google.Apis.Drive.v3.Data.Comment CommentBody, string FileId, string CommentId, string ServiceAccount = null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {
                var request = GetService(ServiceAccount).Comments.Update(CommentBody, FileId, CommentId);

                if (StandardQueryParams != null) {
                    request.Fields = StandardQueryParams.fields;
                    request.QuotaUser = StandardQueryParams.quotaUser;
                    request.UserIp = StandardQueryParams.userIp;
                }



                return request.Execute();
            }

        }

        /// <summary>The "files" collection of methods.</summary>
        public class Files
        {

            /// <summary>Optional parameters for the Files Copy method.</summary>
            public class FilesCopyProperties
            {
                /// <summary>Whether to ignore the domain's default visibility settings for the created file. Domain administrators can choose to make all uploaded files visible to the domain by default; this parameter bypasses that behavior for the request. Permissions are still inherited from parent folders.</summary>
                public System.Nullable<bool> IgnoreDefaultVisibility = null;

                /// <summary>Whether to set the 'keepForever' field in the new head revision. This is only applicable to files with binary content in Drive.</summary>
                public System.Nullable<bool> KeepRevisionForever = null;

                /// <summary>A language hint for OCR processing during image import (ISO 639-1 code).</summary>
                public string OcrLanguage = null;
            }

            /// <summary>Optional parameters for the Files Create method.</summary>
            public class FilesCreateProperties
            {
                /// <summary>Whether to ignore the domain's default visibility settings for the created file. Domain administrators can choose to make all uploaded files visible to the domain by default; this parameter bypasses that behavior for the request. Permissions are still inherited from parent folders.</summary>
                public System.Nullable<bool> IgnoreDefaultVisibility = null;

                /// <summary>Whether to set the 'keepForever' field in the new head revision. This is only applicable to files with binary content in Drive.</summary>
                public System.Nullable<bool> KeepRevisionForever = null;

                /// <summary>A language hint for OCR processing during image import (ISO 639-1 code).</summary>
                public string OcrLanguage = null;

                /// <summary>Whether to use the uploaded content as indexable text.</summary>
                public System.Nullable<bool> UseContentAsIndexableText = null;
            }

            /// <summary>Optional parameters for the Files GenerateIds method.</summary>
            public class FilesGenerateIdsProperties
            {
                /// <summary>The number of IDs to return.</summary>
                public System.Nullable<int> Count = null;

                /// <summary>The space in which the IDs can be used to create new files. Supported values are 'drive' and 'appDataFolder'.</summary>
                public string Space = null;
            }

            /// <summary>Optional parameters for the Files Get method.</summary>
            public class FilesGetProperties
            {
                /// <summary>Whether the user is acknowledging the risk of downloading known malware or other abusive files. This is only applicable when alt=media.</summary>
                public System.Nullable<bool> AcknowledgeAbuse = null;
            }

            /// <summary>Optional parameters for the Files List method.</summary>
            public class FilesListProperties
            {
                /// <summary>The source of files to list.</summary>
                public v3.FilesResource.ListRequest.CorpusEnum?Corpus = null;

                /// <summary>A comma-separated list of sort keys. Valid keys are 'createdTime', 'folder', 'modifiedByMeTime', 'modifiedTime', 'name', 'quotaBytesUsed', 'recency', 'sharedWithMeTime', 'starred', and 'viewedByMeTime'. Each key sorts ascending by default, but may be reversed with the 'desc' modifier. Example usage: ?orderBy=folder,modifiedTime desc,name. Please note that there is a current limitation for users with approximately one million files in which the requested sort order is ignored.</summary>
                public string OrderBy = null;

                /// <summary>The maximum number of files to return per page.</summary>
                public System.Nullable<int> PageSize = null;

                /// <summary>A query for filtering the file results. See the "Search for Files" guide for supported syntax.</summary>
                public string Q = null;

                /// <summary>A comma-separated list of spaces to query within the corpus. Supported values are 'drive', 'appDataFolder' and 'photos'.</summary>
                public string Spaces = null;

                /// <summary>A delegate that is used to start a progress bar.</summary>
                public Action<string, string> StartProgressBar = null;

                /// <summary>A delegate that is used to update a progress bar.</summary>
                public Action<int, int, string, string> UpdateProgressBar = null;

                /// <summary>A counter for the total number of results to pull when iterating through paged results.</summary>
                public int TotalResults = 0;
            }

            /// <summary>Optional parameters for the Files Update method.</summary>
            public class FilesUpdateProperties
            {
                /// <summary>A comma-separated list of parent IDs to add.</summary>
                public string AddParents = null;

                /// <summary>Whether to set the 'keepForever' field in the new head revision. This is only applicable to files with binary content in Drive.</summary>
                public System.Nullable<bool> KeepRevisionForever = null;

                /// <summary>A language hint for OCR processing during image import (ISO 639-1 code).</summary>
                public string OcrLanguage = null;

                /// <summary>A comma-separated list of parent IDs to remove.</summary>
                public string RemoveParents = null;

                /// <summary>Whether to use the uploaded content as indexable text.</summary>
                public System.Nullable<bool> UseContentAsIndexableText = null;
            }

            /// <summary>Optional parameters for the Files Watch method.</summary>
            public class FilesWatchProperties
            {
                /// <summary>Whether the user is acknowledging the risk of downloading known malware or other abusive files. This is only applicable when alt=media.</summary>
                public System.Nullable<bool> AcknowledgeAbuse = null;
            }


            /// <summary>Creates a copy of a file and applies any requested updates with patch semantics.</summary>
            /// <param name="FileBody">The body of the request.</param>
            /// <param name="FileId">The ID of the file.</param>
            /// <param name="properties">The optional properties for this method.</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public Google.Apis.Drive.v3.Data.File Copy (Google.Apis.Drive.v3.Data.File FileBody, string FileId, FilesCopyProperties properties= null, string ServiceAccount = null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {
                var request = GetService(ServiceAccount).Files.Copy(FileBody, FileId);

                if (StandardQueryParams != null) {
                    request.Fields = StandardQueryParams.fields;
                    request.QuotaUser = StandardQueryParams.quotaUser;
                    request.UserIp = StandardQueryParams.userIp;
                }

                if (properties != null)    {
                    request.IgnoreDefaultVisibility = properties.IgnoreDefaultVisibility;
                    request.KeepRevisionForever = properties.KeepRevisionForever;
                    request.OcrLanguage = properties.OcrLanguage;
                }

                return request.Execute();
            }

            /// <summary>Creates a new file.</summary>
            /// <param name="FileBody">The body of the request.</param>
            /// <param name="properties">The optional properties for this method.</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public Google.Apis.Drive.v3.Data.File Create (Google.Apis.Drive.v3.Data.File FileBody, FilesCreateProperties properties= null, string ServiceAccount = null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {
                var request = GetService(ServiceAccount).Files.Create(FileBody);

                if (StandardQueryParams != null) {
                    request.Fields = StandardQueryParams.fields;
                    request.QuotaUser = StandardQueryParams.quotaUser;
                    request.UserIp = StandardQueryParams.userIp;
                }

                if (properties != null)    {
                    request.IgnoreDefaultVisibility = properties.IgnoreDefaultVisibility;
                    request.KeepRevisionForever = properties.KeepRevisionForever;
                    request.OcrLanguage = properties.OcrLanguage;
                    request.UseContentAsIndexableText = properties.UseContentAsIndexableText;
                }

                return request.Execute();
            }


            public void Create (Google.Apis.Drive.v3.Data.File FileBody, System.IO.Stream stream, string contentType, FilesCreateProperties properties= null, string ServiceAccount = null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {
                var request = GetService(ServiceAccount).Files.Create(FileBody, stream, contentType);

                if (properties != null)    {
                    request.IgnoreDefaultVisibility = properties.IgnoreDefaultVisibility;
                    request.KeepRevisionForever = properties.KeepRevisionForever;
                    request.OcrLanguage = properties.OcrLanguage;
                    request.UseContentAsIndexableText = properties.UseContentAsIndexableText;
                }

                request.Upload();
            }

            /// <summary>Permanently deletes a file owned by the user without moving it to the trash. If the target is a
            /// folder, all descendants owned by the user are also deleted.</summary>
            /// <param name="FileId">The ID of the file.</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public void Delete (string FileId, string ServiceAccount = null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {
                var request = GetService(ServiceAccount).Files.Delete(FileId);

                if (StandardQueryParams != null) {
                    request.Fields = StandardQueryParams.fields;
                    request.QuotaUser = StandardQueryParams.quotaUser;
                    request.UserIp = StandardQueryParams.userIp;
                }



                request.Execute();
            }

            /// <summary>Permanently deletes all of the user's trashed files.</summary>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public void EmptyTrash (string ServiceAccount = null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {
                var request = GetService(ServiceAccount).Files.EmptyTrash();

                if (StandardQueryParams != null) {
                    request.Fields = StandardQueryParams.fields;
                    request.QuotaUser = StandardQueryParams.quotaUser;
                    request.UserIp = StandardQueryParams.userIp;
                }



                request.Execute();
            }

            /// <summary>Exports a Google Doc to the requested MIME type and returns the exported content.</summary>
            /// <param name="FileId">The ID of the file.</param>
            /// <param name="MimeType">The MIME type of the format
            /// requested for this export.</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public void Export (string FileId, string MimeType, string DownloadPath, string ServiceAccount = null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {
                var request = GetService(ServiceAccount).Files.Export(FileId, MimeType);

                if (StandardQueryParams != null) {
                    request.Fields = StandardQueryParams.fields;
                    request.QuotaUser = StandardQueryParams.quotaUser;
                    request.UserIp = StandardQueryParams.userIp;
                }

                using (var fileStream = new System.IO.FileStream(
                    DownloadPath, System.IO.FileMode.Create, System.IO.FileAccess.Write))
                {
                    request.Download(fileStream);
                }
            }

            /// <summary>Generates a set of file IDs which can be provided in create requests.</summary>
            /// <param name="properties">The optional properties for this method.</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public Google.Apis.Drive.v3.Data.GeneratedIds GenerateIds (FilesGenerateIdsProperties properties= null, string ServiceAccount = null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {
                var request = GetService(ServiceAccount).Files.GenerateIds();

                if (StandardQueryParams != null) {
                    request.Fields = StandardQueryParams.fields;
                    request.QuotaUser = StandardQueryParams.quotaUser;
                    request.UserIp = StandardQueryParams.userIp;
                }

                if (properties != null)    {
                    request.Count = properties.Count;
                    request.Space = properties.Space;
                }

                return request.Execute();
            }

            /// <summary>Gets a file's metadata or content by ID.</summary>
            /// <param name="FileId">The ID of the file.</param>
            /// <param name="properties">The optional properties for this method.</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public Google.Apis.Drive.v3.Data.File Get (string FileId, FilesGetProperties properties= null, string ServiceAccount = null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {
                var request = GetService(ServiceAccount).Files.Get(FileId);

                if (StandardQueryParams != null) {
                    request.Fields = StandardQueryParams.fields;
                    request.QuotaUser = StandardQueryParams.quotaUser;
                    request.UserIp = StandardQueryParams.userIp;
                }

                if (properties != null)    {
                    request.AcknowledgeAbuse = properties.AcknowledgeAbuse;
                }

                return request.Execute();
            }

            /// <summary>Lists or searches files.</summary>
            /// <param name="properties">The optional properties for this method.</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public List<Google.Apis.Drive.v3.Data.FileList> List(
                FilesListProperties properties= null, string ServiceAccount = null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {
                var results = new List<Google.Apis.Drive.v3.Data.FileList>();

                v3.FilesResource.ListRequest request = GetService(ServiceAccount).Files.List();

                if (StandardQueryParams != null) {
                    request.Fields = StandardQueryParams.fields;
                    request.QuotaUser = StandardQueryParams.quotaUser;
                    request.UserIp = StandardQueryParams.userIp;
                }

                if (properties != null)
                {
                    request.Corpus = properties.Corpus;
                    request.OrderBy = properties.OrderBy;
                    request.PageSize = properties.PageSize;
                    request.Q = properties.Q;
                    request.Spaces = properties.Spaces;

                }

                if (null != properties.StartProgressBar)
                {
                    properties.StartProgressBar("Gathering Files",
                        string.Format("-Collecting Files page 1"));
                }

                Google.Apis.Drive.v3.Data.FileList pagedResult = request.Execute();

                if (pagedResult != null)
                {
                    results.Add(pagedResult);

                    while (!string.IsNullOrWhiteSpace(pagedResult.NextPageToken) &&
                        pagedResult.NextPageToken != request.PageToken &&
                    (properties.TotalResults == 0 || results.Count < properties.TotalResults))
                    {
                        request.PageToken = pagedResult.NextPageToken;

                        if (null != properties.UpdateProgressBar)
                        {
                            properties.UpdateProgressBar(5, 10, "Gathering Files",
                                    string.Format("-Collecting Files page {0}",
                                        (results.Count + 1).ToString()));
                        }
                        pagedResult = request.Execute();
                        results.Add(pagedResult);
                    }

                    if (null != properties.UpdateProgressBar)
                    {
                        properties.UpdateProgressBar(1, 2, "Gathering Files",
                                string.Format("-Returning {0} pages.", results.Count.ToString()));
                    }
                }

                return results;
            }

            /// <summary>Updates a file's metadata and/or content with patch semantics.</summary>
            /// <param name="FileBody">The body of the request.</param>
            /// <param name="FileId">The ID of the file.</param>
            /// <param name="properties">The optional properties for this method.</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public Google.Apis.Drive.v3.Data.File Update (Google.Apis.Drive.v3.Data.File FileBody, string FileId, FilesUpdateProperties properties= null, string ServiceAccount = null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {
                var request = GetService(ServiceAccount).Files.Update(FileBody, FileId);

                if (StandardQueryParams != null) {
                    request.Fields = StandardQueryParams.fields;
                    request.QuotaUser = StandardQueryParams.quotaUser;
                    request.UserIp = StandardQueryParams.userIp;
                }

                if (properties != null)    {
                    request.AddParents = properties.AddParents;
                    request.KeepRevisionForever = properties.KeepRevisionForever;
                    request.OcrLanguage = properties.OcrLanguage;
                    request.RemoveParents = properties.RemoveParents;
                    request.UseContentAsIndexableText = properties.UseContentAsIndexableText;
                }

                return request.Execute();
            }


            public void Update (Google.Apis.Drive.v3.Data.File FileBody, string fileId, System.IO.Stream stream, string contentType, FilesUpdateProperties properties= null, string ServiceAccount = null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {
                var request = GetService(ServiceAccount).Files.Update(FileBody, fileId, stream, contentType);

                if (properties != null)    {
                    request.AddParents = properties.AddParents;
                    request.KeepRevisionForever = properties.KeepRevisionForever;
                    request.OcrLanguage = properties.OcrLanguage;
                    request.RemoveParents = properties.RemoveParents;
                    request.UseContentAsIndexableText = properties.UseContentAsIndexableText;
                }

                request.Upload();
            }

            /// <summary>Subscribes to changes to a file</summary>
            /// <param name="ChannelBody">The body of the request.</param>
            /// <param name="FileId">The ID of the file.</param>
            /// <param name="properties">The optional properties for this method.</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public Google.Apis.Drive.v3.Data.Channel Watch (Google.Apis.Drive.v3.Data.Channel ChannelBody, string FileId, FilesWatchProperties properties= null, string ServiceAccount = null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {
                var request = GetService(ServiceAccount).Files.Watch(ChannelBody, FileId);

                if (StandardQueryParams != null) {
                    request.Fields = StandardQueryParams.fields;
                    request.QuotaUser = StandardQueryParams.quotaUser;
                    request.UserIp = StandardQueryParams.userIp;
                }

                if (properties != null)    {
                    request.AcknowledgeAbuse = properties.AcknowledgeAbuse;
                }

                return request.Execute();
            }

        }

        /// <summary>The "permissions" collection of methods.</summary>
        public class Permissions
        {

            /// <summary>Optional parameters for the Permissions Create method.</summary>
            public class PermissionsCreateProperties
            {
                /// <summary>A custom message to include in the notification email.</summary>
                public string EmailMessage = null;

                /// <summary>Whether to send a notification email when sharing to users or groups. This defaults to true for users and groups, and is not allowed for other requests. It must not be disabled for ownership transfers.</summary>
                public System.Nullable<bool> SendNotificationEmail = null;

                /// <summary>Whether to transfer ownership to the specified user and downgrade the current owner to a writer. This parameter is required as an acknowledgement of the side effect.</summary>
                public System.Nullable<bool> TransferOwnership = null;
            }

            /// <summary>Optional parameters for the Permissions Update method.</summary>
            public class PermissionsUpdateProperties
            {
                /// <summary>Whether to remove the expiration date.</summary>
                public System.Nullable<bool> RemoveExpiration = null;

                /// <summary>Whether to transfer ownership to the specified user and downgrade the current owner to a writer. This parameter is required as an acknowledgement of the side effect.</summary>
                public System.Nullable<bool> TransferOwnership = null;
            }


            /// <summary>Creates a permission for a file.</summary>
            /// <param name="PermissionBody">The body of the request.</param>
            /// <param name="FileId">The ID of the file.</param>
            /// <param name="properties">The optional properties for this method.</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public Google.Apis.Drive.v3.Data.Permission Create (Google.Apis.Drive.v3.Data.Permission PermissionBody, string FileId, PermissionsCreateProperties properties= null, string ServiceAccount = null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {
                var request = GetService(ServiceAccount).Permissions.Create(PermissionBody, FileId);

                if (StandardQueryParams != null) {
                    request.Fields = StandardQueryParams.fields;
                    request.QuotaUser = StandardQueryParams.quotaUser;
                    request.UserIp = StandardQueryParams.userIp;
                }

                if (properties != null)    {
                    request.EmailMessage = properties.EmailMessage;
                    request.SendNotificationEmail = properties.SendNotificationEmail;
                    request.TransferOwnership = properties.TransferOwnership;
                }

                return request.Execute();
            }

            /// <summary>Deletes a permission.</summary>
            /// <param name="FileId">The ID of the file.</param>
            /// <param name="PermissionId">The ID of the
            /// permission.</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public void Delete (string FileId, string PermissionId, string ServiceAccount = null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {
                var request = GetService(ServiceAccount).Permissions.Delete(FileId, PermissionId);

                if (StandardQueryParams != null) {
                    request.Fields = StandardQueryParams.fields;
                    request.QuotaUser = StandardQueryParams.quotaUser;
                    request.UserIp = StandardQueryParams.userIp;
                }



                request.Execute();
            }

            /// <summary>Gets a permission by ID.</summary>
            /// <param name="FileId">The ID of the file.</param>
            /// <param name="PermissionId">The ID of the
            /// permission.</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public Google.Apis.Drive.v3.Data.Permission Get (string FileId, string PermissionId, string ServiceAccount = null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {
                var request = GetService(ServiceAccount).Permissions.Get(FileId, PermissionId);

                if (StandardQueryParams != null) {
                    request.Fields = StandardQueryParams.fields;
                    request.QuotaUser = StandardQueryParams.quotaUser;
                    request.UserIp = StandardQueryParams.userIp;
                }



                return request.Execute();
            }

            /// <summary>Lists a file's permissions.</summary>
            /// <param name="FileId">The ID of the file.</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public Google.Apis.Drive.v3.Data.PermissionList List (string FileId, string ServiceAccount = null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {
                var request = GetService(ServiceAccount).Permissions.List(FileId);

                if (StandardQueryParams != null) {
                    request.Fields = StandardQueryParams.fields;
                    request.QuotaUser = StandardQueryParams.quotaUser;
                    request.UserIp = StandardQueryParams.userIp;
                }



                return request.Execute();
            }

            /// <summary>Updates a permission with patch semantics.</summary>
            /// <param name="PermissionBody">The body of the request.</param>
            /// <param name="FileId">The ID of the file.</param>
            /// <param name="PermissionId">The ID of the
            /// permission.</param>
            /// <param name="properties">The optional properties for this method.</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public Google.Apis.Drive.v3.Data.Permission Update (Google.Apis.Drive.v3.Data.Permission PermissionBody, string FileId, string PermissionId, PermissionsUpdateProperties properties= null, string ServiceAccount = null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {
                var request = GetService(ServiceAccount).Permissions.Update(PermissionBody, FileId, PermissionId);

                if (StandardQueryParams != null) {
                    request.Fields = StandardQueryParams.fields;
                    request.QuotaUser = StandardQueryParams.quotaUser;
                    request.UserIp = StandardQueryParams.userIp;
                }

                if (properties != null)    {
                    request.RemoveExpiration = properties.RemoveExpiration;
                    request.TransferOwnership = properties.TransferOwnership;
                }

                return request.Execute();
            }

        }

        /// <summary>The "replies" collection of methods.</summary>
        public class Replies
        {

            /// <summary>Optional parameters for the Replies Get method.</summary>
            public class RepliesGetProperties
            {
                /// <summary>Whether to return deleted replies. Deleted replies will not include their original content.</summary>
                public System.Nullable<bool> IncludeDeleted = null;
            }

            /// <summary>Optional parameters for the Replies List method.</summary>
            public class RepliesListProperties
            {
                /// <summary>Whether to include deleted replies. Deleted replies will not include their original content.</summary>
                public System.Nullable<bool> IncludeDeleted = null;

                /// <summary>The maximum number of replies to return per page.</summary>
                public System.Nullable<int> PageSize = null;

                /// <summary>A delegate that is used to start a progress bar.</summary>
                public Action<string, string> StartProgressBar = null;

                /// <summary>A delegate that is used to update a progress bar.</summary>
                public Action<int, int, string, string> UpdateProgressBar = null;

                /// <summary>A counter for the total number of results to pull when iterating through paged results.</summary>
                public int TotalResults = 0;
            }


            /// <summary>Creates a new reply to a comment.</summary>
            /// <param name="ReplyBody">The body of the request.</param>
            /// <param name="FileId">The ID of the file.</param>
            /// <param name="CommentId">The ID of the comment.</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public Google.Apis.Drive.v3.Data.Reply Create (Google.Apis.Drive.v3.Data.Reply ReplyBody, string FileId, string CommentId, string ServiceAccount = null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {
                var request = GetService(ServiceAccount).Replies.Create(ReplyBody, FileId, CommentId);

                if (StandardQueryParams != null) {
                    request.Fields = StandardQueryParams.fields;
                    request.QuotaUser = StandardQueryParams.quotaUser;
                    request.UserIp = StandardQueryParams.userIp;
                }



                return request.Execute();
            }

            /// <summary>Deletes a reply.</summary>
            /// <param name="FileId">The ID of the file.</param>
            /// <param name="CommentId">The ID of the
            /// comment.</param>
            /// <param name="ReplyId">The ID of the reply.</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public void Delete (string FileId, string CommentId, string ReplyId, string ServiceAccount = null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {
                var request = GetService(ServiceAccount).Replies.Delete(FileId, CommentId, ReplyId);

                if (StandardQueryParams != null) {
                    request.Fields = StandardQueryParams.fields;
                    request.QuotaUser = StandardQueryParams.quotaUser;
                    request.UserIp = StandardQueryParams.userIp;
                }



                request.Execute();
            }

            /// <summary>Gets a reply by ID.</summary>
            /// <param name="FileId">The ID of the file.</param>
            /// <param name="CommentId">The ID of the
            /// comment.</param>
            /// <param name="ReplyId">The ID of the reply.</param>
            /// <param name="properties">The optional properties for this method.</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public Google.Apis.Drive.v3.Data.Reply Get (string FileId, string CommentId, string ReplyId, RepliesGetProperties properties= null, string ServiceAccount = null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {
                var request = GetService(ServiceAccount).Replies.Get(FileId, CommentId, ReplyId);

                if (StandardQueryParams != null) {
                    request.Fields = StandardQueryParams.fields;
                    request.QuotaUser = StandardQueryParams.quotaUser;
                    request.UserIp = StandardQueryParams.userIp;
                }

                if (properties != null)    {
                    request.IncludeDeleted = properties.IncludeDeleted;
                }

                return request.Execute();
            }

            /// <summary>Lists a comment's replies.</summary>
            /// <param name="FileId">The ID of the file.</param>
            /// <param name="CommentId">The ID of the comment.</param>
            /// <param name="properties">The optional properties for this method.</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public List<Google.Apis.Drive.v3.Data.ReplyList> List(
                string FileId, string CommentId, RepliesListProperties properties= null, string ServiceAccount = null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {
                var results = new List<Google.Apis.Drive.v3.Data.ReplyList>();

                v3.RepliesResource.ListRequest request = GetService(ServiceAccount).Replies.List(FileId, CommentId);

                if (StandardQueryParams != null) {
                    request.Fields = StandardQueryParams.fields;
                    request.QuotaUser = StandardQueryParams.quotaUser;
                    request.UserIp = StandardQueryParams.userIp;
                }

                if (properties != null)
                {
                    request.IncludeDeleted = properties.IncludeDeleted;
                    request.PageSize = properties.PageSize;

                }

                if (null != properties.StartProgressBar)
                {
                    properties.StartProgressBar("Gathering Replies",
                        string.Format("-Collecting Replies page 1"));
                }

                Google.Apis.Drive.v3.Data.ReplyList pagedResult = request.Execute();

                if (pagedResult != null)
                {
                    results.Add(pagedResult);

                    while (!string.IsNullOrWhiteSpace(pagedResult.NextPageToken) &&
                        pagedResult.NextPageToken != request.PageToken &&
                    (properties.TotalResults == 0 || results.Count < properties.TotalResults))
                    {
                        request.PageToken = pagedResult.NextPageToken;

                        if (null != properties.UpdateProgressBar)
                        {
                            properties.UpdateProgressBar(5, 10, "Gathering Replies",
                                    string.Format("-Collecting Replies page {0}",
                                        (results.Count + 1).ToString()));
                        }
                        pagedResult = request.Execute();
                        results.Add(pagedResult);
                    }

                    if (null != properties.UpdateProgressBar)
                    {
                        properties.UpdateProgressBar(1, 2, "Gathering Replies",
                                string.Format("-Returning {0} pages.", results.Count.ToString()));
                    }
                }

                return results;
            }

            /// <summary>Updates a reply with patch semantics.</summary>
            /// <param name="ReplyBody">The body of the request.</param>
            /// <param name="FileId">The ID of the file.</param>
            /// <param name="CommentId">The ID of the
            /// comment.</param>
            /// <param name="ReplyId">The ID of the reply.</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public Google.Apis.Drive.v3.Data.Reply Update (Google.Apis.Drive.v3.Data.Reply ReplyBody, string FileId, string CommentId, string ReplyId, string ServiceAccount = null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {
                var request = GetService(ServiceAccount).Replies.Update(ReplyBody, FileId, CommentId, ReplyId);

                if (StandardQueryParams != null) {
                    request.Fields = StandardQueryParams.fields;
                    request.QuotaUser = StandardQueryParams.quotaUser;
                    request.UserIp = StandardQueryParams.userIp;
                }



                return request.Execute();
            }

        }

        /// <summary>The "revisions" collection of methods.</summary>
        public class Revisions
        {

            /// <summary>Optional parameters for the Revisions Get method.</summary>
            public class RevisionsGetProperties
            {
                /// <summary>Whether the user is acknowledging the risk of downloading known malware or other abusive files. This is only applicable when alt=media.</summary>
                public System.Nullable<bool> AcknowledgeAbuse = null;
            }

            /// <summary>Optional parameters for the Revisions List method.</summary>
            public class RevisionsListProperties
            {
                /// <summary>The maximum number of revisions to return per page.</summary>
                public System.Nullable<int> PageSize = null;

                /// <summary>A delegate that is used to start a progress bar.</summary>
                public Action<string, string> StartProgressBar = null;

                /// <summary>A delegate that is used to update a progress bar.</summary>
                public Action<int, int, string, string> UpdateProgressBar = null;

                /// <summary>A counter for the total number of results to pull when iterating through paged results.</summary>
                public int TotalResults = 0;
            }


            /// <summary>Permanently deletes a revision. This method is only applicable to files with binary content in
            /// Drive.</summary>
            /// <param name="FileId">The ID of the file.</param>
            /// <param name="RevisionId">The ID of the
            /// revision.</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public void Delete (string FileId, string RevisionId, string ServiceAccount = null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {
                var request = GetService(ServiceAccount).Revisions.Delete(FileId, RevisionId);

                if (StandardQueryParams != null) {
                    request.Fields = StandardQueryParams.fields;
                    request.QuotaUser = StandardQueryParams.quotaUser;
                    request.UserIp = StandardQueryParams.userIp;
                }



                request.Execute();
            }

            /// <summary>Gets a revision's metadata or content by ID.</summary>
            /// <param name="FileId">The ID of the file.</param>
            /// <param name="RevisionId">The ID of the
            /// revision.</param>
            /// <param name="properties">The optional properties for this method.</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public Google.Apis.Drive.v3.Data.Revision Get (string FileId, string RevisionId, RevisionsGetProperties properties= null, string ServiceAccount = null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {
                var request = GetService(ServiceAccount).Revisions.Get(FileId, RevisionId);

                if (StandardQueryParams != null) {
                    request.Fields = StandardQueryParams.fields;
                    request.QuotaUser = StandardQueryParams.quotaUser;
                    request.UserIp = StandardQueryParams.userIp;
                }

                if (properties != null)    {
                    request.AcknowledgeAbuse = properties.AcknowledgeAbuse;
                }

                return request.Execute();
            }

            /// <summary>Lists a file's revisions.</summary>
            /// <param name="FileId">The ID of the file.</param>
            /// <param name="properties">The optional properties for this method.</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public List<Google.Apis.Drive.v3.Data.RevisionList> List(
                string FileId, RevisionsListProperties properties= null, string ServiceAccount = null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {
                var results = new List<Google.Apis.Drive.v3.Data.RevisionList>();

                v3.RevisionsResource.ListRequest request = GetService(ServiceAccount).Revisions.List(FileId);

                if (StandardQueryParams != null) {
                    request.Fields = StandardQueryParams.fields;
                    request.QuotaUser = StandardQueryParams.quotaUser;
                    request.UserIp = StandardQueryParams.userIp;
                }

                if (properties != null)
                {
                    request.PageSize = properties.PageSize;

                }

                if (null != properties.StartProgressBar)
                {
                    properties.StartProgressBar("Gathering Revisions",
                        string.Format("-Collecting Revisions page 1"));
                }

                Google.Apis.Drive.v3.Data.RevisionList pagedResult = request.Execute();

                if (pagedResult != null)
                {
                    results.Add(pagedResult);

                    while (!string.IsNullOrWhiteSpace(pagedResult.NextPageToken) &&
                        pagedResult.NextPageToken != request.PageToken &&
                    (properties.TotalResults == 0 || results.Count < properties.TotalResults))
                    {
                        request.PageToken = pagedResult.NextPageToken;

                        if (null != properties.UpdateProgressBar)
                        {
                            properties.UpdateProgressBar(5, 10, "Gathering Revisions",
                                    string.Format("-Collecting Revisions page {0}",
                                        (results.Count + 1).ToString()));
                        }
                        pagedResult = request.Execute();
                        results.Add(pagedResult);
                    }

                    if (null != properties.UpdateProgressBar)
                    {
                        properties.UpdateProgressBar(1, 2, "Gathering Revisions",
                                string.Format("-Returning {0} pages.", results.Count.ToString()));
                    }
                }

                return results;
            }

            /// <summary>Updates a revision with patch semantics.</summary>
            /// <param name="RevisionBody">The body of the request.</param>
            /// <param name="FileId">The ID of the file.</param>
            /// <param name="RevisionId">The ID of the
            /// revision.</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public Google.Apis.Drive.v3.Data.Revision Update (Google.Apis.Drive.v3.Data.Revision RevisionBody, string FileId, string RevisionId, string ServiceAccount = null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {
                var request = GetService(ServiceAccount).Revisions.Update(RevisionBody, FileId, RevisionId);

                if (StandardQueryParams != null) {
                    request.Fields = StandardQueryParams.fields;
                    request.QuotaUser = StandardQueryParams.quotaUser;
                    request.UserIp = StandardQueryParams.userIp;
                }



                return request.Execute();
            }

        }

    }
}