// gShell is licensed under the GNU GENERAL PUBLIC LICENSE, Version 3
//
// http://www.gnu.org/licenses/gpl-3.0.en.html
//
// Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
// an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.
//
// gShell is based upon https://github.com/google/google-api-dotnet-client, which is licensed under the Apache 2.0
// license: https://github.com/google/google-api-dotnet-client/blob/master/LICENSE
//
// gShell is reliant upon the Google Apis. Please see the specific API pages for specific licensing information.

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a fork of google-apis-code-generator:
//       https://github.com/squid808/apis-client-generator
//
//     How neat is that? Pretty neat.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using gShell.Cmdlets.Utilities.OAuth2;
using gShell.dotNet;

namespace gShell.Cmdlets.Groupssettings{

    using System;
    using System.Collections.Generic;
    using System.Management.Automation;

    using Google.Apis.Auth.OAuth2;
    using Google.Apis.Services;
    using v1 = Google.Apis.Groupssettings.v1;
    using Data = Google.Apis.Groupssettings.v1.Data;

    using gShell.dotNet.Utilities;
    using gShell.dotNet.Utilities.OAuth2;
    using gGroupssettings = gShell.dotNet.Groupssettings;

    /// <summary>
    /// A PowerShell-ready wrapper for the Groupssettings api, as well as the resources and methods therein.
    /// </summary>
    public abstract class GroupssettingsBase : AuthenticatedCmdletBase
    {

        #region Properties

        /// <summary>The gShell dotNet class wrapper base.</summary>
        protected static gGroupssettings mainBase { get; set; }


        /// <summary>An instance of the Groups gShell dotNet resource.</summary>
        public Groups groups { get; set; }

        /// <summary>
        /// Required to be able to store and retrieve the mainBase from the ServiceWrapperDictionary
        /// </summary>
        protected override Type mainBaseType { get { return typeof(gGroupssettings); } }
        #endregion

        #region Constructors
        protected GroupssettingsBase()
        {
            mainBase = new gGroupssettings();

            ServiceWrapperDictionary[mainBaseType] = mainBase;


            groups = new Groups();
        }
        #endregion

        #region Wrapped Methods



        #region Groups

        /// <summary>A wrapper class for the Groups resource.</summary>
        public class Groups
        {




            /// <summary>Gets one resource by id.</summary>
            /// <param name="GroupUniqueId">The resource ID</param>
            public Google.Apis.Groupssettings.v1.Data.Groups Get (string GroupUniqueId)
            {

                return mainBase.groups.Get(GroupUniqueId);
            }



            /// <summary>Updates an existing resource. This method supports patch semantics.</summary>
            /// <param name="GroupsBody">The body of the request.</param>
            /// <param name="GroupUniqueId">The resource ID</param>
            public Google.Apis.Groupssettings.v1.Data.Groups Patch (Google.Apis.Groupssettings.v1.Data.Groups GroupsBody, string GroupUniqueId)
            {

                return mainBase.groups.Patch(GroupsBody, GroupUniqueId);
            }



            /// <summary>Updates an existing resource.</summary>
            /// <param name="GroupsBody">The body of the request.</param>
            /// <param name="GroupUniqueId">The resource ID</param>
            public Google.Apis.Groupssettings.v1.Data.Groups Update (Google.Apis.Groupssettings.v1.Data.Groups GroupsBody, string GroupUniqueId)
            {

                return mainBase.groups.Update(GroupsBody, GroupUniqueId);
            }


        }
        #endregion

        #endregion

    }
}



namespace gShell.dotNet
{
    using System;
    using System.Collections.Generic;

    using gShell.dotNet;
    using gShell.dotNet.Utilities.OAuth2;

    using v1 = Google.Apis.Groupssettings.v1;
    using Data = Google.Apis.Groupssettings.v1.Data;

    /// <summary>The dotNet gShell version of the groupssettings api.</summary>
    public class Groupssettings : ServiceWrapper<v1.GroupssettingsService>, IServiceWrapper<Google.Apis.Services.IClientService>
    {

        protected override bool worksWithGmail { get { return true; } }

        /// <summary>Creates a new v1.Groupssettings service.</summary>
        /// <param name="domain">The domain to which this service will be authenticated.</param>
        /// <param name="authInfo">The authenticated AuthInfo for this user and domain.</param>
        /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>

        protected override v1.GroupssettingsService CreateNewService(string domain, AuthenticatedUserInfo authInfo, string gShellServiceAccount = null)
        {
            return new v1.GroupssettingsService(OAuth2Base.GetGdataInitializer(domain, authInfo));
        }

        /// <summary>Returns the api name and version in {name}:{version} format.</summary>
        public override string apiNameAndVersion { get { return "groupssettings:v1"; } }


        /// <summary>Gets or sets the groups resource class.</summary>
        public Groups groups{ get; set; }

        public Groupssettings()
        {

            groups = new Groups();
        }



        /// <summary>The "groups" collection of methods.</summary>
        public class Groups
        {




            /// <summary>Gets one resource by id.</summary>
            /// <param name="GroupUniqueId">The resource ID</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public Google.Apis.Groupssettings.v1.Data.Groups Get (string GroupUniqueId)
            {
                var request = GetService().Groups.Get(GroupUniqueId);



                return request.Execute();
            }

            /// <summary>Updates an existing resource. This method supports patch semantics.</summary>
            /// <param name="GroupsBody">The body of the request.</param>
            /// <param name="GroupUniqueId">The resource ID</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public Google.Apis.Groupssettings.v1.Data.Groups Patch (Google.Apis.Groupssettings.v1.Data.Groups GroupsBody, string GroupUniqueId)
            {
                var request = GetService().Groups.Patch(GroupsBody, GroupUniqueId);



                return request.Execute();
            }

            /// <summary>Updates an existing resource.</summary>
            /// <param name="GroupsBody">The body of the request.</param>
            /// <param name="GroupUniqueId">The resource ID</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public Google.Apis.Groupssettings.v1.Data.Groups Update (Google.Apis.Groupssettings.v1.Data.Groups GroupsBody, string GroupUniqueId)
            {
                var request = GetService().Groups.Update(GroupsBody, GroupUniqueId);



                return request.Execute();
            }

        }

    }
}