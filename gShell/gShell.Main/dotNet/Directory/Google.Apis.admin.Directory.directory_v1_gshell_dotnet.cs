// gShell is licensed under the GNU GENERAL PUBLIC LICENSE, Version 3
//
// http://www.gnu.org/licenses/gpl-3.0.en.html
//
// Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
// an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.
//
// gShell is based upon https://github.com/google/google-api-dotnet-client, which is licensed under the Apache 2.0
// license: https://github.com/google/google-api-dotnet-client/blob/master/LICENSE
//
// gShell is reliant upon the Google Apis. Please see the specific API pages for specific licensing information.

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a fork of google-apis-code-generator:
//       https://github.com/squid808/apis-client-generator
//
//     How neat is that? Pretty neat.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using gShell.Cmdlets.Utilities.OAuth2;
using gShell.dotNet;

namespace gShell.Cmdlets.Directory{

    using System;
    using System.Collections.Generic;
    using System.Management.Automation;

    using Google.Apis.Auth.OAuth2;
    using Google.Apis.Services;
    using directory_v1 = Google.Apis.admin.Directory.directory_v1;
    using Data = Google.Apis.admin.Directory.directory_v1.Data;

    using gShell.dotNet.Utilities;
    using gShell.dotNet.Utilities.OAuth2;
    using gDirectory = gShell.dotNet.Directory;

    /// <summary>
    /// A PowerShell-ready wrapper for the Directory api, as well as the resources and methods therein.
    /// </summary>
    public abstract class DirectoryBase : StandardParamsCmdletBase
    {

        #region Properties

        /// <summary>The gShell dotNet class wrapper base.</summary>
        protected static gDirectory mainBase { get; set; }


        /// <summary>An instance of the Asps gShell dotNet resource.</summary>
        public Asps asps { get; set; }

        /// <summary>An instance of the Channels gShell dotNet resource.</summary>
        public Channels channels { get; set; }

        /// <summary>An instance of the Chromeosdevices gShell dotNet resource.</summary>
        public Chromeosdevices chromeosdevices { get; set; }

        /// <summary>An instance of the Customers gShell dotNet resource.</summary>
        public Customers customers { get; set; }

        /// <summary>An instance of the DomainAliases gShell dotNet resource.</summary>
        public DomainAliases domainAliases { get; set; }

        /// <summary>An instance of the Domains gShell dotNet resource.</summary>
        public Domains domains { get; set; }

        /// <summary>An instance of the Groups gShell dotNet resource.</summary>
        public Groups groups { get; set; }

        /// <summary>An instance of the Members gShell dotNet resource.</summary>
        public Members members { get; set; }

        /// <summary>An instance of the Mobiledevices gShell dotNet resource.</summary>
        public Mobiledevices mobiledevices { get; set; }

        /// <summary>An instance of the Notifications gShell dotNet resource.</summary>
        public Notifications notifications { get; set; }

        /// <summary>An instance of the Orgunits gShell dotNet resource.</summary>
        public Orgunits orgunits { get; set; }

        /// <summary>An instance of the Privileges gShell dotNet resource.</summary>
        public Privileges privileges { get; set; }

        /// <summary>An instance of the Resources gShell dotNet resource.</summary>
        public Resources resources { get; set; }

        /// <summary>An instance of the RoleAssignments gShell dotNet resource.</summary>
        public RoleAssignments roleAssignments { get; set; }

        /// <summary>An instance of the Roles gShell dotNet resource.</summary>
        public Roles roles { get; set; }

        /// <summary>An instance of the Schemas gShell dotNet resource.</summary>
        public Schemas schemas { get; set; }

        /// <summary>An instance of the Tokens gShell dotNet resource.</summary>
        public Tokens tokens { get; set; }

        /// <summary>An instance of the Users gShell dotNet resource.</summary>
        public Users users { get; set; }

        /// <summary>An instance of the VerificationCodes gShell dotNet resource.</summary>
        public VerificationCodes verificationCodes { get; set; }

        /// <summary>
        /// Required to be able to store and retrieve the mainBase from the ServiceWrapperDictionary
        /// </summary>
        protected override Type mainBaseType { get { return typeof(gDirectory); } }
        #endregion

        #region Constructors
        protected DirectoryBase()
        {
            mainBase = new gDirectory();

            ServiceWrapperDictionary[mainBaseType] = mainBase;


            asps = new Asps();
            channels = new Channels();
            chromeosdevices = new Chromeosdevices();
            customers = new Customers();
            domainAliases = new DomainAliases();
            domains = new Domains();
            groups = new Groups();
            members = new Members();
            mobiledevices = new Mobiledevices();
            notifications = new Notifications();
            orgunits = new Orgunits();
            privileges = new Privileges();
            resources = new Resources();
            roleAssignments = new RoleAssignments();
            roles = new Roles();
            schemas = new Schemas();
            tokens = new Tokens();
            users = new Users();
            verificationCodes = new VerificationCodes();
        }
        #endregion

        #region Wrapped Methods



        #region Asps

        /// <summary>A wrapper class for the Asps resource.</summary>
        public class Asps
        {




            /// <summary>Delete an ASP issued by a user.</summary>
            /// <param name="UserKey">Identifies the user in the API request. The value can be the user's primary email address,
            /// alias email address, or unique user ID.</param>
            /// <param name="CodeId">The unique ID of the ASP to be
            /// deleted.</param>
            public void Delete (string UserKey, int CodeId, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {

                mainBase.asps.Delete(UserKey, CodeId, StandardQueryParams);
            }



            /// <summary>Get information about an ASP issued by a user.</summary>
            /// <param name="UserKey">Identifies the user in the API request. The value can be the user's primary email address,
            /// alias email address, or unique user ID.</param>
            /// <param name="CodeId">The unique ID of the ASP.</param>
            public Google.Apis.admin.Directory.directory_v1.Data.Asp Get (string UserKey, int CodeId, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {

                return mainBase.asps.Get(UserKey, CodeId, StandardQueryParams);
            }



            /// <summary>List the ASPs issued by a user.</summary>
            /// <param name="UserKey">Identifies the user in the API request. The value can be the user's primary email address,
            /// alias email address, or unique user ID.</param>
            public Google.Apis.admin.Directory.directory_v1.Data.Asps List (string UserKey, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {

                return mainBase.asps.List(UserKey, StandardQueryParams);
            }


        }
        #endregion



        #region Channels

        /// <summary>A wrapper class for the Channels resource.</summary>
        public class Channels
        {




            /// <summary>Stop watching resources through this channel</summary>
            /// <param name="ChannelBody">The body of the request.</param>
            public void Stop (Google.Apis.admin.Directory.directory_v1.Data.Channel ChannelBody, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {

                mainBase.channels.Stop(ChannelBody, StandardQueryParams);
            }


        }
        #endregion



        #region Chromeosdevices

        /// <summary>A wrapper class for the Chromeosdevices resource.</summary>
        public class Chromeosdevices
        {




            /// <summary>Take action on Chrome OS Device</summary>
            /// <param name="ChromeOsDeviceActionBody">The body of the request.</param>
            /// <param name="CustomerId">Immutable id of the Google Apps account</param>
            /// <param name="ResourceId">Immutable
            /// id of Chrome OS Device</param>
            public void Action (Google.Apis.admin.Directory.directory_v1.Data.ChromeOsDeviceAction ChromeOsDeviceActionBody, string CustomerId, string ResourceId, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {

                mainBase.chromeosdevices.Action(ChromeOsDeviceActionBody, CustomerId, ResourceId, StandardQueryParams);
            }



            /// <summary>Retrieve Chrome OS Device</summary>
            /// <param name="CustomerId">Immutable id of the Google Apps account</param>
            /// <param name="DeviceId">Immutable id
            /// of Chrome OS Device</param>
            /// <param name="properties">The optional properties for this method.</param>
            public Google.Apis.admin.Directory.directory_v1.Data.ChromeOsDevice Get (string CustomerId, string DeviceId, gDirectory.Chromeosdevices.ChromeosdevicesGetProperties properties= null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {

                properties = properties ?? new gDirectory.Chromeosdevices.ChromeosdevicesGetProperties();

                return mainBase.chromeosdevices.Get(CustomerId, DeviceId, properties, StandardQueryParams);
            }



            /// <summary>Retrieve all Chrome OS Devices of a customer (paginated)</summary>
            /// <param name="CustomerId">Immutable id of the Google Apps account</param>
            /// <param name="properties">The optional properties for this method.</param>

            public List<Google.Apis.admin.Directory.directory_v1.Data.ChromeOsDevices> List(string CustomerId, gDirectory.Chromeosdevices.ChromeosdevicesListProperties properties= null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {

                properties = properties ?? new gDirectory.Chromeosdevices.ChromeosdevicesListProperties();
                properties.StartProgressBar = StartProgressBar;
                properties.UpdateProgressBar = UpdateProgressBar;

                return mainBase.chromeosdevices.List(CustomerId, properties);
            }

            /// <summary>Update Chrome OS Device. This method supports patch semantics.</summary>
            /// <param name="ChromeOsDeviceBody">The body of the request.</param>
            /// <param name="CustomerId">Immutable id of the Google Apps account</param>
            /// <param name="DeviceId">Immutable id
            /// of Chrome OS Device</param>
            /// <param name="properties">The optional properties for this method.</param>
            public Google.Apis.admin.Directory.directory_v1.Data.ChromeOsDevice Patch (Google.Apis.admin.Directory.directory_v1.Data.ChromeOsDevice ChromeOsDeviceBody, string CustomerId, string DeviceId, gDirectory.Chromeosdevices.ChromeosdevicesPatchProperties properties= null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {

                properties = properties ?? new gDirectory.Chromeosdevices.ChromeosdevicesPatchProperties();

                return mainBase.chromeosdevices.Patch(ChromeOsDeviceBody, CustomerId, DeviceId, properties, StandardQueryParams);
            }



            /// <summary>Update Chrome OS Device</summary>
            /// <param name="ChromeOsDeviceBody">The body of the request.</param>
            /// <param name="CustomerId">Immutable id of the Google Apps account</param>
            /// <param name="DeviceId">Immutable id
            /// of Chrome OS Device</param>
            /// <param name="properties">The optional properties for this method.</param>
            public Google.Apis.admin.Directory.directory_v1.Data.ChromeOsDevice Update (Google.Apis.admin.Directory.directory_v1.Data.ChromeOsDevice ChromeOsDeviceBody, string CustomerId, string DeviceId, gDirectory.Chromeosdevices.ChromeosdevicesUpdateProperties properties= null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {

                properties = properties ?? new gDirectory.Chromeosdevices.ChromeosdevicesUpdateProperties();

                return mainBase.chromeosdevices.Update(ChromeOsDeviceBody, CustomerId, DeviceId, properties, StandardQueryParams);
            }


        }
        #endregion



        #region Customers

        /// <summary>A wrapper class for the Customers resource.</summary>
        public class Customers
        {




            /// <summary>Retrieves a customer.</summary>
            /// <param name="CustomerKey">Id of the customer to be retrieved</param>
            public Google.Apis.admin.Directory.directory_v1.Data.Customer Get (string CustomerKey, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {

                return mainBase.customers.Get(CustomerKey, StandardQueryParams);
            }



            /// <summary>Updates a customer. This method supports patch semantics.</summary>
            /// <param name="CustomerBody">The body of the request.</param>
            /// <param name="CustomerKey">Id of the customer to be updated</param>
            public Google.Apis.admin.Directory.directory_v1.Data.Customer Patch (Google.Apis.admin.Directory.directory_v1.Data.Customer CustomerBody, string CustomerKey, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {

                return mainBase.customers.Patch(CustomerBody, CustomerKey, StandardQueryParams);
            }



            /// <summary>Updates a customer.</summary>
            /// <param name="CustomerBody">The body of the request.</param>
            /// <param name="CustomerKey">Id of the customer to be updated</param>
            public Google.Apis.admin.Directory.directory_v1.Data.Customer Update (Google.Apis.admin.Directory.directory_v1.Data.Customer CustomerBody, string CustomerKey, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {

                return mainBase.customers.Update(CustomerBody, CustomerKey, StandardQueryParams);
            }


        }
        #endregion



        #region DomainAliases

        /// <summary>A wrapper class for the DomainAliases resource.</summary>
        public class DomainAliases
        {




            /// <summary>Deletes a Domain Alias of the customer.</summary>
            /// <param name="Customer">Immutable id of the Google Apps account.</param>
            /// <param name="DomainAliasName">Name
            /// of domain alias to be retrieved.</param>
            public void Delete (string Customer, string DomainAliasName, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {

                mainBase.domainAliases.Delete(Customer, DomainAliasName, StandardQueryParams);
            }



            /// <summary>Retrieves a domain alias of the customer.</summary>
            /// <param name="Customer">Immutable id of the Google Apps account.</param>
            /// <param name="DomainAliasName">Name
            /// of domain alias to be retrieved.</param>
            public Google.Apis.admin.Directory.directory_v1.Data.DomainAlias Get (string Customer, string DomainAliasName, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {

                return mainBase.domainAliases.Get(Customer, DomainAliasName, StandardQueryParams);
            }



            /// <summary>Inserts a Domain alias of the customer.</summary>
            /// <param name="DomainAliasBody">The body of the request.</param>
            /// <param name="Customer">Immutable id of the Google Apps account.</param>
            public Google.Apis.admin.Directory.directory_v1.Data.DomainAlias Insert (Google.Apis.admin.Directory.directory_v1.Data.DomainAlias DomainAliasBody, string Customer, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {

                return mainBase.domainAliases.Insert(DomainAliasBody, Customer, StandardQueryParams);
            }



            /// <summary>Lists the domain aliases of the customer.</summary>
            /// <param name="Customer">Immutable id of the Google Apps account.</param>
            /// <param name="properties">The optional properties for this method.</param>
            public Google.Apis.admin.Directory.directory_v1.Data.DomainAliases List (string Customer, gDirectory.DomainAliases.DomainAliasesListProperties properties= null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {

                properties = properties ?? new gDirectory.DomainAliases.DomainAliasesListProperties();

                return mainBase.domainAliases.List(Customer, properties, StandardQueryParams);
            }


        }
        #endregion



        #region Domains

        /// <summary>A wrapper class for the Domains resource.</summary>
        public class Domains
        {




            /// <summary>Deletes a domain of the customer.</summary>
            /// <param name="Customer">Immutable id of the Google Apps account.</param>
            /// <param name="DomainName">Name of
            /// domain to be deleted</param>
            public void Delete (string Customer, string DomainName, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {

                mainBase.domains.Delete(Customer, DomainName, StandardQueryParams);
            }



            /// <summary>Retrieves a domain of the customer.</summary>
            /// <param name="Customer">Immutable id of the Google Apps account.</param>
            /// <param name="DomainName">Name of
            /// domain to be retrieved</param>
            public Google.Apis.admin.Directory.directory_v1.Data.Domains Get (string Customer, string DomainName, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {

                return mainBase.domains.Get(Customer, DomainName, StandardQueryParams);
            }



            /// <summary>Inserts a domain of the customer.</summary>
            /// <param name="DomainsBody">The body of the request.</param>
            /// <param name="Customer">Immutable id of the Google Apps account.</param>
            public Google.Apis.admin.Directory.directory_v1.Data.Domains Insert (Google.Apis.admin.Directory.directory_v1.Data.Domains DomainsBody, string Customer, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {

                return mainBase.domains.Insert(DomainsBody, Customer, StandardQueryParams);
            }



            /// <summary>Lists the domains of the customer.</summary>
            /// <param name="Customer">Immutable id of the Google Apps account.</param>
            public Google.Apis.admin.Directory.directory_v1.Data.Domains2 List (string Customer, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {

                return mainBase.domains.List(Customer, StandardQueryParams);
            }


        }
        #endregion



        #region Groups

        /// <summary>A wrapper class for the Groups resource.</summary>
        public class Groups
        {


            /// <summary>Gets or sets the  subresource.</summary>

            public Aliases aliases{ get; set; }

            /// <summary>Constructs a new Groups resource.</summary>
            public Groups()
            {

                aliases = new Aliases();
            }

            #region Aliases

            /// <summary>A wrapper class for the Aliases resource.</summary>
            public class Aliases
            {




                /// <summary>Remove a alias for the group</summary>
                /// <param name="GroupKey">Email or immutable Id of the group</param>
                /// <param name="Alias">The alias to be
                /// removed</param>
                public void Delete (string GroupKey, string Alias, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
                {

                    mainBase.groups.aliases.Delete(GroupKey, Alias, StandardQueryParams);
                }



                /// <summary>Add a alias for the group</summary>
                /// <param name="AliasBody">The body of the request.</param>
                /// <param name="GroupKey">Email or immutable Id of the group</param>
                public Google.Apis.admin.Directory.directory_v1.Data.Alias Insert (Google.Apis.admin.Directory.directory_v1.Data.Alias AliasBody, string GroupKey, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
                {

                    return mainBase.groups.aliases.Insert(AliasBody, GroupKey, StandardQueryParams);
                }



                /// <summary>List all aliases for a group</summary>
                /// <param name="GroupKey">Email or immutable Id of the group</param>
                public Google.Apis.admin.Directory.directory_v1.Data.Aliases List (string GroupKey, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
                {

                    return mainBase.groups.aliases.List(GroupKey, StandardQueryParams);
                }


            }
            #endregion


            /// <summary>Delete Group</summary>
            /// <param name="GroupKey">Email or immutable Id of the group</param>
            public void Delete (string GroupKey, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {

                mainBase.groups.Delete(GroupKey, StandardQueryParams);
            }



            /// <summary>Retrieve Group</summary>
            /// <param name="GroupKey">Email or immutable Id of the group</param>
            public Google.Apis.admin.Directory.directory_v1.Data.Group Get (string GroupKey, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {

                return mainBase.groups.Get(GroupKey, StandardQueryParams);
            }



            /// <summary>Create Group</summary>
            /// <param name="GroupBody">The body of the request.</param>
            public Google.Apis.admin.Directory.directory_v1.Data.Group Insert (Google.Apis.admin.Directory.directory_v1.Data.Group GroupBody, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {

                return mainBase.groups.Insert(GroupBody, StandardQueryParams);
            }



            /// <summary>Retrieve all groups in a domain (paginated)</summary>
            /// <param name="properties">The optional properties for this method.</param>

            public List<Google.Apis.admin.Directory.directory_v1.Data.Groups> List(gDirectory.Groups.GroupsListProperties properties= null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {

                properties = properties ?? new gDirectory.Groups.GroupsListProperties();
                properties.StartProgressBar = StartProgressBar;
                properties.UpdateProgressBar = UpdateProgressBar;

                return mainBase.groups.List(properties);
            }

            /// <summary>Update Group. This method supports patch semantics.</summary>
            /// <param name="GroupBody">The body of the request.</param>
            /// <param name="GroupKey">Email or immutable Id of the group. If Id, it should match with id of group
            /// object</param>
            public Google.Apis.admin.Directory.directory_v1.Data.Group Patch (Google.Apis.admin.Directory.directory_v1.Data.Group GroupBody, string GroupKey, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {

                return mainBase.groups.Patch(GroupBody, GroupKey, StandardQueryParams);
            }



            /// <summary>Update Group</summary>
            /// <param name="GroupBody">The body of the request.</param>
            /// <param name="GroupKey">Email or immutable Id of the group. If Id, it should match with id of group
            /// object</param>
            public Google.Apis.admin.Directory.directory_v1.Data.Group Update (Google.Apis.admin.Directory.directory_v1.Data.Group GroupBody, string GroupKey, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {

                return mainBase.groups.Update(GroupBody, GroupKey, StandardQueryParams);
            }


        }
        #endregion



        #region Members

        /// <summary>A wrapper class for the Members resource.</summary>
        public class Members
        {




            /// <summary>Remove membership.</summary>
            /// <param name="GroupKey">Email or immutable Id of the group</param>
            /// <param name="MemberKey">Email or immutable
            /// Id of the member</param>
            public void Delete (string GroupKey, string MemberKey, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {

                mainBase.members.Delete(GroupKey, MemberKey, StandardQueryParams);
            }



            /// <summary>Retrieve Group Member</summary>
            /// <param name="GroupKey">Email or immutable Id of the group</param>
            /// <param name="MemberKey">Email or immutable
            /// Id of the member</param>
            public Google.Apis.admin.Directory.directory_v1.Data.Member Get (string GroupKey, string MemberKey, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {

                return mainBase.members.Get(GroupKey, MemberKey, StandardQueryParams);
            }



            /// <summary>Add user to the specified group.</summary>
            /// <param name="MemberBody">The body of the request.</param>
            /// <param name="GroupKey">Email or immutable Id of the group</param>
            public Google.Apis.admin.Directory.directory_v1.Data.Member Insert (Google.Apis.admin.Directory.directory_v1.Data.Member MemberBody, string GroupKey, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {

                return mainBase.members.Insert(MemberBody, GroupKey, StandardQueryParams);
            }



            /// <summary>Retrieve all members in a group (paginated)</summary>
            /// <param name="GroupKey">Email or immutable Id of the group</param>
            /// <param name="properties">The optional properties for this method.</param>

            public List<Google.Apis.admin.Directory.directory_v1.Data.Members> List(string GroupKey, gDirectory.Members.MembersListProperties properties= null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {

                properties = properties ?? new gDirectory.Members.MembersListProperties();
                properties.StartProgressBar = StartProgressBar;
                properties.UpdateProgressBar = UpdateProgressBar;

                return mainBase.members.List(GroupKey, properties);
            }

            /// <summary>Update membership of a user in the specified group. This method supports patch
            /// semantics.</summary>
            /// <param name="MemberBody">The body of the request.</param>
            /// <param name="GroupKey">Email or immutable Id of the group. If Id, it should match with id of group
            /// object</param>
            /// <param name="MemberKey">Email or immutable Id of the user. If Id, it should match with id of
            /// member object</param>
            public Google.Apis.admin.Directory.directory_v1.Data.Member Patch (Google.Apis.admin.Directory.directory_v1.Data.Member MemberBody, string GroupKey, string MemberKey, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {

                return mainBase.members.Patch(MemberBody, GroupKey, MemberKey, StandardQueryParams);
            }



            /// <summary>Update membership of a user in the specified group.</summary>
            /// <param name="MemberBody">The body of the request.</param>
            /// <param name="GroupKey">Email or immutable Id of the group. If Id, it should match with id of group
            /// object</param>
            /// <param name="MemberKey">Email or immutable Id of the user. If Id, it should match with id of
            /// member object</param>
            public Google.Apis.admin.Directory.directory_v1.Data.Member Update (Google.Apis.admin.Directory.directory_v1.Data.Member MemberBody, string GroupKey, string MemberKey, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {

                return mainBase.members.Update(MemberBody, GroupKey, MemberKey, StandardQueryParams);
            }


        }
        #endregion



        #region Mobiledevices

        /// <summary>A wrapper class for the Mobiledevices resource.</summary>
        public class Mobiledevices
        {




            /// <summary>Take action on Mobile Device</summary>
            /// <param name="MobileDeviceActionBody">The body of the request.</param>
            /// <param name="CustomerId">Immutable id of the Google Apps account</param>
            /// <param name="ResourceId">Immutable
            /// id of Mobile Device</param>
            public void Action (Google.Apis.admin.Directory.directory_v1.Data.MobileDeviceAction MobileDeviceActionBody, string CustomerId, string ResourceId, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {

                mainBase.mobiledevices.Action(MobileDeviceActionBody, CustomerId, ResourceId, StandardQueryParams);
            }



            /// <summary>Delete Mobile Device</summary>
            /// <param name="CustomerId">Immutable id of the Google Apps account</param>
            /// <param name="ResourceId">Immutable
            /// id of Mobile Device</param>
            public void Delete (string CustomerId, string ResourceId, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {

                mainBase.mobiledevices.Delete(CustomerId, ResourceId, StandardQueryParams);
            }



            /// <summary>Retrieve Mobile Device</summary>
            /// <param name="CustomerId">Immutable id of the Google Apps account</param>
            /// <param name="ResourceId">Immutable
            /// id of Mobile Device</param>
            /// <param name="properties">The optional properties for this method.</param>
            public Google.Apis.admin.Directory.directory_v1.Data.MobileDevice Get (string CustomerId, string ResourceId, gDirectory.Mobiledevices.MobiledevicesGetProperties properties= null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {

                properties = properties ?? new gDirectory.Mobiledevices.MobiledevicesGetProperties();

                return mainBase.mobiledevices.Get(CustomerId, ResourceId, properties, StandardQueryParams);
            }



            /// <summary>Retrieve all Mobile Devices of a customer (paginated)</summary>
            /// <param name="CustomerId">Immutable id of the Google Apps account</param>
            /// <param name="properties">The optional properties for this method.</param>

            public List<Google.Apis.admin.Directory.directory_v1.Data.MobileDevices> List(string CustomerId, gDirectory.Mobiledevices.MobiledevicesListProperties properties= null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {

                properties = properties ?? new gDirectory.Mobiledevices.MobiledevicesListProperties();
                properties.StartProgressBar = StartProgressBar;
                properties.UpdateProgressBar = UpdateProgressBar;

                return mainBase.mobiledevices.List(CustomerId, properties);
            }
        }
        #endregion



        #region Notifications

        /// <summary>A wrapper class for the Notifications resource.</summary>
        public class Notifications
        {




            /// <summary>Deletes a notification</summary>
            /// <param name="Customer">The unique ID for the customer's Google account. The customerId is also returned as part of
            /// the Users resource.</param>
            /// <param name="NotificationId">The unique ID of the notification.</param>
            public void Delete (string Customer, string NotificationId, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {

                mainBase.notifications.Delete(Customer, NotificationId, StandardQueryParams);
            }



            /// <summary>Retrieves a notification.</summary>
            /// <param name="Customer">The unique ID for the customer's Google account. The customerId is also returned as part of
            /// the Users resource.</param>
            /// <param name="NotificationId">The unique ID of the notification.</param>
            public Google.Apis.admin.Directory.directory_v1.Data.Notification Get (string Customer, string NotificationId, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {

                return mainBase.notifications.Get(Customer, NotificationId, StandardQueryParams);
            }



            /// <summary>Retrieves a list of notifications.</summary>
            /// <param name="Customer">The unique ID for the customer's Google account.</param>
            /// <param name="properties">The optional properties for this method.</param>

            public List<Google.Apis.admin.Directory.directory_v1.Data.Notifications> List(string Customer, gDirectory.Notifications.NotificationsListProperties properties= null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {

                properties = properties ?? new gDirectory.Notifications.NotificationsListProperties();
                properties.StartProgressBar = StartProgressBar;
                properties.UpdateProgressBar = UpdateProgressBar;

                return mainBase.notifications.List(Customer, properties);
            }

            /// <summary>Updates a notification. This method supports patch semantics.</summary>
            /// <param name="NotificationBody">The body of the request.</param>
            /// <param name="Customer">The unique ID for the customer's Google account.</param>
            /// <param
            /// name="NotificationId">The unique ID of the notification.</param>
            public Google.Apis.admin.Directory.directory_v1.Data.Notification Patch (Google.Apis.admin.Directory.directory_v1.Data.Notification NotificationBody, string Customer, string NotificationId, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {

                return mainBase.notifications.Patch(NotificationBody, Customer, NotificationId, StandardQueryParams);
            }



            /// <summary>Updates a notification.</summary>
            /// <param name="NotificationBody">The body of the request.</param>
            /// <param name="Customer">The unique ID for the customer's Google account.</param>
            /// <param
            /// name="NotificationId">The unique ID of the notification.</param>
            public Google.Apis.admin.Directory.directory_v1.Data.Notification Update (Google.Apis.admin.Directory.directory_v1.Data.Notification NotificationBody, string Customer, string NotificationId, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {

                return mainBase.notifications.Update(NotificationBody, Customer, NotificationId, StandardQueryParams);
            }


        }
        #endregion



        #region Orgunits

        /// <summary>A wrapper class for the Orgunits resource.</summary>
        public class Orgunits
        {




            /// <summary>Remove Organization Unit</summary>
            /// <param name="CustomerId">Immutable id of the Google Apps account</param>
            /// <param name="OrgUnitPath">Full path
            /// of the organization unit or its Id</param>
            public void Delete (string CustomerId, Google.Apis.Util.Repeatable<string> OrgUnitPath, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {

                mainBase.orgunits.Delete(CustomerId, OrgUnitPath, StandardQueryParams);
            }



            /// <summary>Retrieve Organization Unit</summary>
            /// <param name="CustomerId">Immutable id of the Google Apps account</param>
            /// <param name="OrgUnitPath">Full path
            /// of the organization unit or its Id</param>
            public Google.Apis.admin.Directory.directory_v1.Data.OrgUnit Get (string CustomerId, Google.Apis.Util.Repeatable<string> OrgUnitPath, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {

                return mainBase.orgunits.Get(CustomerId, OrgUnitPath, StandardQueryParams);
            }



            /// <summary>Add Organization Unit</summary>
            /// <param name="OrgUnitBody">The body of the request.</param>
            /// <param name="CustomerId">Immutable id of the Google Apps account</param>
            public Google.Apis.admin.Directory.directory_v1.Data.OrgUnit Insert (Google.Apis.admin.Directory.directory_v1.Data.OrgUnit OrgUnitBody, string CustomerId, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {

                return mainBase.orgunits.Insert(OrgUnitBody, CustomerId, StandardQueryParams);
            }



            /// <summary>Retrieve all Organization Units</summary>
            /// <param name="CustomerId">Immutable id of the Google Apps account</param>
            /// <param name="properties">The optional properties for this method.</param>
            public Google.Apis.admin.Directory.directory_v1.Data.OrgUnits List (string CustomerId, gDirectory.Orgunits.OrgunitsListProperties properties= null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {

                properties = properties ?? new gDirectory.Orgunits.OrgunitsListProperties();

                return mainBase.orgunits.List(CustomerId, properties, StandardQueryParams);
            }



            /// <summary>Update Organization Unit. This method supports patch semantics.</summary>
            /// <param name="OrgUnitBody">The body of the request.</param>
            /// <param name="CustomerId">Immutable id of the Google Apps account</param>
            /// <param name="OrgUnitPath">Full path
            /// of the organization unit or its Id</param>
            public Google.Apis.admin.Directory.directory_v1.Data.OrgUnit Patch (Google.Apis.admin.Directory.directory_v1.Data.OrgUnit OrgUnitBody, string CustomerId, Google.Apis.Util.Repeatable<string> OrgUnitPath, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {

                return mainBase.orgunits.Patch(OrgUnitBody, CustomerId, OrgUnitPath, StandardQueryParams);
            }



            /// <summary>Update Organization Unit</summary>
            /// <param name="OrgUnitBody">The body of the request.</param>
            /// <param name="CustomerId">Immutable id of the Google Apps account</param>
            /// <param name="OrgUnitPath">Full path
            /// of the organization unit or its Id</param>
            public Google.Apis.admin.Directory.directory_v1.Data.OrgUnit Update (Google.Apis.admin.Directory.directory_v1.Data.OrgUnit OrgUnitBody, string CustomerId, Google.Apis.Util.Repeatable<string> OrgUnitPath, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {

                return mainBase.orgunits.Update(OrgUnitBody, CustomerId, OrgUnitPath, StandardQueryParams);
            }


        }
        #endregion



        #region Privileges

        /// <summary>A wrapper class for the Privileges resource.</summary>
        public class Privileges
        {




            /// <summary>Retrieves a paginated list of all privileges for a customer.</summary>
            /// <param name="Customer">Immutable ID of the Google Apps account.</param>
            public Google.Apis.admin.Directory.directory_v1.Data.Privileges List (string Customer, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {

                return mainBase.privileges.List(Customer, StandardQueryParams);
            }


        }
        #endregion



        #region Resources

        /// <summary>A wrapper class for the Resources resource.</summary>
        public class Resources
        {


            /// <summary>Gets or sets the  subresource.</summary>

            public Calendars calendars{ get; set; }

            /// <summary>Constructs a new Resources resource.</summary>
            public Resources()
            {

                calendars = new Calendars();
            }

            #region Calendars

            /// <summary>A wrapper class for the Calendars resource.</summary>
            public class Calendars
            {




                /// <summary>Deletes a calendar resource.</summary>
                /// <param name="Customer">The unique ID for the customer's Google account. As an account administrator, you can also
                /// use the my_customer alias to represent your account's customer ID.</param>
                /// <param
                /// name="CalendarResourceId">The unique ID of the calendar resource to delete.</param>
                public void Delete (string Customer, string CalendarResourceId, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
                {

                    mainBase.resources.calendars.Delete(Customer, CalendarResourceId, StandardQueryParams);
                }



                /// <summary>Retrieves a calendar resource.</summary>
                /// <param name="Customer">The unique ID for the customer's Google account. As an account administrator, you can also
                /// use the my_customer alias to represent your account's customer ID.</param>
                /// <param
                /// name="CalendarResourceId">The unique ID of the calendar resource to retrieve.</param>
                public Google.Apis.admin.Directory.directory_v1.Data.CalendarResource Get (string Customer, string CalendarResourceId, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
                {

                    return mainBase.resources.calendars.Get(Customer, CalendarResourceId, StandardQueryParams);
                }



                /// <summary>Inserts a calendar resource.</summary>
                /// <param name="CalendarResourceBody">The body of the request.</param>
                /// <param name="Customer">The unique ID for the customer's Google account. As an account administrator, you can also
                /// use the my_customer alias to represent your account's customer ID.</param>
                public Google.Apis.admin.Directory.directory_v1.Data.CalendarResource Insert (Google.Apis.admin.Directory.directory_v1.Data.CalendarResource CalendarResourceBody, string Customer, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
                {

                    return mainBase.resources.calendars.Insert(CalendarResourceBody, Customer, StandardQueryParams);
                }



                /// <summary>Retrieves a list of calendar resources for an account.</summary>
                /// <param name="Customer">The unique ID for the customer's Google account. As an account administrator, you can also
                /// use the my_customer alias to represent your account's customer ID.</param>
                /// <param name="properties">The optional properties for this method.</param>

                public List<Google.Apis.admin.Directory.directory_v1.Data.CalendarResources> List(string Customer, gDirectory.Resources.Calendars.CalendarsListProperties properties= null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
                {

                    properties = properties ?? new gDirectory.Resources.Calendars.CalendarsListProperties();
                    properties.StartProgressBar = StartProgressBar;
                    properties.UpdateProgressBar = UpdateProgressBar;

                    return mainBase.resources.calendars.List(Customer, properties);
                }

                /// <summary>Updates a calendar resource. This method supports patch semantics.</summary>
                /// <param name="CalendarResourceBody">The body of the request.</param>
                /// <param name="Customer">The unique ID for the customer's Google account. As an account administrator, you can also
                /// use the my_customer alias to represent your account's customer ID.</param>
                /// <param
                /// name="CalendarResourceId">The unique ID of the calendar resource to update.</param>
                public Google.Apis.admin.Directory.directory_v1.Data.CalendarResource Patch (Google.Apis.admin.Directory.directory_v1.Data.CalendarResource CalendarResourceBody, string Customer, string CalendarResourceId, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
                {

                    return mainBase.resources.calendars.Patch(CalendarResourceBody, Customer, CalendarResourceId, StandardQueryParams);
                }



                /// <summary>Updates a calendar resource.</summary>
                /// <param name="CalendarResourceBody">The body of the request.</param>
                /// <param name="Customer">The unique ID for the customer's Google account. As an account administrator, you can also
                /// use the my_customer alias to represent your account's customer ID.</param>
                /// <param
                /// name="CalendarResourceId">The unique ID of the calendar resource to update.</param>
                public Google.Apis.admin.Directory.directory_v1.Data.CalendarResource Update (Google.Apis.admin.Directory.directory_v1.Data.CalendarResource CalendarResourceBody, string Customer, string CalendarResourceId, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
                {

                    return mainBase.resources.calendars.Update(CalendarResourceBody, Customer, CalendarResourceId, StandardQueryParams);
                }


            }
            #endregion

        }
        #endregion



        #region RoleAssignments

        /// <summary>A wrapper class for the RoleAssignments resource.</summary>
        public class RoleAssignments
        {




            /// <summary>Deletes a role assignment.</summary>
            /// <param name="Customer">Immutable ID of the Google Apps account.</param>
            /// <param
            /// name="RoleAssignmentId">Immutable ID of the role assignment.</param>
            public void Delete (string Customer, string RoleAssignmentId, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {

                mainBase.roleAssignments.Delete(Customer, RoleAssignmentId, StandardQueryParams);
            }



            /// <summary>Retrieve a role assignment.</summary>
            /// <param name="Customer">Immutable ID of the Google Apps account.</param>
            /// <param
            /// name="RoleAssignmentId">Immutable ID of the role assignment.</param>
            public Google.Apis.admin.Directory.directory_v1.Data.RoleAssignment Get (string Customer, string RoleAssignmentId, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {

                return mainBase.roleAssignments.Get(Customer, RoleAssignmentId, StandardQueryParams);
            }



            /// <summary>Creates a role assignment.</summary>
            /// <param name="RoleAssignmentBody">The body of the request.</param>
            /// <param name="Customer">Immutable ID of the Google Apps account.</param>
            public Google.Apis.admin.Directory.directory_v1.Data.RoleAssignment Insert (Google.Apis.admin.Directory.directory_v1.Data.RoleAssignment RoleAssignmentBody, string Customer, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {

                return mainBase.roleAssignments.Insert(RoleAssignmentBody, Customer, StandardQueryParams);
            }



            /// <summary>Retrieves a paginated list of all roleAssignments.</summary>
            /// <param name="Customer">Immutable ID of the Google Apps account.</param>
            /// <param name="properties">The optional properties for this method.</param>

            public List<Google.Apis.admin.Directory.directory_v1.Data.RoleAssignments> List(string Customer, gDirectory.RoleAssignments.RoleAssignmentsListProperties properties= null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {

                properties = properties ?? new gDirectory.RoleAssignments.RoleAssignmentsListProperties();
                properties.StartProgressBar = StartProgressBar;
                properties.UpdateProgressBar = UpdateProgressBar;

                return mainBase.roleAssignments.List(Customer, properties);
            }
        }
        #endregion



        #region Roles

        /// <summary>A wrapper class for the Roles resource.</summary>
        public class Roles
        {




            /// <summary>Deletes a role.</summary>
            /// <param name="Customer">Immutable ID of the Google Apps account.</param>
            /// <param name="RoleId">Immutable ID of
            /// the role.</param>
            public void Delete (string Customer, string RoleId, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {

                mainBase.roles.Delete(Customer, RoleId, StandardQueryParams);
            }



            /// <summary>Retrieves a role.</summary>
            /// <param name="Customer">Immutable ID of the Google Apps account.</param>
            /// <param name="RoleId">Immutable ID of
            /// the role.</param>
            public Google.Apis.admin.Directory.directory_v1.Data.Role Get (string Customer, string RoleId, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {

                return mainBase.roles.Get(Customer, RoleId, StandardQueryParams);
            }



            /// <summary>Creates a role.</summary>
            /// <param name="RoleBody">The body of the request.</param>
            /// <param name="Customer">Immutable ID of the Google Apps account.</param>
            public Google.Apis.admin.Directory.directory_v1.Data.Role Insert (Google.Apis.admin.Directory.directory_v1.Data.Role RoleBody, string Customer, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {

                return mainBase.roles.Insert(RoleBody, Customer, StandardQueryParams);
            }



            /// <summary>Retrieves a paginated list of all the roles in a domain.</summary>
            /// <param name="Customer">Immutable id of the Google Apps account.</param>
            /// <param name="properties">The optional properties for this method.</param>

            public List<Google.Apis.admin.Directory.directory_v1.Data.Roles> List(string Customer, gDirectory.Roles.RolesListProperties properties= null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {

                properties = properties ?? new gDirectory.Roles.RolesListProperties();
                properties.StartProgressBar = StartProgressBar;
                properties.UpdateProgressBar = UpdateProgressBar;

                return mainBase.roles.List(Customer, properties);
            }

            /// <summary>Updates a role. This method supports patch semantics.</summary>
            /// <param name="RoleBody">The body of the request.</param>
            /// <param name="Customer">Immutable ID of the Google Apps account.</param>
            /// <param name="RoleId">Immutable ID of
            /// the role.</param>
            public Google.Apis.admin.Directory.directory_v1.Data.Role Patch (Google.Apis.admin.Directory.directory_v1.Data.Role RoleBody, string Customer, string RoleId, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {

                return mainBase.roles.Patch(RoleBody, Customer, RoleId, StandardQueryParams);
            }



            /// <summary>Updates a role.</summary>
            /// <param name="RoleBody">The body of the request.</param>
            /// <param name="Customer">Immutable ID of the Google Apps account.</param>
            /// <param name="RoleId">Immutable ID of
            /// the role.</param>
            public Google.Apis.admin.Directory.directory_v1.Data.Role Update (Google.Apis.admin.Directory.directory_v1.Data.Role RoleBody, string Customer, string RoleId, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {

                return mainBase.roles.Update(RoleBody, Customer, RoleId, StandardQueryParams);
            }


        }
        #endregion



        #region Schemas

        /// <summary>A wrapper class for the Schemas resource.</summary>
        public class Schemas
        {




            /// <summary>Delete schema</summary>
            /// <param name="CustomerId">Immutable id of the Google Apps account</param>
            /// <param name="SchemaKey">Name or
            /// immutable Id of the schema</param>
            public void Delete (string CustomerId, string SchemaKey, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {

                mainBase.schemas.Delete(CustomerId, SchemaKey, StandardQueryParams);
            }



            /// <summary>Retrieve schema</summary>
            /// <param name="CustomerId">Immutable id of the Google Apps account</param>
            /// <param name="SchemaKey">Name or
            /// immutable Id of the schema</param>
            public Google.Apis.admin.Directory.directory_v1.Data.Schema Get (string CustomerId, string SchemaKey, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {

                return mainBase.schemas.Get(CustomerId, SchemaKey, StandardQueryParams);
            }



            /// <summary>Create schema.</summary>
            /// <param name="SchemaBody">The body of the request.</param>
            /// <param name="CustomerId">Immutable id of the Google Apps account</param>
            public Google.Apis.admin.Directory.directory_v1.Data.Schema Insert (Google.Apis.admin.Directory.directory_v1.Data.Schema SchemaBody, string CustomerId, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {

                return mainBase.schemas.Insert(SchemaBody, CustomerId, StandardQueryParams);
            }



            /// <summary>Retrieve all schemas for a customer</summary>
            /// <param name="CustomerId">Immutable id of the Google Apps account</param>
            public Google.Apis.admin.Directory.directory_v1.Data.Schemas List (string CustomerId, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {

                return mainBase.schemas.List(CustomerId, StandardQueryParams);
            }



            /// <summary>Update schema. This method supports patch semantics.</summary>
            /// <param name="SchemaBody">The body of the request.</param>
            /// <param name="CustomerId">Immutable id of the Google Apps account</param>
            /// <param name="SchemaKey">Name or
            /// immutable Id of the schema.</param>
            public Google.Apis.admin.Directory.directory_v1.Data.Schema Patch (Google.Apis.admin.Directory.directory_v1.Data.Schema SchemaBody, string CustomerId, string SchemaKey, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {

                return mainBase.schemas.Patch(SchemaBody, CustomerId, SchemaKey, StandardQueryParams);
            }



            /// <summary>Update schema</summary>
            /// <param name="SchemaBody">The body of the request.</param>
            /// <param name="CustomerId">Immutable id of the Google Apps account</param>
            /// <param name="SchemaKey">Name or
            /// immutable Id of the schema.</param>
            public Google.Apis.admin.Directory.directory_v1.Data.Schema Update (Google.Apis.admin.Directory.directory_v1.Data.Schema SchemaBody, string CustomerId, string SchemaKey, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {

                return mainBase.schemas.Update(SchemaBody, CustomerId, SchemaKey, StandardQueryParams);
            }


        }
        #endregion



        #region Tokens

        /// <summary>A wrapper class for the Tokens resource.</summary>
        public class Tokens
        {




            /// <summary>Delete all access tokens issued by a user for an application.</summary>
            /// <param name="UserKey">Identifies the user in the API request. The value can be the user's primary email address,
            /// alias email address, or unique user ID.</param>
            /// <param name="ClientId">The Client ID of the application the
            /// token is issued to.</param>
            public void Delete (string UserKey, string ClientId, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {

                mainBase.tokens.Delete(UserKey, ClientId, StandardQueryParams);
            }



            /// <summary>Get information about an access token issued by a user.</summary>
            /// <param name="UserKey">Identifies the user in the API request. The value can be the user's primary email address,
            /// alias email address, or unique user ID.</param>
            /// <param name="ClientId">The Client ID of the application the
            /// token is issued to.</param>
            public Google.Apis.admin.Directory.directory_v1.Data.Token Get (string UserKey, string ClientId, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {

                return mainBase.tokens.Get(UserKey, ClientId, StandardQueryParams);
            }



            /// <summary>Returns the set of tokens specified user has issued to 3rd party applications.</summary>
            /// <param name="UserKey">Identifies the user in the API request. The value can be the user's primary email address,
            /// alias email address, or unique user ID.</param>
            public Google.Apis.admin.Directory.directory_v1.Data.Tokens List (string UserKey, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {

                return mainBase.tokens.List(UserKey, StandardQueryParams);
            }


        }
        #endregion



        #region Users

        /// <summary>A wrapper class for the Users resource.</summary>
        public class Users
        {


            /// <summary>Gets or sets the  subresource.</summary>

            public Aliases aliases{ get; set; }

            /// <summary>Gets or sets the  subresource.</summary>

            public Photos photos{ get; set; }

            /// <summary>Constructs a new Users resource.</summary>
            public Users()
            {

                aliases = new Aliases();
                photos = new Photos();
            }

            #region Aliases

            /// <summary>A wrapper class for the Aliases resource.</summary>
            public class Aliases
            {




                /// <summary>Remove a alias for the user</summary>
                /// <param name="UserKey">Email or immutable Id of the user</param>
                /// <param name="Alias">The alias to be
                /// removed</param>
                public void Delete (string UserKey, string Alias, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
                {

                    mainBase.users.aliases.Delete(UserKey, Alias, StandardQueryParams);
                }



                /// <summary>Add a alias for the user</summary>
                /// <param name="AliasBody">The body of the request.</param>
                /// <param name="UserKey">Email or immutable Id of the user</param>
                public Google.Apis.admin.Directory.directory_v1.Data.Alias Insert (Google.Apis.admin.Directory.directory_v1.Data.Alias AliasBody, string UserKey, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
                {

                    return mainBase.users.aliases.Insert(AliasBody, UserKey, StandardQueryParams);
                }



                /// <summary>List all aliases for a user</summary>
                /// <param name="UserKey">Email or immutable Id of the user</param>
                /// <param name="properties">The optional properties for this method.</param>
                public Google.Apis.admin.Directory.directory_v1.Data.Aliases List (string UserKey, gDirectory.Users.Aliases.AliasesListProperties properties= null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
                {

                    properties = properties ?? new gDirectory.Users.Aliases.AliasesListProperties();

                    return mainBase.users.aliases.List(UserKey, properties, StandardQueryParams);
                }



                /// <summary>Watch for changes in user aliases list</summary>
                /// <param name="ChannelBody">The body of the request.</param>
                /// <param name="UserKey">Email or immutable Id of the user</param>
                /// <param name="properties">The optional properties for this method.</param>
                public Google.Apis.admin.Directory.directory_v1.Data.Channel Watch (Google.Apis.admin.Directory.directory_v1.Data.Channel ChannelBody, string UserKey, gDirectory.Users.Aliases.AliasesWatchProperties properties= null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
                {

                    properties = properties ?? new gDirectory.Users.Aliases.AliasesWatchProperties();

                    return mainBase.users.aliases.Watch(ChannelBody, UserKey, properties, StandardQueryParams);
                }


            }
            #endregion
            #region Photos

            /// <summary>A wrapper class for the Photos resource.</summary>
            public class Photos
            {




                /// <summary>Remove photos for the user</summary>
                /// <param name="UserKey">Email or immutable Id of the user</param>
                public void Delete (string UserKey, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
                {

                    mainBase.users.photos.Delete(UserKey, StandardQueryParams);
                }



                /// <summary>Retrieve photo of a user</summary>
                /// <param name="UserKey">Email or immutable Id of the user</param>
                public Google.Apis.admin.Directory.directory_v1.Data.UserPhoto Get (string UserKey, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
                {

                    return mainBase.users.photos.Get(UserKey, StandardQueryParams);
                }



                /// <summary>Add a photo for the user. This method supports patch semantics.</summary>
                /// <param name="UserPhotoBody">The body of the request.</param>
                /// <param name="UserKey">Email or immutable Id of the user</param>
                public Google.Apis.admin.Directory.directory_v1.Data.UserPhoto Patch (Google.Apis.admin.Directory.directory_v1.Data.UserPhoto UserPhotoBody, string UserKey, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
                {

                    return mainBase.users.photos.Patch(UserPhotoBody, UserKey, StandardQueryParams);
                }



                /// <summary>Add a photo for the user</summary>
                /// <param name="UserPhotoBody">The body of the request.</param>
                /// <param name="UserKey">Email or immutable Id of the user</param>
                public Google.Apis.admin.Directory.directory_v1.Data.UserPhoto Update (Google.Apis.admin.Directory.directory_v1.Data.UserPhoto UserPhotoBody, string UserKey, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
                {

                    return mainBase.users.photos.Update(UserPhotoBody, UserKey, StandardQueryParams);
                }


            }
            #endregion


            /// <summary>Delete user</summary>
            /// <param name="UserKey">Email or immutable Id of the user</param>
            public void Delete (string UserKey, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {

                mainBase.users.Delete(UserKey, StandardQueryParams);
            }



            /// <summary>retrieve user</summary>
            /// <param name="UserKey">Email or immutable Id of the user</param>
            /// <param name="properties">The optional properties for this method.</param>
            public Google.Apis.admin.Directory.directory_v1.Data.User Get (string UserKey, gDirectory.Users.UsersGetProperties properties= null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {

                properties = properties ?? new gDirectory.Users.UsersGetProperties();

                return mainBase.users.Get(UserKey, properties, StandardQueryParams);
            }



            /// <summary>create user.</summary>
            /// <param name="UserBody">The body of the request.</param>
            public Google.Apis.admin.Directory.directory_v1.Data.User Insert (Google.Apis.admin.Directory.directory_v1.Data.User UserBody, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {

                return mainBase.users.Insert(UserBody, StandardQueryParams);
            }



            /// <summary>Retrieve either deleted users or all users in a domain (paginated)</summary>
            /// <param name="properties">The optional properties for this method.</param>

            public List<Google.Apis.admin.Directory.directory_v1.Data.Users> List(gDirectory.Users.UsersListProperties properties= null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {

                properties = properties ?? new gDirectory.Users.UsersListProperties();
                properties.StartProgressBar = StartProgressBar;
                properties.UpdateProgressBar = UpdateProgressBar;

                return mainBase.users.List(properties);
            }

            /// <summary>change admin status of a user</summary>
            /// <param name="UserMakeAdminBody">The body of the request.</param>
            /// <param name="UserKey">Email or immutable Id of the user as admin</param>
            public void MakeAdmin (Google.Apis.admin.Directory.directory_v1.Data.UserMakeAdmin UserMakeAdminBody, string UserKey, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {

                mainBase.users.MakeAdmin(UserMakeAdminBody, UserKey, StandardQueryParams);
            }



            /// <summary>update user. This method supports patch semantics.</summary>
            /// <param name="UserBody">The body of the request.</param>
            /// <param name="UserKey">Email or immutable Id of the user. If Id, it should match with id of user object</param>
            public Google.Apis.admin.Directory.directory_v1.Data.User Patch (Google.Apis.admin.Directory.directory_v1.Data.User UserBody, string UserKey, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {

                return mainBase.users.Patch(UserBody, UserKey, StandardQueryParams);
            }



            /// <summary>Undelete a deleted user</summary>
            /// <param name="UserUndeleteBody">The body of the request.</param>
            /// <param name="UserKey">The immutable id of the user</param>
            public void Undelete (Google.Apis.admin.Directory.directory_v1.Data.UserUndelete UserUndeleteBody, string UserKey, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {

                mainBase.users.Undelete(UserUndeleteBody, UserKey, StandardQueryParams);
            }



            /// <summary>update user</summary>
            /// <param name="UserBody">The body of the request.</param>
            /// <param name="UserKey">Email or immutable Id of the user. If Id, it should match with id of user object</param>
            public Google.Apis.admin.Directory.directory_v1.Data.User Update (Google.Apis.admin.Directory.directory_v1.Data.User UserBody, string UserKey, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {

                return mainBase.users.Update(UserBody, UserKey, StandardQueryParams);
            }



            /// <summary>Watch for changes in users list</summary>
            /// <param name="ChannelBody">The body of the request.</param>
            /// <param name="properties">The optional properties for this method.</param>
            public Google.Apis.admin.Directory.directory_v1.Data.Channel Watch (Google.Apis.admin.Directory.directory_v1.Data.Channel ChannelBody, gDirectory.Users.UsersWatchProperties properties= null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {

                properties = properties ?? new gDirectory.Users.UsersWatchProperties();

                return mainBase.users.Watch(ChannelBody, properties, StandardQueryParams);
            }


        }
        #endregion



        #region VerificationCodes

        /// <summary>A wrapper class for the VerificationCodes resource.</summary>
        public class VerificationCodes
        {




            /// <summary>Generate new backup verification codes for the user.</summary>
            /// <param name="UserKey">Email or immutable Id of the user</param>
            public void Generate (string UserKey, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {

                mainBase.verificationCodes.Generate(UserKey, StandardQueryParams);
            }



            /// <summary>Invalidate the current backup verification codes for the user.</summary>
            /// <param name="UserKey">Email or immutable Id of the user</param>
            public void Invalidate (string UserKey, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {

                mainBase.verificationCodes.Invalidate(UserKey, StandardQueryParams);
            }



            /// <summary>Returns the current set of valid backup verification codes for the specified user.</summary>
            /// <param name="UserKey">Identifies the user in the API request. The value can be the user's primary email address,
            /// alias email address, or unique user ID.</param>
            public Google.Apis.admin.Directory.directory_v1.Data.VerificationCodes List (string UserKey, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {

                return mainBase.verificationCodes.List(UserKey, StandardQueryParams);
            }


        }
        #endregion

        #endregion

    }
}



namespace gShell.dotNet
{
    using System;
    using System.Collections.Generic;

    using gShell.dotNet;
    using gShell.dotNet.Utilities.OAuth2;

    using directory_v1 = Google.Apis.admin.Directory.directory_v1;
    using Data = Google.Apis.admin.Directory.directory_v1.Data;

    /// <summary>The dotNet gShell version of the admin api.</summary>
    public class Directory : ServiceWrapper<directory_v1.DirectoryService>, IServiceWrapper<Google.Apis.Services.IClientService>
    {

        protected override bool worksWithGmail { get { return false; } }

        /// <summary>Creates a new directory_v1.Directory service.</summary>
        /// <param name="domain">The domain to which this service will be authenticated.</param>
        /// <param name="authInfo">The authenticated AuthInfo for this user and domain.</param>
        /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>

        protected override directory_v1.DirectoryService CreateNewService(string domain, AuthenticatedUserInfo authInfo, string gShellServiceAccount = null)
        {
            return new directory_v1.DirectoryService(OAuth2Base.GetInitializer(domain, authInfo));
        }

        /// <summary>Returns the api name and version in {name}:{version} format.</summary>
        public override string apiNameAndVersion { get { return "admin:directory_v1"; } }


        /// <summary>Gets or sets the asps resource class.</summary>
        public Asps asps{ get; set; }

        /// <summary>Gets or sets the channels resource class.</summary>
        public Channels channels{ get; set; }

        /// <summary>Gets or sets the chromeosdevices resource class.</summary>
        public Chromeosdevices chromeosdevices{ get; set; }

        /// <summary>Gets or sets the customers resource class.</summary>
        public Customers customers{ get; set; }

        /// <summary>Gets or sets the domainAliases resource class.</summary>
        public DomainAliases domainAliases{ get; set; }

        /// <summary>Gets or sets the domains resource class.</summary>
        public Domains domains{ get; set; }

        /// <summary>Gets or sets the groups resource class.</summary>
        public Groups groups{ get; set; }

        /// <summary>Gets or sets the members resource class.</summary>
        public Members members{ get; set; }

        /// <summary>Gets or sets the mobiledevices resource class.</summary>
        public Mobiledevices mobiledevices{ get; set; }

        /// <summary>Gets or sets the notifications resource class.</summary>
        public Notifications notifications{ get; set; }

        /// <summary>Gets or sets the orgunits resource class.</summary>
        public Orgunits orgunits{ get; set; }

        /// <summary>Gets or sets the privileges resource class.</summary>
        public Privileges privileges{ get; set; }

        /// <summary>Gets or sets the resources resource class.</summary>
        public Resources resources{ get; set; }

        /// <summary>Gets or sets the roleAssignments resource class.</summary>
        public RoleAssignments roleAssignments{ get; set; }

        /// <summary>Gets or sets the roles resource class.</summary>
        public Roles roles{ get; set; }

        /// <summary>Gets or sets the schemas resource class.</summary>
        public Schemas schemas{ get; set; }

        /// <summary>Gets or sets the tokens resource class.</summary>
        public Tokens tokens{ get; set; }

        /// <summary>Gets or sets the users resource class.</summary>
        public Users users{ get; set; }

        /// <summary>Gets or sets the verificationCodes resource class.</summary>
        public VerificationCodes verificationCodes{ get; set; }

        public Directory()
        {

            asps = new Asps();
            channels = new Channels();
            chromeosdevices = new Chromeosdevices();
            customers = new Customers();
            domainAliases = new DomainAliases();
            domains = new Domains();
            groups = new Groups();
            members = new Members();
            mobiledevices = new Mobiledevices();
            notifications = new Notifications();
            orgunits = new Orgunits();
            privileges = new Privileges();
            resources = new Resources();
            roleAssignments = new RoleAssignments();
            roles = new Roles();
            schemas = new Schemas();
            tokens = new Tokens();
            users = new Users();
            verificationCodes = new VerificationCodes();
        }



        /// <summary>The "asps" collection of methods.</summary>
        public class Asps
        {




            /// <summary>Delete an ASP issued by a user.</summary>
            /// <param name="UserKey">Identifies the user in the API request. The value can be the user's primary email address,
            /// alias email address, or unique user ID.</param>
            /// <param name="CodeId">The unique ID of the ASP to be
            /// deleted.</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public void Delete (string UserKey, int CodeId, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {
                var request = GetService().Asps.Delete(UserKey, CodeId);

                if (StandardQueryParams != null) {
                    request.Fields = StandardQueryParams.fields;
                    request.QuotaUser = StandardQueryParams.quotaUser;
                    request.UserIp = StandardQueryParams.userIp;
                }



                request.Execute();
            }

            /// <summary>Get information about an ASP issued by a user.</summary>
            /// <param name="UserKey">Identifies the user in the API request. The value can be the user's primary email address,
            /// alias email address, or unique user ID.</param>
            /// <param name="CodeId">The unique ID of the ASP.</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public Google.Apis.admin.Directory.directory_v1.Data.Asp Get (string UserKey, int CodeId, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {
                var request = GetService().Asps.Get(UserKey, CodeId);

                if (StandardQueryParams != null) {
                    request.Fields = StandardQueryParams.fields;
                    request.QuotaUser = StandardQueryParams.quotaUser;
                    request.UserIp = StandardQueryParams.userIp;
                }



                return request.Execute();
            }

            /// <summary>List the ASPs issued by a user.</summary>
            /// <param name="UserKey">Identifies the user in the API request. The value can be the user's primary email address,
            /// alias email address, or unique user ID.</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public Google.Apis.admin.Directory.directory_v1.Data.Asps List (string UserKey, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {
                var request = GetService().Asps.List(UserKey);

                if (StandardQueryParams != null) {
                    request.Fields = StandardQueryParams.fields;
                    request.QuotaUser = StandardQueryParams.quotaUser;
                    request.UserIp = StandardQueryParams.userIp;
                }



                return request.Execute();
            }

        }

        /// <summary>The "channels" collection of methods.</summary>
        public class Channels
        {




            /// <summary>Stop watching resources through this channel</summary>
            /// <param name="ChannelBody">The body of the request.</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public void Stop (Google.Apis.admin.Directory.directory_v1.Data.Channel ChannelBody, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {
                var request = GetService().Channels.Stop(ChannelBody);

                if (StandardQueryParams != null) {
                    request.Fields = StandardQueryParams.fields;
                    request.QuotaUser = StandardQueryParams.quotaUser;
                    request.UserIp = StandardQueryParams.userIp;
                }



                request.Execute();
            }

        }

        /// <summary>The "chromeosdevices" collection of methods.</summary>
        public class Chromeosdevices
        {

            /// <summary>Optional parameters for the Chromeosdevices Get method.</summary>
            public class ChromeosdevicesGetProperties
            {
                /// <summary>Restrict information returned to a set of selected fields.</summary>
                public directory_v1.ChromeosdevicesResource.GetRequest.ProjectionEnum?Projection = null;
            }

            /// <summary>Optional parameters for the Chromeosdevices List method.</summary>
            public class ChromeosdevicesListProperties
            {
                /// <summary>Maximum number of results to return. Default is 100</summary>
                public int? MaxResults = null;

                /// <summary>Column to use for sorting results</summary>
                public directory_v1.ChromeosdevicesResource.ListRequest.OrderByEnum?OrderBy = null;

                /// <summary>Restrict information returned to a set of selected fields.</summary>
                public directory_v1.ChromeosdevicesResource.ListRequest.ProjectionEnum?Projection = null;

                /// <summary>Search string in the format given at http://support.google.com/chromeos/a/bin/answer.py?hl=en=1698333</summary>
                public string Query = null;

                /// <summary>Whether to return results in ascending or descending order. Only of use when orderBy is also used</summary>
                public directory_v1.ChromeosdevicesResource.ListRequest.SortOrderEnum?SortOrder = null;

                /// <summary>A delegate that is used to start a progress bar.</summary>
                public Action<string, string> StartProgressBar = null;

                /// <summary>A delegate that is used to update a progress bar.</summary>
                public Action<int, int, string, string> UpdateProgressBar = null;

                /// <summary>A counter for the total number of results to pull when iterating through paged results.</summary>
                public int TotalResults = 0;
            }

            /// <summary>Optional parameters for the Chromeosdevices Patch method.</summary>
            public class ChromeosdevicesPatchProperties
            {
                /// <summary>Restrict information returned to a set of selected fields.</summary>
                public directory_v1.ChromeosdevicesResource.PatchRequest.ProjectionEnum?Projection = null;
            }

            /// <summary>Optional parameters for the Chromeosdevices Update method.</summary>
            public class ChromeosdevicesUpdateProperties
            {
                /// <summary>Restrict information returned to a set of selected fields.</summary>
                public directory_v1.ChromeosdevicesResource.UpdateRequest.ProjectionEnum?Projection = null;
            }


            /// <summary>Take action on Chrome OS Device</summary>
            /// <param name="ChromeOsDeviceActionBody">The body of the request.</param>
            /// <param name="CustomerId">Immutable id of the Google Apps account</param>
            /// <param name="ResourceId">Immutable
            /// id of Chrome OS Device</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public void Action (Google.Apis.admin.Directory.directory_v1.Data.ChromeOsDeviceAction ChromeOsDeviceActionBody, string CustomerId, string ResourceId, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {
                var request = GetService().Chromeosdevices.Action(ChromeOsDeviceActionBody, CustomerId, ResourceId);

                if (StandardQueryParams != null) {
                    request.Fields = StandardQueryParams.fields;
                    request.QuotaUser = StandardQueryParams.quotaUser;
                    request.UserIp = StandardQueryParams.userIp;
                }



                request.Execute();
            }

            /// <summary>Retrieve Chrome OS Device</summary>
            /// <param name="CustomerId">Immutable id of the Google Apps account</param>
            /// <param name="DeviceId">Immutable id
            /// of Chrome OS Device</param>
            /// <param name="properties">The optional properties for this method.</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public Google.Apis.admin.Directory.directory_v1.Data.ChromeOsDevice Get (string CustomerId, string DeviceId, ChromeosdevicesGetProperties properties= null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {
                var request = GetService().Chromeosdevices.Get(CustomerId, DeviceId);

                if (StandardQueryParams != null) {
                    request.Fields = StandardQueryParams.fields;
                    request.QuotaUser = StandardQueryParams.quotaUser;
                    request.UserIp = StandardQueryParams.userIp;
                }

                if (properties != null)    {
                    request.Projection = properties.Projection;
                }

                return request.Execute();
            }

            /// <summary>Retrieve all Chrome OS Devices of a customer (paginated)</summary>
            /// <param name="CustomerId">Immutable id of the Google Apps account</param>
            /// <param name="properties">The optional properties for this method.</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public List<Google.Apis.admin.Directory.directory_v1.Data.ChromeOsDevices> List(
                string CustomerId, ChromeosdevicesListProperties properties= null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {
                var results = new List<Google.Apis.admin.Directory.directory_v1.Data.ChromeOsDevices>();

                directory_v1.ChromeosdevicesResource.ListRequest request = GetService().Chromeosdevices.List(CustomerId);

                if (StandardQueryParams != null) {
                    request.Fields = StandardQueryParams.fields;
                    request.QuotaUser = StandardQueryParams.quotaUser;
                    request.UserIp = StandardQueryParams.userIp;
                }

                if (properties != null)
                {
                    request.MaxResults = properties.MaxResults;
                    request.OrderBy = properties.OrderBy;
                    request.Projection = properties.Projection;
                    request.Query = properties.Query;
                    request.SortOrder = properties.SortOrder;

                }

                if (null != properties.StartProgressBar)
                {
                    properties.StartProgressBar("Gathering Chromeosdevices",
                        string.Format("-Collecting Chromeosdevices page 1"));
                }

                Google.Apis.admin.Directory.directory_v1.Data.ChromeOsDevices pagedResult = request.Execute();

                if (pagedResult != null)
                {
                    results.Add(pagedResult);

                    while (!string.IsNullOrWhiteSpace(pagedResult.NextPageToken) &&
                        pagedResult.NextPageToken != request.PageToken &&
                    (properties.TotalResults == 0 || results.Count < properties.TotalResults))
                    {
                        request.PageToken = pagedResult.NextPageToken;

                        if (null != properties.UpdateProgressBar)
                        {
                            properties.UpdateProgressBar(5, 10, "Gathering Chromeosdevices",
                                    string.Format("-Collecting Chromeosdevices page {0}",
                                        (results.Count + 1).ToString()));
                        }
                        pagedResult = request.Execute();
                        results.Add(pagedResult);
                    }

                    if (null != properties.UpdateProgressBar)
                    {
                        properties.UpdateProgressBar(1, 2, "Gathering Chromeosdevices",
                                string.Format("-Returning {0} pages.", results.Count.ToString()));
                    }
                }

                return results;
            }

            /// <summary>Update Chrome OS Device. This method supports patch semantics.</summary>
            /// <param name="ChromeOsDeviceBody">The body of the request.</param>
            /// <param name="CustomerId">Immutable id of the Google Apps account</param>
            /// <param name="DeviceId">Immutable id
            /// of Chrome OS Device</param>
            /// <param name="properties">The optional properties for this method.</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public Google.Apis.admin.Directory.directory_v1.Data.ChromeOsDevice Patch (Google.Apis.admin.Directory.directory_v1.Data.ChromeOsDevice ChromeOsDeviceBody, string CustomerId, string DeviceId, ChromeosdevicesPatchProperties properties= null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {
                var request = GetService().Chromeosdevices.Patch(ChromeOsDeviceBody, CustomerId, DeviceId);

                if (StandardQueryParams != null) {
                    request.Fields = StandardQueryParams.fields;
                    request.QuotaUser = StandardQueryParams.quotaUser;
                    request.UserIp = StandardQueryParams.userIp;
                }

                if (properties != null)    {
                    request.Projection = properties.Projection;
                }

                return request.Execute();
            }

            /// <summary>Update Chrome OS Device</summary>
            /// <param name="ChromeOsDeviceBody">The body of the request.</param>
            /// <param name="CustomerId">Immutable id of the Google Apps account</param>
            /// <param name="DeviceId">Immutable id
            /// of Chrome OS Device</param>
            /// <param name="properties">The optional properties for this method.</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public Google.Apis.admin.Directory.directory_v1.Data.ChromeOsDevice Update (Google.Apis.admin.Directory.directory_v1.Data.ChromeOsDevice ChromeOsDeviceBody, string CustomerId, string DeviceId, ChromeosdevicesUpdateProperties properties= null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {
                var request = GetService().Chromeosdevices.Update(ChromeOsDeviceBody, CustomerId, DeviceId);

                if (StandardQueryParams != null) {
                    request.Fields = StandardQueryParams.fields;
                    request.QuotaUser = StandardQueryParams.quotaUser;
                    request.UserIp = StandardQueryParams.userIp;
                }

                if (properties != null)    {
                    request.Projection = properties.Projection;
                }

                return request.Execute();
            }

        }

        /// <summary>The "customers" collection of methods.</summary>
        public class Customers
        {




            /// <summary>Retrieves a customer.</summary>
            /// <param name="CustomerKey">Id of the customer to be retrieved</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public Google.Apis.admin.Directory.directory_v1.Data.Customer Get (string CustomerKey, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {
                var request = GetService().Customers.Get(CustomerKey);

                if (StandardQueryParams != null) {
                    request.Fields = StandardQueryParams.fields;
                    request.QuotaUser = StandardQueryParams.quotaUser;
                    request.UserIp = StandardQueryParams.userIp;
                }



                return request.Execute();
            }

            /// <summary>Updates a customer. This method supports patch semantics.</summary>
            /// <param name="CustomerBody">The body of the request.</param>
            /// <param name="CustomerKey">Id of the customer to be updated</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public Google.Apis.admin.Directory.directory_v1.Data.Customer Patch (Google.Apis.admin.Directory.directory_v1.Data.Customer CustomerBody, string CustomerKey, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {
                var request = GetService().Customers.Patch(CustomerBody, CustomerKey);

                if (StandardQueryParams != null) {
                    request.Fields = StandardQueryParams.fields;
                    request.QuotaUser = StandardQueryParams.quotaUser;
                    request.UserIp = StandardQueryParams.userIp;
                }



                return request.Execute();
            }

            /// <summary>Updates a customer.</summary>
            /// <param name="CustomerBody">The body of the request.</param>
            /// <param name="CustomerKey">Id of the customer to be updated</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public Google.Apis.admin.Directory.directory_v1.Data.Customer Update (Google.Apis.admin.Directory.directory_v1.Data.Customer CustomerBody, string CustomerKey, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {
                var request = GetService().Customers.Update(CustomerBody, CustomerKey);

                if (StandardQueryParams != null) {
                    request.Fields = StandardQueryParams.fields;
                    request.QuotaUser = StandardQueryParams.quotaUser;
                    request.UserIp = StandardQueryParams.userIp;
                }



                return request.Execute();
            }

        }

        /// <summary>The "domainAliases" collection of methods.</summary>
        public class DomainAliases
        {

            /// <summary>Optional parameters for the DomainAliases List method.</summary>
            public class DomainAliasesListProperties
            {
                /// <summary>Name of the parent domain for which domain aliases are to be fetched.</summary>
                public string ParentDomainName = null;
            }


            /// <summary>Deletes a Domain Alias of the customer.</summary>
            /// <param name="Customer">Immutable id of the Google Apps account.</param>
            /// <param name="DomainAliasName">Name
            /// of domain alias to be retrieved.</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public void Delete (string Customer, string DomainAliasName, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {
                var request = GetService().DomainAliases.Delete(Customer, DomainAliasName);

                if (StandardQueryParams != null) {
                    request.Fields = StandardQueryParams.fields;
                    request.QuotaUser = StandardQueryParams.quotaUser;
                    request.UserIp = StandardQueryParams.userIp;
                }



                request.Execute();
            }

            /// <summary>Retrieves a domain alias of the customer.</summary>
            /// <param name="Customer">Immutable id of the Google Apps account.</param>
            /// <param name="DomainAliasName">Name
            /// of domain alias to be retrieved.</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public Google.Apis.admin.Directory.directory_v1.Data.DomainAlias Get (string Customer, string DomainAliasName, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {
                var request = GetService().DomainAliases.Get(Customer, DomainAliasName);

                if (StandardQueryParams != null) {
                    request.Fields = StandardQueryParams.fields;
                    request.QuotaUser = StandardQueryParams.quotaUser;
                    request.UserIp = StandardQueryParams.userIp;
                }



                return request.Execute();
            }

            /// <summary>Inserts a Domain alias of the customer.</summary>
            /// <param name="DomainAliasBody">The body of the request.</param>
            /// <param name="Customer">Immutable id of the Google Apps account.</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public Google.Apis.admin.Directory.directory_v1.Data.DomainAlias Insert (Google.Apis.admin.Directory.directory_v1.Data.DomainAlias DomainAliasBody, string Customer, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {
                var request = GetService().DomainAliases.Insert(DomainAliasBody, Customer);

                if (StandardQueryParams != null) {
                    request.Fields = StandardQueryParams.fields;
                    request.QuotaUser = StandardQueryParams.quotaUser;
                    request.UserIp = StandardQueryParams.userIp;
                }



                return request.Execute();
            }

            /// <summary>Lists the domain aliases of the customer.</summary>
            /// <param name="Customer">Immutable id of the Google Apps account.</param>
            /// <param name="properties">The optional properties for this method.</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public Google.Apis.admin.Directory.directory_v1.Data.DomainAliases List (string Customer, DomainAliasesListProperties properties= null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {
                var request = GetService().DomainAliases.List(Customer);

                if (StandardQueryParams != null) {
                    request.Fields = StandardQueryParams.fields;
                    request.QuotaUser = StandardQueryParams.quotaUser;
                    request.UserIp = StandardQueryParams.userIp;
                }

                if (properties != null)    {
                    request.ParentDomainName = properties.ParentDomainName;
                }

                return request.Execute();
            }

        }

        /// <summary>The "domains" collection of methods.</summary>
        public class Domains
        {




            /// <summary>Deletes a domain of the customer.</summary>
            /// <param name="Customer">Immutable id of the Google Apps account.</param>
            /// <param name="DomainName">Name of
            /// domain to be deleted</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public void Delete (string Customer, string DomainName, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {
                var request = GetService().Domains.Delete(Customer, DomainName);

                if (StandardQueryParams != null) {
                    request.Fields = StandardQueryParams.fields;
                    request.QuotaUser = StandardQueryParams.quotaUser;
                    request.UserIp = StandardQueryParams.userIp;
                }



                request.Execute();
            }

            /// <summary>Retrieves a domain of the customer.</summary>
            /// <param name="Customer">Immutable id of the Google Apps account.</param>
            /// <param name="DomainName">Name of
            /// domain to be retrieved</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public Google.Apis.admin.Directory.directory_v1.Data.Domains Get (string Customer, string DomainName, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {
                var request = GetService().Domains.Get(Customer, DomainName);

                if (StandardQueryParams != null) {
                    request.Fields = StandardQueryParams.fields;
                    request.QuotaUser = StandardQueryParams.quotaUser;
                    request.UserIp = StandardQueryParams.userIp;
                }



                return request.Execute();
            }

            /// <summary>Inserts a domain of the customer.</summary>
            /// <param name="DomainsBody">The body of the request.</param>
            /// <param name="Customer">Immutable id of the Google Apps account.</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public Google.Apis.admin.Directory.directory_v1.Data.Domains Insert (Google.Apis.admin.Directory.directory_v1.Data.Domains DomainsBody, string Customer, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {
                var request = GetService().Domains.Insert(DomainsBody, Customer);

                if (StandardQueryParams != null) {
                    request.Fields = StandardQueryParams.fields;
                    request.QuotaUser = StandardQueryParams.quotaUser;
                    request.UserIp = StandardQueryParams.userIp;
                }



                return request.Execute();
            }

            /// <summary>Lists the domains of the customer.</summary>
            /// <param name="Customer">Immutable id of the Google Apps account.</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public Google.Apis.admin.Directory.directory_v1.Data.Domains2 List (string Customer, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {
                var request = GetService().Domains.List(Customer);

                if (StandardQueryParams != null) {
                    request.Fields = StandardQueryParams.fields;
                    request.QuotaUser = StandardQueryParams.quotaUser;
                    request.UserIp = StandardQueryParams.userIp;
                }



                return request.Execute();
            }

        }

        /// <summary>The "groups" collection of methods.</summary>
        public class Groups
        {
            /// <summary>Gets or sets the aliases resource class.</summary>
            public Aliases aliases{ get; set; }

            public Groups()
            {
                aliases = new Aliases();
            }

            /// <summary>Optional parameters for the Groups List method.</summary>
            public class GroupsListProperties
            {
                /// <summary>Immutable id of the Google Apps account. In case of multi-domain, to fetch all groups for a customer, fill this field instead of domain.</summary>
                public string Customer = null;

                /// <summary>Name of the domain. Fill this field to get groups from only this domain. To return all groups in a multi-domain fill customer field instead.</summary>
                public string Domain = null;

                /// <summary>Maximum number of results to return. Default is 200</summary>
                public int? MaxResults = null;

                /// <summary>Email or immutable Id of the user if only those groups are to be listed, the given user is a member of. If Id, it should match with id of user object</summary>
                public string UserKey = null;

                /// <summary>A delegate that is used to start a progress bar.</summary>
                public Action<string, string> StartProgressBar = null;

                /// <summary>A delegate that is used to update a progress bar.</summary>
                public Action<int, int, string, string> UpdateProgressBar = null;

                /// <summary>A counter for the total number of results to pull when iterating through paged results.</summary>
                public int TotalResults = 0;
            }


            /// <summary>Delete Group</summary>
            /// <param name="GroupKey">Email or immutable Id of the group</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public void Delete (string GroupKey, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {
                var request = GetService().Groups.Delete(GroupKey);

                if (StandardQueryParams != null) {
                    request.Fields = StandardQueryParams.fields;
                    request.QuotaUser = StandardQueryParams.quotaUser;
                    request.UserIp = StandardQueryParams.userIp;
                }



                request.Execute();
            }

            /// <summary>Retrieve Group</summary>
            /// <param name="GroupKey">Email or immutable Id of the group</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public Google.Apis.admin.Directory.directory_v1.Data.Group Get (string GroupKey, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {
                var request = GetService().Groups.Get(GroupKey);

                if (StandardQueryParams != null) {
                    request.Fields = StandardQueryParams.fields;
                    request.QuotaUser = StandardQueryParams.quotaUser;
                    request.UserIp = StandardQueryParams.userIp;
                }



                return request.Execute();
            }

            /// <summary>Create Group</summary>
            /// <param name="GroupBody">The body of the request.</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public Google.Apis.admin.Directory.directory_v1.Data.Group Insert (Google.Apis.admin.Directory.directory_v1.Data.Group GroupBody, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {
                var request = GetService().Groups.Insert(GroupBody);

                if (StandardQueryParams != null) {
                    request.Fields = StandardQueryParams.fields;
                    request.QuotaUser = StandardQueryParams.quotaUser;
                    request.UserIp = StandardQueryParams.userIp;
                }



                return request.Execute();
            }

            /// <summary>Retrieve all groups in a domain (paginated)</summary>
            /// <param name="properties">The optional properties for this method.</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public List<Google.Apis.admin.Directory.directory_v1.Data.Groups> List(
                GroupsListProperties properties= null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {
                var results = new List<Google.Apis.admin.Directory.directory_v1.Data.Groups>();

                directory_v1.GroupsResource.ListRequest request = GetService().Groups.List();

                if (StandardQueryParams != null) {
                    request.Fields = StandardQueryParams.fields;
                    request.QuotaUser = StandardQueryParams.quotaUser;
                    request.UserIp = StandardQueryParams.userIp;
                }

                if (properties != null)
                {
                    request.Customer = properties.Customer;
                    request.Domain = properties.Domain;
                    request.MaxResults = properties.MaxResults;
                    request.UserKey = properties.UserKey;

                }

                if (null != properties.StartProgressBar)
                {
                    properties.StartProgressBar("Gathering Groups",
                        string.Format("-Collecting Groups page 1"));
                }

                Google.Apis.admin.Directory.directory_v1.Data.Groups pagedResult = request.Execute();

                if (pagedResult != null)
                {
                    results.Add(pagedResult);

                    while (!string.IsNullOrWhiteSpace(pagedResult.NextPageToken) &&
                        pagedResult.NextPageToken != request.PageToken &&
                    (properties.TotalResults == 0 || results.Count < properties.TotalResults))
                    {
                        request.PageToken = pagedResult.NextPageToken;

                        if (null != properties.UpdateProgressBar)
                        {
                            properties.UpdateProgressBar(5, 10, "Gathering Groups",
                                    string.Format("-Collecting Groups page {0}",
                                        (results.Count + 1).ToString()));
                        }
                        pagedResult = request.Execute();
                        results.Add(pagedResult);
                    }

                    if (null != properties.UpdateProgressBar)
                    {
                        properties.UpdateProgressBar(1, 2, "Gathering Groups",
                                string.Format("-Returning {0} pages.", results.Count.ToString()));
                    }
                }

                return results;
            }

            /// <summary>Update Group. This method supports patch semantics.</summary>
            /// <param name="GroupBody">The body of the request.</param>
            /// <param name="GroupKey">Email or immutable Id of the group. If Id, it should match with id of group
            /// object</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public Google.Apis.admin.Directory.directory_v1.Data.Group Patch (Google.Apis.admin.Directory.directory_v1.Data.Group GroupBody, string GroupKey, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {
                var request = GetService().Groups.Patch(GroupBody, GroupKey);

                if (StandardQueryParams != null) {
                    request.Fields = StandardQueryParams.fields;
                    request.QuotaUser = StandardQueryParams.quotaUser;
                    request.UserIp = StandardQueryParams.userIp;
                }



                return request.Execute();
            }

            /// <summary>Update Group</summary>
            /// <param name="GroupBody">The body of the request.</param>
            /// <param name="GroupKey">Email or immutable Id of the group. If Id, it should match with id of group
            /// object</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public Google.Apis.admin.Directory.directory_v1.Data.Group Update (Google.Apis.admin.Directory.directory_v1.Data.Group GroupBody, string GroupKey, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {
                var request = GetService().Groups.Update(GroupBody, GroupKey);

                if (StandardQueryParams != null) {
                    request.Fields = StandardQueryParams.fields;
                    request.QuotaUser = StandardQueryParams.quotaUser;
                    request.UserIp = StandardQueryParams.userIp;
                }



                return request.Execute();
            }
                /// <summary>The "aliases" collection of methods.</summary>
                public class Aliases
                {




                    /// <summary>Remove a alias for the group</summary>
                    /// <param name="GroupKey">Email or immutable Id of the group</param>
                    /// <param name="Alias">The alias to be
                    /// removed</param>
                    /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
                    public void Delete (string GroupKey, string Alias, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
                    {
                        var request = GetService().Groups.Aliases.Delete(GroupKey, Alias);

                        if (StandardQueryParams != null) {
                            request.Fields = StandardQueryParams.fields;
                            request.QuotaUser = StandardQueryParams.quotaUser;
                            request.UserIp = StandardQueryParams.userIp;
                        }



                        request.Execute();
                    }

                    /// <summary>Add a alias for the group</summary>
                    /// <param name="AliasBody">The body of the request.</param>
                    /// <param name="GroupKey">Email or immutable Id of the group</param>
                    /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
                    public Google.Apis.admin.Directory.directory_v1.Data.Alias Insert (Google.Apis.admin.Directory.directory_v1.Data.Alias AliasBody, string GroupKey, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
                    {
                        var request = GetService().Groups.Aliases.Insert(AliasBody, GroupKey);

                        if (StandardQueryParams != null) {
                            request.Fields = StandardQueryParams.fields;
                            request.QuotaUser = StandardQueryParams.quotaUser;
                            request.UserIp = StandardQueryParams.userIp;
                        }



                        return request.Execute();
                    }

                    /// <summary>List all aliases for a group</summary>
                    /// <param name="GroupKey">Email or immutable Id of the group</param>
                    /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
                    public Google.Apis.admin.Directory.directory_v1.Data.Aliases List (string GroupKey, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
                    {
                        var request = GetService().Groups.Aliases.List(GroupKey);

                        if (StandardQueryParams != null) {
                            request.Fields = StandardQueryParams.fields;
                            request.QuotaUser = StandardQueryParams.quotaUser;
                            request.UserIp = StandardQueryParams.userIp;
                        }



                        return request.Execute();
                    }

                }
        }

        /// <summary>The "members" collection of methods.</summary>
        public class Members
        {

            /// <summary>Optional parameters for the Members List method.</summary>
            public class MembersListProperties
            {
                /// <summary>Maximum number of results to return. Default is 200</summary>
                public int? MaxResults = null;

                /// <summary>Comma separated role values to filter list results on.</summary>
                public string Roles = null;

                /// <summary>A delegate that is used to start a progress bar.</summary>
                public Action<string, string> StartProgressBar = null;

                /// <summary>A delegate that is used to update a progress bar.</summary>
                public Action<int, int, string, string> UpdateProgressBar = null;

                /// <summary>A counter for the total number of results to pull when iterating through paged results.</summary>
                public int TotalResults = 0;
            }


            /// <summary>Remove membership.</summary>
            /// <param name="GroupKey">Email or immutable Id of the group</param>
            /// <param name="MemberKey">Email or immutable
            /// Id of the member</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public void Delete (string GroupKey, string MemberKey, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {
                var request = GetService().Members.Delete(GroupKey, MemberKey);

                if (StandardQueryParams != null) {
                    request.Fields = StandardQueryParams.fields;
                    request.QuotaUser = StandardQueryParams.quotaUser;
                    request.UserIp = StandardQueryParams.userIp;
                }



                request.Execute();
            }

            /// <summary>Retrieve Group Member</summary>
            /// <param name="GroupKey">Email or immutable Id of the group</param>
            /// <param name="MemberKey">Email or immutable
            /// Id of the member</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public Google.Apis.admin.Directory.directory_v1.Data.Member Get (string GroupKey, string MemberKey, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {
                var request = GetService().Members.Get(GroupKey, MemberKey);

                if (StandardQueryParams != null) {
                    request.Fields = StandardQueryParams.fields;
                    request.QuotaUser = StandardQueryParams.quotaUser;
                    request.UserIp = StandardQueryParams.userIp;
                }



                return request.Execute();
            }

            /// <summary>Add user to the specified group.</summary>
            /// <param name="MemberBody">The body of the request.</param>
            /// <param name="GroupKey">Email or immutable Id of the group</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public Google.Apis.admin.Directory.directory_v1.Data.Member Insert (Google.Apis.admin.Directory.directory_v1.Data.Member MemberBody, string GroupKey, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {
                var request = GetService().Members.Insert(MemberBody, GroupKey);

                if (StandardQueryParams != null) {
                    request.Fields = StandardQueryParams.fields;
                    request.QuotaUser = StandardQueryParams.quotaUser;
                    request.UserIp = StandardQueryParams.userIp;
                }



                return request.Execute();
            }

            /// <summary>Retrieve all members in a group (paginated)</summary>
            /// <param name="GroupKey">Email or immutable Id of the group</param>
            /// <param name="properties">The optional properties for this method.</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public List<Google.Apis.admin.Directory.directory_v1.Data.Members> List(
                string GroupKey, MembersListProperties properties= null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {
                var results = new List<Google.Apis.admin.Directory.directory_v1.Data.Members>();

                directory_v1.MembersResource.ListRequest request = GetService().Members.List(GroupKey);

                if (StandardQueryParams != null) {
                    request.Fields = StandardQueryParams.fields;
                    request.QuotaUser = StandardQueryParams.quotaUser;
                    request.UserIp = StandardQueryParams.userIp;
                }

                if (properties != null)
                {
                    request.MaxResults = properties.MaxResults;
                    request.Roles = properties.Roles;

                }

                if (null != properties.StartProgressBar)
                {
                    properties.StartProgressBar("Gathering Members",
                        string.Format("-Collecting Members page 1"));
                }

                Google.Apis.admin.Directory.directory_v1.Data.Members pagedResult = request.Execute();

                if (pagedResult != null)
                {
                    results.Add(pagedResult);

                    while (!string.IsNullOrWhiteSpace(pagedResult.NextPageToken) &&
                        pagedResult.NextPageToken != request.PageToken &&
                    (properties.TotalResults == 0 || results.Count < properties.TotalResults))
                    {
                        request.PageToken = pagedResult.NextPageToken;

                        if (null != properties.UpdateProgressBar)
                        {
                            properties.UpdateProgressBar(5, 10, "Gathering Members",
                                    string.Format("-Collecting Members page {0}",
                                        (results.Count + 1).ToString()));
                        }
                        pagedResult = request.Execute();
                        results.Add(pagedResult);
                    }

                    if (null != properties.UpdateProgressBar)
                    {
                        properties.UpdateProgressBar(1, 2, "Gathering Members",
                                string.Format("-Returning {0} pages.", results.Count.ToString()));
                    }
                }

                return results;
            }

            /// <summary>Update membership of a user in the specified group. This method supports patch
            /// semantics.</summary>
            /// <param name="MemberBody">The body of the request.</param>
            /// <param name="GroupKey">Email or immutable Id of the group. If Id, it should match with id of group
            /// object</param>
            /// <param name="MemberKey">Email or immutable Id of the user. If Id, it should match with id of
            /// member object</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public Google.Apis.admin.Directory.directory_v1.Data.Member Patch (Google.Apis.admin.Directory.directory_v1.Data.Member MemberBody, string GroupKey, string MemberKey, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {
                var request = GetService().Members.Patch(MemberBody, GroupKey, MemberKey);

                if (StandardQueryParams != null) {
                    request.Fields = StandardQueryParams.fields;
                    request.QuotaUser = StandardQueryParams.quotaUser;
                    request.UserIp = StandardQueryParams.userIp;
                }



                return request.Execute();
            }

            /// <summary>Update membership of a user in the specified group.</summary>
            /// <param name="MemberBody">The body of the request.</param>
            /// <param name="GroupKey">Email or immutable Id of the group. If Id, it should match with id of group
            /// object</param>
            /// <param name="MemberKey">Email or immutable Id of the user. If Id, it should match with id of
            /// member object</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public Google.Apis.admin.Directory.directory_v1.Data.Member Update (Google.Apis.admin.Directory.directory_v1.Data.Member MemberBody, string GroupKey, string MemberKey, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {
                var request = GetService().Members.Update(MemberBody, GroupKey, MemberKey);

                if (StandardQueryParams != null) {
                    request.Fields = StandardQueryParams.fields;
                    request.QuotaUser = StandardQueryParams.quotaUser;
                    request.UserIp = StandardQueryParams.userIp;
                }



                return request.Execute();
            }

        }

        /// <summary>The "mobiledevices" collection of methods.</summary>
        public class Mobiledevices
        {

            /// <summary>Optional parameters for the Mobiledevices Get method.</summary>
            public class MobiledevicesGetProperties
            {
                /// <summary>Restrict information returned to a set of selected fields.</summary>
                public directory_v1.MobiledevicesResource.GetRequest.ProjectionEnum?Projection = null;
            }

            /// <summary>Optional parameters for the Mobiledevices List method.</summary>
            public class MobiledevicesListProperties
            {
                /// <summary>Maximum number of results to return. Default is 100</summary>
                public int? MaxResults = null;

                /// <summary>Column to use for sorting results</summary>
                public directory_v1.MobiledevicesResource.ListRequest.OrderByEnum?OrderBy = null;

                /// <summary>Restrict information returned to a set of selected fields.</summary>
                public directory_v1.MobiledevicesResource.ListRequest.ProjectionEnum?Projection = null;

                /// <summary>Search string in the format given at http://support.google.com/a/bin/answer.py?hl=en=1408863#search</summary>
                public string Query = null;

                /// <summary>Whether to return results in ascending or descending order. Only of use when orderBy is also used</summary>
                public directory_v1.MobiledevicesResource.ListRequest.SortOrderEnum?SortOrder = null;

                /// <summary>A delegate that is used to start a progress bar.</summary>
                public Action<string, string> StartProgressBar = null;

                /// <summary>A delegate that is used to update a progress bar.</summary>
                public Action<int, int, string, string> UpdateProgressBar = null;

                /// <summary>A counter for the total number of results to pull when iterating through paged results.</summary>
                public int TotalResults = 0;
            }


            /// <summary>Take action on Mobile Device</summary>
            /// <param name="MobileDeviceActionBody">The body of the request.</param>
            /// <param name="CustomerId">Immutable id of the Google Apps account</param>
            /// <param name="ResourceId">Immutable
            /// id of Mobile Device</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public void Action (Google.Apis.admin.Directory.directory_v1.Data.MobileDeviceAction MobileDeviceActionBody, string CustomerId, string ResourceId, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {
                var request = GetService().Mobiledevices.Action(MobileDeviceActionBody, CustomerId, ResourceId);

                if (StandardQueryParams != null) {
                    request.Fields = StandardQueryParams.fields;
                    request.QuotaUser = StandardQueryParams.quotaUser;
                    request.UserIp = StandardQueryParams.userIp;
                }



                request.Execute();
            }

            /// <summary>Delete Mobile Device</summary>
            /// <param name="CustomerId">Immutable id of the Google Apps account</param>
            /// <param name="ResourceId">Immutable
            /// id of Mobile Device</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public void Delete (string CustomerId, string ResourceId, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {
                var request = GetService().Mobiledevices.Delete(CustomerId, ResourceId);

                if (StandardQueryParams != null) {
                    request.Fields = StandardQueryParams.fields;
                    request.QuotaUser = StandardQueryParams.quotaUser;
                    request.UserIp = StandardQueryParams.userIp;
                }



                request.Execute();
            }

            /// <summary>Retrieve Mobile Device</summary>
            /// <param name="CustomerId">Immutable id of the Google Apps account</param>
            /// <param name="ResourceId">Immutable
            /// id of Mobile Device</param>
            /// <param name="properties">The optional properties for this method.</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public Google.Apis.admin.Directory.directory_v1.Data.MobileDevice Get (string CustomerId, string ResourceId, MobiledevicesGetProperties properties= null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {
                var request = GetService().Mobiledevices.Get(CustomerId, ResourceId);

                if (StandardQueryParams != null) {
                    request.Fields = StandardQueryParams.fields;
                    request.QuotaUser = StandardQueryParams.quotaUser;
                    request.UserIp = StandardQueryParams.userIp;
                }

                if (properties != null)    {
                    request.Projection = properties.Projection;
                }

                return request.Execute();
            }

            /// <summary>Retrieve all Mobile Devices of a customer (paginated)</summary>
            /// <param name="CustomerId">Immutable id of the Google Apps account</param>
            /// <param name="properties">The optional properties for this method.</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public List<Google.Apis.admin.Directory.directory_v1.Data.MobileDevices> List(
                string CustomerId, MobiledevicesListProperties properties= null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {
                var results = new List<Google.Apis.admin.Directory.directory_v1.Data.MobileDevices>();

                directory_v1.MobiledevicesResource.ListRequest request = GetService().Mobiledevices.List(CustomerId);

                if (StandardQueryParams != null) {
                    request.Fields = StandardQueryParams.fields;
                    request.QuotaUser = StandardQueryParams.quotaUser;
                    request.UserIp = StandardQueryParams.userIp;
                }

                if (properties != null)
                {
                    request.MaxResults = properties.MaxResults;
                    request.OrderBy = properties.OrderBy;
                    request.Projection = properties.Projection;
                    request.Query = properties.Query;
                    request.SortOrder = properties.SortOrder;

                }

                if (null != properties.StartProgressBar)
                {
                    properties.StartProgressBar("Gathering Mobiledevices",
                        string.Format("-Collecting Mobiledevices page 1"));
                }

                Google.Apis.admin.Directory.directory_v1.Data.MobileDevices pagedResult = request.Execute();

                if (pagedResult != null)
                {
                    results.Add(pagedResult);

                    while (!string.IsNullOrWhiteSpace(pagedResult.NextPageToken) &&
                        pagedResult.NextPageToken != request.PageToken &&
                    (properties.TotalResults == 0 || results.Count < properties.TotalResults))
                    {
                        request.PageToken = pagedResult.NextPageToken;

                        if (null != properties.UpdateProgressBar)
                        {
                            properties.UpdateProgressBar(5, 10, "Gathering Mobiledevices",
                                    string.Format("-Collecting Mobiledevices page {0}",
                                        (results.Count + 1).ToString()));
                        }
                        pagedResult = request.Execute();
                        results.Add(pagedResult);
                    }

                    if (null != properties.UpdateProgressBar)
                    {
                        properties.UpdateProgressBar(1, 2, "Gathering Mobiledevices",
                                string.Format("-Returning {0} pages.", results.Count.ToString()));
                    }
                }

                return results;
            }

        }

        /// <summary>The "notifications" collection of methods.</summary>
        public class Notifications
        {

            /// <summary>Optional parameters for the Notifications List method.</summary>
            public class NotificationsListProperties
            {
                /// <summary>The ISO 639-1 code of the language notifications are returned in. The default is English (en).</summary>
                public string Language = null;

                /// <summary>Maximum number of notifications to return per page. The default is 100.</summary>
                public int? MaxResults = null;

                /// <summary>A delegate that is used to start a progress bar.</summary>
                public Action<string, string> StartProgressBar = null;

                /// <summary>A delegate that is used to update a progress bar.</summary>
                public Action<int, int, string, string> UpdateProgressBar = null;

                /// <summary>A counter for the total number of results to pull when iterating through paged results.</summary>
                public int TotalResults = 0;
            }


            /// <summary>Deletes a notification</summary>
            /// <param name="Customer">The unique ID for the customer's Google account. The customerId is also returned as part of
            /// the Users resource.</param>
            /// <param name="NotificationId">The unique ID of the notification.</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public void Delete (string Customer, string NotificationId, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {
                var request = GetService().Notifications.Delete(Customer, NotificationId);

                if (StandardQueryParams != null) {
                    request.Fields = StandardQueryParams.fields;
                    request.QuotaUser = StandardQueryParams.quotaUser;
                    request.UserIp = StandardQueryParams.userIp;
                }



                request.Execute();
            }

            /// <summary>Retrieves a notification.</summary>
            /// <param name="Customer">The unique ID for the customer's Google account. The customerId is also returned as part of
            /// the Users resource.</param>
            /// <param name="NotificationId">The unique ID of the notification.</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public Google.Apis.admin.Directory.directory_v1.Data.Notification Get (string Customer, string NotificationId, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {
                var request = GetService().Notifications.Get(Customer, NotificationId);

                if (StandardQueryParams != null) {
                    request.Fields = StandardQueryParams.fields;
                    request.QuotaUser = StandardQueryParams.quotaUser;
                    request.UserIp = StandardQueryParams.userIp;
                }



                return request.Execute();
            }

            /// <summary>Retrieves a list of notifications.</summary>
            /// <param name="Customer">The unique ID for the customer's Google account.</param>
            /// <param name="properties">The optional properties for this method.</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public List<Google.Apis.admin.Directory.directory_v1.Data.Notifications> List(
                string Customer, NotificationsListProperties properties= null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {
                var results = new List<Google.Apis.admin.Directory.directory_v1.Data.Notifications>();

                directory_v1.NotificationsResource.ListRequest request = GetService().Notifications.List(Customer);

                if (StandardQueryParams != null) {
                    request.Fields = StandardQueryParams.fields;
                    request.QuotaUser = StandardQueryParams.quotaUser;
                    request.UserIp = StandardQueryParams.userIp;
                }

                if (properties != null)
                {
                    request.Language = properties.Language;
                    request.MaxResults = properties.MaxResults;

                }

                if (null != properties.StartProgressBar)
                {
                    properties.StartProgressBar("Gathering Notifications",
                        string.Format("-Collecting Notifications page 1"));
                }

                Google.Apis.admin.Directory.directory_v1.Data.Notifications pagedResult = request.Execute();

                if (pagedResult != null)
                {
                    results.Add(pagedResult);

                    while (!string.IsNullOrWhiteSpace(pagedResult.NextPageToken) &&
                        pagedResult.NextPageToken != request.PageToken &&
                    (properties.TotalResults == 0 || results.Count < properties.TotalResults))
                    {
                        request.PageToken = pagedResult.NextPageToken;

                        if (null != properties.UpdateProgressBar)
                        {
                            properties.UpdateProgressBar(5, 10, "Gathering Notifications",
                                    string.Format("-Collecting Notifications page {0}",
                                        (results.Count + 1).ToString()));
                        }
                        pagedResult = request.Execute();
                        results.Add(pagedResult);
                    }

                    if (null != properties.UpdateProgressBar)
                    {
                        properties.UpdateProgressBar(1, 2, "Gathering Notifications",
                                string.Format("-Returning {0} pages.", results.Count.ToString()));
                    }
                }

                return results;
            }

            /// <summary>Updates a notification. This method supports patch semantics.</summary>
            /// <param name="NotificationBody">The body of the request.</param>
            /// <param name="Customer">The unique ID for the customer's Google account.</param>
            /// <param
            /// name="NotificationId">The unique ID of the notification.</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public Google.Apis.admin.Directory.directory_v1.Data.Notification Patch (Google.Apis.admin.Directory.directory_v1.Data.Notification NotificationBody, string Customer, string NotificationId, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {
                var request = GetService().Notifications.Patch(NotificationBody, Customer, NotificationId);

                if (StandardQueryParams != null) {
                    request.Fields = StandardQueryParams.fields;
                    request.QuotaUser = StandardQueryParams.quotaUser;
                    request.UserIp = StandardQueryParams.userIp;
                }



                return request.Execute();
            }

            /// <summary>Updates a notification.</summary>
            /// <param name="NotificationBody">The body of the request.</param>
            /// <param name="Customer">The unique ID for the customer's Google account.</param>
            /// <param
            /// name="NotificationId">The unique ID of the notification.</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public Google.Apis.admin.Directory.directory_v1.Data.Notification Update (Google.Apis.admin.Directory.directory_v1.Data.Notification NotificationBody, string Customer, string NotificationId, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {
                var request = GetService().Notifications.Update(NotificationBody, Customer, NotificationId);

                if (StandardQueryParams != null) {
                    request.Fields = StandardQueryParams.fields;
                    request.QuotaUser = StandardQueryParams.quotaUser;
                    request.UserIp = StandardQueryParams.userIp;
                }



                return request.Execute();
            }

        }

        /// <summary>The "orgunits" collection of methods.</summary>
        public class Orgunits
        {

            /// <summary>Optional parameters for the Orgunits List method.</summary>
            public class OrgunitsListProperties
            {
                /// <summary>the URL-encoded organization unit's path or its Id</summary>
                public string OrgUnitPath = null;

                /// <summary>Whether to return all sub-organizations or just immediate children</summary>
                public directory_v1.OrgunitsResource.ListRequest.TypeEnum?Type = null;
            }


            /// <summary>Remove Organization Unit</summary>
            /// <param name="CustomerId">Immutable id of the Google Apps account</param>
            /// <param name="OrgUnitPath">Full path
            /// of the organization unit or its Id</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public void Delete (string CustomerId, Google.Apis.Util.Repeatable<string> OrgUnitPath, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {
                var request = GetService().Orgunits.Delete(CustomerId, OrgUnitPath);

                if (StandardQueryParams != null) {
                    request.Fields = StandardQueryParams.fields;
                    request.QuotaUser = StandardQueryParams.quotaUser;
                    request.UserIp = StandardQueryParams.userIp;
                }



                request.Execute();
            }

            /// <summary>Retrieve Organization Unit</summary>
            /// <param name="CustomerId">Immutable id of the Google Apps account</param>
            /// <param name="OrgUnitPath">Full path
            /// of the organization unit or its Id</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public Google.Apis.admin.Directory.directory_v1.Data.OrgUnit Get (string CustomerId, Google.Apis.Util.Repeatable<string> OrgUnitPath, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {
                var request = GetService().Orgunits.Get(CustomerId, OrgUnitPath);

                if (StandardQueryParams != null) {
                    request.Fields = StandardQueryParams.fields;
                    request.QuotaUser = StandardQueryParams.quotaUser;
                    request.UserIp = StandardQueryParams.userIp;
                }



                return request.Execute();
            }

            /// <summary>Add Organization Unit</summary>
            /// <param name="OrgUnitBody">The body of the request.</param>
            /// <param name="CustomerId">Immutable id of the Google Apps account</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public Google.Apis.admin.Directory.directory_v1.Data.OrgUnit Insert (Google.Apis.admin.Directory.directory_v1.Data.OrgUnit OrgUnitBody, string CustomerId, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {
                var request = GetService().Orgunits.Insert(OrgUnitBody, CustomerId);

                if (StandardQueryParams != null) {
                    request.Fields = StandardQueryParams.fields;
                    request.QuotaUser = StandardQueryParams.quotaUser;
                    request.UserIp = StandardQueryParams.userIp;
                }



                return request.Execute();
            }

            /// <summary>Retrieve all Organization Units</summary>
            /// <param name="CustomerId">Immutable id of the Google Apps account</param>
            /// <param name="properties">The optional properties for this method.</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public Google.Apis.admin.Directory.directory_v1.Data.OrgUnits List (string CustomerId, OrgunitsListProperties properties= null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {
                var request = GetService().Orgunits.List(CustomerId);

                if (StandardQueryParams != null) {
                    request.Fields = StandardQueryParams.fields;
                    request.QuotaUser = StandardQueryParams.quotaUser;
                    request.UserIp = StandardQueryParams.userIp;
                }

                if (properties != null)    {
                    request.OrgUnitPath = properties.OrgUnitPath;
                    request.Type = properties.Type;
                }

                return request.Execute();
            }

            /// <summary>Update Organization Unit. This method supports patch semantics.</summary>
            /// <param name="OrgUnitBody">The body of the request.</param>
            /// <param name="CustomerId">Immutable id of the Google Apps account</param>
            /// <param name="OrgUnitPath">Full path
            /// of the organization unit or its Id</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public Google.Apis.admin.Directory.directory_v1.Data.OrgUnit Patch (Google.Apis.admin.Directory.directory_v1.Data.OrgUnit OrgUnitBody, string CustomerId, Google.Apis.Util.Repeatable<string> OrgUnitPath, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {
                var request = GetService().Orgunits.Patch(OrgUnitBody, CustomerId, OrgUnitPath);

                if (StandardQueryParams != null) {
                    request.Fields = StandardQueryParams.fields;
                    request.QuotaUser = StandardQueryParams.quotaUser;
                    request.UserIp = StandardQueryParams.userIp;
                }



                return request.Execute();
            }

            /// <summary>Update Organization Unit</summary>
            /// <param name="OrgUnitBody">The body of the request.</param>
            /// <param name="CustomerId">Immutable id of the Google Apps account</param>
            /// <param name="OrgUnitPath">Full path
            /// of the organization unit or its Id</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public Google.Apis.admin.Directory.directory_v1.Data.OrgUnit Update (Google.Apis.admin.Directory.directory_v1.Data.OrgUnit OrgUnitBody, string CustomerId, Google.Apis.Util.Repeatable<string> OrgUnitPath, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {
                var request = GetService().Orgunits.Update(OrgUnitBody, CustomerId, OrgUnitPath);

                if (StandardQueryParams != null) {
                    request.Fields = StandardQueryParams.fields;
                    request.QuotaUser = StandardQueryParams.quotaUser;
                    request.UserIp = StandardQueryParams.userIp;
                }



                return request.Execute();
            }

        }

        /// <summary>The "privileges" collection of methods.</summary>
        public class Privileges
        {




            /// <summary>Retrieves a paginated list of all privileges for a customer.</summary>
            /// <param name="Customer">Immutable ID of the Google Apps account.</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public Google.Apis.admin.Directory.directory_v1.Data.Privileges List (string Customer, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {
                var request = GetService().Privileges.List(Customer);

                if (StandardQueryParams != null) {
                    request.Fields = StandardQueryParams.fields;
                    request.QuotaUser = StandardQueryParams.quotaUser;
                    request.UserIp = StandardQueryParams.userIp;
                }



                return request.Execute();
            }

        }

        /// <summary>The "resources" collection of methods.</summary>
        public class Resources
        {
            /// <summary>Gets or sets the calendars resource class.</summary>
            public Calendars calendars{ get; set; }

            public Resources()
            {
                calendars = new Calendars();
            }



                /// <summary>The "calendars" collection of methods.</summary>
                public class Calendars
                {

                    /// <summary>Optional parameters for the Calendars List method.</summary>
                    public class CalendarsListProperties
                    {
                        /// <summary>Maximum number of results to return.</summary>
                        public int? MaxResults = 500;

                        /// <summary>A delegate that is used to start a progress bar.</summary>
                        public Action<string, string> StartProgressBar = null;

                        /// <summary>A delegate that is used to update a progress bar.</summary>
                        public Action<int, int, string, string> UpdateProgressBar = null;

                        /// <summary>A counter for the total number of results to pull when iterating through paged results.</summary>
                        public int TotalResults = 0;
                    }


                    /// <summary>Deletes a calendar resource.</summary>
                    /// <param name="Customer">The unique ID for the customer's Google account. As an account administrator, you can also
                    /// use the my_customer alias to represent your account's customer ID.</param>
                    /// <param
                    /// name="CalendarResourceId">The unique ID of the calendar resource to delete.</param>
                    /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
                    public void Delete (string Customer, string CalendarResourceId, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
                    {
                        var request = GetService().Resources.Calendars.Delete(Customer, CalendarResourceId);

                        if (StandardQueryParams != null) {
                            request.Fields = StandardQueryParams.fields;
                            request.QuotaUser = StandardQueryParams.quotaUser;
                            request.UserIp = StandardQueryParams.userIp;
                        }



                        request.Execute();
                    }

                    /// <summary>Retrieves a calendar resource.</summary>
                    /// <param name="Customer">The unique ID for the customer's Google account. As an account administrator, you can also
                    /// use the my_customer alias to represent your account's customer ID.</param>
                    /// <param
                    /// name="CalendarResourceId">The unique ID of the calendar resource to retrieve.</param>
                    /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
                    public Google.Apis.admin.Directory.directory_v1.Data.CalendarResource Get (string Customer, string CalendarResourceId, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
                    {
                        var request = GetService().Resources.Calendars.Get(Customer, CalendarResourceId);

                        if (StandardQueryParams != null) {
                            request.Fields = StandardQueryParams.fields;
                            request.QuotaUser = StandardQueryParams.quotaUser;
                            request.UserIp = StandardQueryParams.userIp;
                        }



                        return request.Execute();
                    }

                    /// <summary>Inserts a calendar resource.</summary>
                    /// <param name="CalendarResourceBody">The body of the request.</param>
                    /// <param name="Customer">The unique ID for the customer's Google account. As an account administrator, you can also
                    /// use the my_customer alias to represent your account's customer ID.</param>
                    /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
                    public Google.Apis.admin.Directory.directory_v1.Data.CalendarResource Insert (Google.Apis.admin.Directory.directory_v1.Data.CalendarResource CalendarResourceBody, string Customer, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
                    {
                        var request = GetService().Resources.Calendars.Insert(CalendarResourceBody, Customer);

                        if (StandardQueryParams != null) {
                            request.Fields = StandardQueryParams.fields;
                            request.QuotaUser = StandardQueryParams.quotaUser;
                            request.UserIp = StandardQueryParams.userIp;
                        }



                        return request.Execute();
                    }

                    /// <summary>Retrieves a list of calendar resources for an account.</summary>
                    /// <param name="Customer">The unique ID for the customer's Google account. As an account administrator, you can also
                    /// use the my_customer alias to represent your account's customer ID.</param>
                    /// <param name="properties">The optional properties for this method.</param>
                    /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
                    public List<Google.Apis.admin.Directory.directory_v1.Data.CalendarResources> List(
                        string Customer, CalendarsListProperties properties= null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
                    {
                        var results = new List<Google.Apis.admin.Directory.directory_v1.Data.CalendarResources>();

                        directory_v1.ResourcesResource.CalendarsResource.ListRequest request = GetService().Resources.Calendars.List(Customer);

                        if (StandardQueryParams != null) {
                            request.Fields = StandardQueryParams.fields;
                            request.QuotaUser = StandardQueryParams.quotaUser;
                            request.UserIp = StandardQueryParams.userIp;
                        }

                        if (properties != null)
                        {
                            request.MaxResults = properties.MaxResults;

                        }

                        if (null != properties.StartProgressBar)
                        {
                            properties.StartProgressBar("Gathering Calendars",
                                string.Format("-Collecting Calendars page 1"));
                        }

                        Google.Apis.admin.Directory.directory_v1.Data.CalendarResources pagedResult = request.Execute();

                        if (pagedResult != null)
                        {
                            results.Add(pagedResult);

                            while (!string.IsNullOrWhiteSpace(pagedResult.NextPageToken) &&
                                pagedResult.NextPageToken != request.PageToken &&
                            (properties.TotalResults == 0 || results.Count < properties.TotalResults))
                            {
                                request.PageToken = pagedResult.NextPageToken;

                                if (null != properties.UpdateProgressBar)
                                {
                                    properties.UpdateProgressBar(5, 10, "Gathering Calendars",
                                            string.Format("-Collecting Calendars page {0}",
                                                (results.Count + 1).ToString()));
                                }
                                pagedResult = request.Execute();
                                results.Add(pagedResult);
                            }

                            if (null != properties.UpdateProgressBar)
                            {
                                properties.UpdateProgressBar(1, 2, "Gathering Calendars",
                                        string.Format("-Returning {0} pages.", results.Count.ToString()));
                            }
                        }

                        return results;
                    }

                    /// <summary>Updates a calendar resource. This method supports patch semantics.</summary>
                    /// <param name="CalendarResourceBody">The body of the request.</param>
                    /// <param name="Customer">The unique ID for the customer's Google account. As an account administrator, you can also
                    /// use the my_customer alias to represent your account's customer ID.</param>
                    /// <param
                    /// name="CalendarResourceId">The unique ID of the calendar resource to update.</param>
                    /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
                    public Google.Apis.admin.Directory.directory_v1.Data.CalendarResource Patch (Google.Apis.admin.Directory.directory_v1.Data.CalendarResource CalendarResourceBody, string Customer, string CalendarResourceId, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
                    {
                        var request = GetService().Resources.Calendars.Patch(CalendarResourceBody, Customer, CalendarResourceId);

                        if (StandardQueryParams != null) {
                            request.Fields = StandardQueryParams.fields;
                            request.QuotaUser = StandardQueryParams.quotaUser;
                            request.UserIp = StandardQueryParams.userIp;
                        }



                        return request.Execute();
                    }

                    /// <summary>Updates a calendar resource.</summary>
                    /// <param name="CalendarResourceBody">The body of the request.</param>
                    /// <param name="Customer">The unique ID for the customer's Google account. As an account administrator, you can also
                    /// use the my_customer alias to represent your account's customer ID.</param>
                    /// <param
                    /// name="CalendarResourceId">The unique ID of the calendar resource to update.</param>
                    /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
                    public Google.Apis.admin.Directory.directory_v1.Data.CalendarResource Update (Google.Apis.admin.Directory.directory_v1.Data.CalendarResource CalendarResourceBody, string Customer, string CalendarResourceId, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
                    {
                        var request = GetService().Resources.Calendars.Update(CalendarResourceBody, Customer, CalendarResourceId);

                        if (StandardQueryParams != null) {
                            request.Fields = StandardQueryParams.fields;
                            request.QuotaUser = StandardQueryParams.quotaUser;
                            request.UserIp = StandardQueryParams.userIp;
                        }



                        return request.Execute();
                    }

                }
        }

        /// <summary>The "roleAssignments" collection of methods.</summary>
        public class RoleAssignments
        {

            /// <summary>Optional parameters for the RoleAssignments List method.</summary>
            public class RoleAssignmentsListProperties
            {
                /// <summary>Maximum number of results to return.</summary>
                public int? MaxResults = 200;

                /// <summary>Immutable ID of a role. If included in the request, returns only role assignments containing this role ID.</summary>
                public string RoleId = null;

                /// <summary>The user's primary email address, alias email address, or unique user ID. If included in the request, returns role assignments only for this user.</summary>
                public string UserKey = null;

                /// <summary>A delegate that is used to start a progress bar.</summary>
                public Action<string, string> StartProgressBar = null;

                /// <summary>A delegate that is used to update a progress bar.</summary>
                public Action<int, int, string, string> UpdateProgressBar = null;

                /// <summary>A counter for the total number of results to pull when iterating through paged results.</summary>
                public int TotalResults = 0;
            }


            /// <summary>Deletes a role assignment.</summary>
            /// <param name="Customer">Immutable ID of the Google Apps account.</param>
            /// <param
            /// name="RoleAssignmentId">Immutable ID of the role assignment.</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public void Delete (string Customer, string RoleAssignmentId, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {
                var request = GetService().RoleAssignments.Delete(Customer, RoleAssignmentId);

                if (StandardQueryParams != null) {
                    request.Fields = StandardQueryParams.fields;
                    request.QuotaUser = StandardQueryParams.quotaUser;
                    request.UserIp = StandardQueryParams.userIp;
                }



                request.Execute();
            }

            /// <summary>Retrieve a role assignment.</summary>
            /// <param name="Customer">Immutable ID of the Google Apps account.</param>
            /// <param
            /// name="RoleAssignmentId">Immutable ID of the role assignment.</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public Google.Apis.admin.Directory.directory_v1.Data.RoleAssignment Get (string Customer, string RoleAssignmentId, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {
                var request = GetService().RoleAssignments.Get(Customer, RoleAssignmentId);

                if (StandardQueryParams != null) {
                    request.Fields = StandardQueryParams.fields;
                    request.QuotaUser = StandardQueryParams.quotaUser;
                    request.UserIp = StandardQueryParams.userIp;
                }



                return request.Execute();
            }

            /// <summary>Creates a role assignment.</summary>
            /// <param name="RoleAssignmentBody">The body of the request.</param>
            /// <param name="Customer">Immutable ID of the Google Apps account.</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public Google.Apis.admin.Directory.directory_v1.Data.RoleAssignment Insert (Google.Apis.admin.Directory.directory_v1.Data.RoleAssignment RoleAssignmentBody, string Customer, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {
                var request = GetService().RoleAssignments.Insert(RoleAssignmentBody, Customer);

                if (StandardQueryParams != null) {
                    request.Fields = StandardQueryParams.fields;
                    request.QuotaUser = StandardQueryParams.quotaUser;
                    request.UserIp = StandardQueryParams.userIp;
                }



                return request.Execute();
            }

            /// <summary>Retrieves a paginated list of all roleAssignments.</summary>
            /// <param name="Customer">Immutable ID of the Google Apps account.</param>
            /// <param name="properties">The optional properties for this method.</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public List<Google.Apis.admin.Directory.directory_v1.Data.RoleAssignments> List(
                string Customer, RoleAssignmentsListProperties properties= null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {
                var results = new List<Google.Apis.admin.Directory.directory_v1.Data.RoleAssignments>();

                directory_v1.RoleAssignmentsResource.ListRequest request = GetService().RoleAssignments.List(Customer);

                if (StandardQueryParams != null) {
                    request.Fields = StandardQueryParams.fields;
                    request.QuotaUser = StandardQueryParams.quotaUser;
                    request.UserIp = StandardQueryParams.userIp;
                }

                if (properties != null)
                {
                    request.MaxResults = properties.MaxResults;
                    request.RoleId = properties.RoleId;
                    request.UserKey = properties.UserKey;

                }

                if (null != properties.StartProgressBar)
                {
                    properties.StartProgressBar("Gathering RoleAssignments",
                        string.Format("-Collecting RoleAssignments page 1"));
                }

                Google.Apis.admin.Directory.directory_v1.Data.RoleAssignments pagedResult = request.Execute();

                if (pagedResult != null)
                {
                    results.Add(pagedResult);

                    while (!string.IsNullOrWhiteSpace(pagedResult.NextPageToken) &&
                        pagedResult.NextPageToken != request.PageToken &&
                    (properties.TotalResults == 0 || results.Count < properties.TotalResults))
                    {
                        request.PageToken = pagedResult.NextPageToken;

                        if (null != properties.UpdateProgressBar)
                        {
                            properties.UpdateProgressBar(5, 10, "Gathering RoleAssignments",
                                    string.Format("-Collecting RoleAssignments page {0}",
                                        (results.Count + 1).ToString()));
                        }
                        pagedResult = request.Execute();
                        results.Add(pagedResult);
                    }

                    if (null != properties.UpdateProgressBar)
                    {
                        properties.UpdateProgressBar(1, 2, "Gathering RoleAssignments",
                                string.Format("-Returning {0} pages.", results.Count.ToString()));
                    }
                }

                return results;
            }

        }

        /// <summary>The "roles" collection of methods.</summary>
        public class Roles
        {

            /// <summary>Optional parameters for the Roles List method.</summary>
            public class RolesListProperties
            {
                /// <summary>Maximum number of results to return.</summary>
                public int? MaxResults = 100;

                /// <summary>A delegate that is used to start a progress bar.</summary>
                public Action<string, string> StartProgressBar = null;

                /// <summary>A delegate that is used to update a progress bar.</summary>
                public Action<int, int, string, string> UpdateProgressBar = null;

                /// <summary>A counter for the total number of results to pull when iterating through paged results.</summary>
                public int TotalResults = 0;
            }


            /// <summary>Deletes a role.</summary>
            /// <param name="Customer">Immutable ID of the Google Apps account.</param>
            /// <param name="RoleId">Immutable ID of
            /// the role.</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public void Delete (string Customer, string RoleId, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {
                var request = GetService().Roles.Delete(Customer, RoleId);

                if (StandardQueryParams != null) {
                    request.Fields = StandardQueryParams.fields;
                    request.QuotaUser = StandardQueryParams.quotaUser;
                    request.UserIp = StandardQueryParams.userIp;
                }



                request.Execute();
            }

            /// <summary>Retrieves a role.</summary>
            /// <param name="Customer">Immutable ID of the Google Apps account.</param>
            /// <param name="RoleId">Immutable ID of
            /// the role.</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public Google.Apis.admin.Directory.directory_v1.Data.Role Get (string Customer, string RoleId, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {
                var request = GetService().Roles.Get(Customer, RoleId);

                if (StandardQueryParams != null) {
                    request.Fields = StandardQueryParams.fields;
                    request.QuotaUser = StandardQueryParams.quotaUser;
                    request.UserIp = StandardQueryParams.userIp;
                }



                return request.Execute();
            }

            /// <summary>Creates a role.</summary>
            /// <param name="RoleBody">The body of the request.</param>
            /// <param name="Customer">Immutable ID of the Google Apps account.</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public Google.Apis.admin.Directory.directory_v1.Data.Role Insert (Google.Apis.admin.Directory.directory_v1.Data.Role RoleBody, string Customer, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {
                var request = GetService().Roles.Insert(RoleBody, Customer);

                if (StandardQueryParams != null) {
                    request.Fields = StandardQueryParams.fields;
                    request.QuotaUser = StandardQueryParams.quotaUser;
                    request.UserIp = StandardQueryParams.userIp;
                }



                return request.Execute();
            }

            /// <summary>Retrieves a paginated list of all the roles in a domain.</summary>
            /// <param name="Customer">Immutable id of the Google Apps account.</param>
            /// <param name="properties">The optional properties for this method.</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public List<Google.Apis.admin.Directory.directory_v1.Data.Roles> List(
                string Customer, RolesListProperties properties= null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {
                var results = new List<Google.Apis.admin.Directory.directory_v1.Data.Roles>();

                directory_v1.RolesResource.ListRequest request = GetService().Roles.List(Customer);

                if (StandardQueryParams != null) {
                    request.Fields = StandardQueryParams.fields;
                    request.QuotaUser = StandardQueryParams.quotaUser;
                    request.UserIp = StandardQueryParams.userIp;
                }

                if (properties != null)
                {
                    request.MaxResults = properties.MaxResults;

                }

                if (null != properties.StartProgressBar)
                {
                    properties.StartProgressBar("Gathering Roles",
                        string.Format("-Collecting Roles page 1"));
                }

                Google.Apis.admin.Directory.directory_v1.Data.Roles pagedResult = request.Execute();

                if (pagedResult != null)
                {
                    results.Add(pagedResult);

                    while (!string.IsNullOrWhiteSpace(pagedResult.NextPageToken) &&
                        pagedResult.NextPageToken != request.PageToken &&
                    (properties.TotalResults == 0 || results.Count < properties.TotalResults))
                    {
                        request.PageToken = pagedResult.NextPageToken;

                        if (null != properties.UpdateProgressBar)
                        {
                            properties.UpdateProgressBar(5, 10, "Gathering Roles",
                                    string.Format("-Collecting Roles page {0}",
                                        (results.Count + 1).ToString()));
                        }
                        pagedResult = request.Execute();
                        results.Add(pagedResult);
                    }

                    if (null != properties.UpdateProgressBar)
                    {
                        properties.UpdateProgressBar(1, 2, "Gathering Roles",
                                string.Format("-Returning {0} pages.", results.Count.ToString()));
                    }
                }

                return results;
            }

            /// <summary>Updates a role. This method supports patch semantics.</summary>
            /// <param name="RoleBody">The body of the request.</param>
            /// <param name="Customer">Immutable ID of the Google Apps account.</param>
            /// <param name="RoleId">Immutable ID of
            /// the role.</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public Google.Apis.admin.Directory.directory_v1.Data.Role Patch (Google.Apis.admin.Directory.directory_v1.Data.Role RoleBody, string Customer, string RoleId, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {
                var request = GetService().Roles.Patch(RoleBody, Customer, RoleId);

                if (StandardQueryParams != null) {
                    request.Fields = StandardQueryParams.fields;
                    request.QuotaUser = StandardQueryParams.quotaUser;
                    request.UserIp = StandardQueryParams.userIp;
                }



                return request.Execute();
            }

            /// <summary>Updates a role.</summary>
            /// <param name="RoleBody">The body of the request.</param>
            /// <param name="Customer">Immutable ID of the Google Apps account.</param>
            /// <param name="RoleId">Immutable ID of
            /// the role.</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public Google.Apis.admin.Directory.directory_v1.Data.Role Update (Google.Apis.admin.Directory.directory_v1.Data.Role RoleBody, string Customer, string RoleId, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {
                var request = GetService().Roles.Update(RoleBody, Customer, RoleId);

                if (StandardQueryParams != null) {
                    request.Fields = StandardQueryParams.fields;
                    request.QuotaUser = StandardQueryParams.quotaUser;
                    request.UserIp = StandardQueryParams.userIp;
                }



                return request.Execute();
            }

        }

        /// <summary>The "schemas" collection of methods.</summary>
        public class Schemas
        {




            /// <summary>Delete schema</summary>
            /// <param name="CustomerId">Immutable id of the Google Apps account</param>
            /// <param name="SchemaKey">Name or
            /// immutable Id of the schema</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public void Delete (string CustomerId, string SchemaKey, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {
                var request = GetService().Schemas.Delete(CustomerId, SchemaKey);

                if (StandardQueryParams != null) {
                    request.Fields = StandardQueryParams.fields;
                    request.QuotaUser = StandardQueryParams.quotaUser;
                    request.UserIp = StandardQueryParams.userIp;
                }



                request.Execute();
            }

            /// <summary>Retrieve schema</summary>
            /// <param name="CustomerId">Immutable id of the Google Apps account</param>
            /// <param name="SchemaKey">Name or
            /// immutable Id of the schema</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public Google.Apis.admin.Directory.directory_v1.Data.Schema Get (string CustomerId, string SchemaKey, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {
                var request = GetService().Schemas.Get(CustomerId, SchemaKey);

                if (StandardQueryParams != null) {
                    request.Fields = StandardQueryParams.fields;
                    request.QuotaUser = StandardQueryParams.quotaUser;
                    request.UserIp = StandardQueryParams.userIp;
                }



                return request.Execute();
            }

            /// <summary>Create schema.</summary>
            /// <param name="SchemaBody">The body of the request.</param>
            /// <param name="CustomerId">Immutable id of the Google Apps account</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public Google.Apis.admin.Directory.directory_v1.Data.Schema Insert (Google.Apis.admin.Directory.directory_v1.Data.Schema SchemaBody, string CustomerId, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {
                var request = GetService().Schemas.Insert(SchemaBody, CustomerId);

                if (StandardQueryParams != null) {
                    request.Fields = StandardQueryParams.fields;
                    request.QuotaUser = StandardQueryParams.quotaUser;
                    request.UserIp = StandardQueryParams.userIp;
                }



                return request.Execute();
            }

            /// <summary>Retrieve all schemas for a customer</summary>
            /// <param name="CustomerId">Immutable id of the Google Apps account</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public Google.Apis.admin.Directory.directory_v1.Data.Schemas List (string CustomerId, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {
                var request = GetService().Schemas.List(CustomerId);

                if (StandardQueryParams != null) {
                    request.Fields = StandardQueryParams.fields;
                    request.QuotaUser = StandardQueryParams.quotaUser;
                    request.UserIp = StandardQueryParams.userIp;
                }



                return request.Execute();
            }

            /// <summary>Update schema. This method supports patch semantics.</summary>
            /// <param name="SchemaBody">The body of the request.</param>
            /// <param name="CustomerId">Immutable id of the Google Apps account</param>
            /// <param name="SchemaKey">Name or
            /// immutable Id of the schema.</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public Google.Apis.admin.Directory.directory_v1.Data.Schema Patch (Google.Apis.admin.Directory.directory_v1.Data.Schema SchemaBody, string CustomerId, string SchemaKey, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {
                var request = GetService().Schemas.Patch(SchemaBody, CustomerId, SchemaKey);

                if (StandardQueryParams != null) {
                    request.Fields = StandardQueryParams.fields;
                    request.QuotaUser = StandardQueryParams.quotaUser;
                    request.UserIp = StandardQueryParams.userIp;
                }



                return request.Execute();
            }

            /// <summary>Update schema</summary>
            /// <param name="SchemaBody">The body of the request.</param>
            /// <param name="CustomerId">Immutable id of the Google Apps account</param>
            /// <param name="SchemaKey">Name or
            /// immutable Id of the schema.</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public Google.Apis.admin.Directory.directory_v1.Data.Schema Update (Google.Apis.admin.Directory.directory_v1.Data.Schema SchemaBody, string CustomerId, string SchemaKey, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {
                var request = GetService().Schemas.Update(SchemaBody, CustomerId, SchemaKey);

                if (StandardQueryParams != null) {
                    request.Fields = StandardQueryParams.fields;
                    request.QuotaUser = StandardQueryParams.quotaUser;
                    request.UserIp = StandardQueryParams.userIp;
                }



                return request.Execute();
            }

        }

        /// <summary>The "tokens" collection of methods.</summary>
        public class Tokens
        {




            /// <summary>Delete all access tokens issued by a user for an application.</summary>
            /// <param name="UserKey">Identifies the user in the API request. The value can be the user's primary email address,
            /// alias email address, or unique user ID.</param>
            /// <param name="ClientId">The Client ID of the application the
            /// token is issued to.</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public void Delete (string UserKey, string ClientId, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {
                var request = GetService().Tokens.Delete(UserKey, ClientId);

                if (StandardQueryParams != null) {
                    request.Fields = StandardQueryParams.fields;
                    request.QuotaUser = StandardQueryParams.quotaUser;
                    request.UserIp = StandardQueryParams.userIp;
                }



                request.Execute();
            }

            /// <summary>Get information about an access token issued by a user.</summary>
            /// <param name="UserKey">Identifies the user in the API request. The value can be the user's primary email address,
            /// alias email address, or unique user ID.</param>
            /// <param name="ClientId">The Client ID of the application the
            /// token is issued to.</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public Google.Apis.admin.Directory.directory_v1.Data.Token Get (string UserKey, string ClientId, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {
                var request = GetService().Tokens.Get(UserKey, ClientId);

                if (StandardQueryParams != null) {
                    request.Fields = StandardQueryParams.fields;
                    request.QuotaUser = StandardQueryParams.quotaUser;
                    request.UserIp = StandardQueryParams.userIp;
                }



                return request.Execute();
            }

            /// <summary>Returns the set of tokens specified user has issued to 3rd party applications.</summary>
            /// <param name="UserKey">Identifies the user in the API request. The value can be the user's primary email address,
            /// alias email address, or unique user ID.</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public Google.Apis.admin.Directory.directory_v1.Data.Tokens List (string UserKey, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {
                var request = GetService().Tokens.List(UserKey);

                if (StandardQueryParams != null) {
                    request.Fields = StandardQueryParams.fields;
                    request.QuotaUser = StandardQueryParams.quotaUser;
                    request.UserIp = StandardQueryParams.userIp;
                }



                return request.Execute();
            }

        }

        /// <summary>The "users" collection of methods.</summary>
        public class Users
        {
            /// <summary>Gets or sets the aliases resource class.</summary>
            public Aliases aliases{ get; set; }

            /// <summary>Gets or sets the photos resource class.</summary>
            public Photos photos{ get; set; }

            public Users()
            {
                aliases = new Aliases();
                photos = new Photos();
            }

            /// <summary>Optional parameters for the Users Get method.</summary>
            public class UsersGetProperties
            {
                /// <summary>Comma-separated list of schema names. All fields from these schemas are fetched. This should only be set when projection=custom.</summary>
                public string CustomFieldMask = null;

                /// <summary>What subset of fields to fetch for this user.</summary>
                public directory_v1.UsersResource.GetRequest.ProjectionEnum?Projection = null;

                /// <summary>Whether to fetch the ADMIN_VIEW or DOMAIN_PUBLIC view of the user.</summary>
                public directory_v1.UsersResource.GetRequest.ViewTypeEnum?ViewType = null;
            }

            /// <summary>Optional parameters for the Users List method.</summary>
            public class UsersListProperties
            {
                /// <summary>Comma-separated list of schema names. All fields from these schemas are fetched. This should only be set when projection=custom.</summary>
                public string CustomFieldMask = null;

                /// <summary>Immutable id of the Google Apps account. In case of multi-domain, to fetch all users for a customer, fill this field instead of domain.</summary>
                public string Customer = null;

                /// <summary>Name of the domain. Fill this field to get users from only this domain. To return all users in a multi-domain fill customer field instead.</summary>
                public string Domain = null;

                /// <summary>Event on which subscription is intended (if subscribing)</summary>
                public directory_v1.UsersResource.ListRequest.EventEnum?Event = null;

                /// <summary>Maximum number of results to return. Default is 100. Max allowed is 500</summary>
                public int? MaxResults = 500;

                /// <summary>Column to use for sorting results</summary>
                public directory_v1.UsersResource.ListRequest.OrderByEnum?OrderBy = null;

                /// <summary>What subset of fields to fetch for this user.</summary>
                public directory_v1.UsersResource.ListRequest.ProjectionEnum?Projection = null;

                /// <summary>Query string search. Should be of the form "". Complete documentation is at https://developers.google.com/admin-sdk/directory/v1/guides/search-users</summary>
                public string Query = null;

                /// <summary>If set to true retrieves the list of deleted users. Default is false</summary>
                public string ShowDeleted = null;

                /// <summary>Whether to return results in ascending or descending order.</summary>
                public directory_v1.UsersResource.ListRequest.SortOrderEnum?SortOrder = null;

                /// <summary>Whether to fetch the ADMIN_VIEW or DOMAIN_PUBLIC view of the user.</summary>
                public directory_v1.UsersResource.ListRequest.ViewTypeEnum?ViewType = null;

                /// <summary>A delegate that is used to start a progress bar.</summary>
                public Action<string, string> StartProgressBar = null;

                /// <summary>A delegate that is used to update a progress bar.</summary>
                public Action<int, int, string, string> UpdateProgressBar = null;

                /// <summary>A counter for the total number of results to pull when iterating through paged results.</summary>
                public int TotalResults = 0;
            }

            /// <summary>Optional parameters for the Users Watch method.</summary>
            public class UsersWatchProperties
            {
                /// <summary>Comma-separated list of schema names. All fields from these schemas are fetched. This should only be set when projection=custom.</summary>
                public string CustomFieldMask = null;

                /// <summary>Immutable id of the Google Apps account. In case of multi-domain, to fetch all users for a customer, fill this field instead of domain.</summary>
                public string Customer = null;

                /// <summary>Name of the domain. Fill this field to get users from only this domain. To return all users in a multi-domain fill customer field instead.</summary>
                public string Domain = null;

                /// <summary>Event on which subscription is intended (if subscribing)</summary>
                public directory_v1.UsersResource.WatchRequest.EventEnum?Event = null;

                /// <summary>Maximum number of results to return. Default is 100. Max allowed is 500</summary>
                public int? MaxResults = 500;

                /// <summary>Column to use for sorting results</summary>
                public directory_v1.UsersResource.WatchRequest.OrderByEnum?OrderBy = null;

                /// <summary>What subset of fields to fetch for this user.</summary>
                public directory_v1.UsersResource.WatchRequest.ProjectionEnum?Projection = null;

                /// <summary>Query string search. Should be of the form "". Complete documentation is at https://developers.google.com/admin-sdk/directory/v1/guides/search-users</summary>
                public string Query = null;

                /// <summary>If set to true retrieves the list of deleted users. Default is false</summary>
                public string ShowDeleted = null;

                /// <summary>Whether to return results in ascending or descending order.</summary>
                public directory_v1.UsersResource.WatchRequest.SortOrderEnum?SortOrder = null;

                /// <summary>Whether to fetch the ADMIN_VIEW or DOMAIN_PUBLIC view of the user.</summary>
                public directory_v1.UsersResource.WatchRequest.ViewTypeEnum?ViewType = null;
            }


            /// <summary>Delete user</summary>
            /// <param name="UserKey">Email or immutable Id of the user</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public void Delete (string UserKey, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {
                var request = GetService().Users.Delete(UserKey);

                if (StandardQueryParams != null) {
                    request.Fields = StandardQueryParams.fields;
                    request.QuotaUser = StandardQueryParams.quotaUser;
                    request.UserIp = StandardQueryParams.userIp;
                }



                request.Execute();
            }

            /// <summary>retrieve user</summary>
            /// <param name="UserKey">Email or immutable Id of the user</param>
            /// <param name="properties">The optional properties for this method.</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public Google.Apis.admin.Directory.directory_v1.Data.User Get (string UserKey, UsersGetProperties properties= null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {
                var request = GetService().Users.Get(UserKey);

                if (StandardQueryParams != null) {
                    request.Fields = StandardQueryParams.fields;
                    request.QuotaUser = StandardQueryParams.quotaUser;
                    request.UserIp = StandardQueryParams.userIp;
                }

                if (properties != null)    {
                    request.CustomFieldMask = properties.CustomFieldMask;
                    request.Projection = properties.Projection;
                    request.ViewType = properties.ViewType;
                }

                return request.Execute();
            }

            /// <summary>create user.</summary>
            /// <param name="UserBody">The body of the request.</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public Google.Apis.admin.Directory.directory_v1.Data.User Insert (Google.Apis.admin.Directory.directory_v1.Data.User UserBody, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {
                var request = GetService().Users.Insert(UserBody);

                if (StandardQueryParams != null) {
                    request.Fields = StandardQueryParams.fields;
                    request.QuotaUser = StandardQueryParams.quotaUser;
                    request.UserIp = StandardQueryParams.userIp;
                }



                return request.Execute();
            }

            /// <summary>Retrieve either deleted users or all users in a domain (paginated)</summary>
            /// <param name="properties">The optional properties for this method.</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public List<Google.Apis.admin.Directory.directory_v1.Data.Users> List(
                UsersListProperties properties= null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {
                var results = new List<Google.Apis.admin.Directory.directory_v1.Data.Users>();

                directory_v1.UsersResource.ListRequest request = GetService().Users.List();

                if (StandardQueryParams != null) {
                    request.Fields = StandardQueryParams.fields;
                    request.QuotaUser = StandardQueryParams.quotaUser;
                    request.UserIp = StandardQueryParams.userIp;
                }

                if (properties != null)
                {
                    request.CustomFieldMask = properties.CustomFieldMask;
                    request.Customer = properties.Customer;
                    request.Domain = properties.Domain;
                    request.Event = properties.Event;
                    request.MaxResults = properties.MaxResults;
                    request.OrderBy = properties.OrderBy;
                    request.Projection = properties.Projection;
                    request.Query = properties.Query;
                    request.ShowDeleted = properties.ShowDeleted;
                    request.SortOrder = properties.SortOrder;
                    request.ViewType = properties.ViewType;

                }

                if (null != properties.StartProgressBar)
                {
                    properties.StartProgressBar("Gathering Users",
                        string.Format("-Collecting Users page 1"));
                }

                Google.Apis.admin.Directory.directory_v1.Data.Users pagedResult = request.Execute();

                if (pagedResult != null)
                {
                    results.Add(pagedResult);

                    while (!string.IsNullOrWhiteSpace(pagedResult.NextPageToken) &&
                        pagedResult.NextPageToken != request.PageToken &&
                    (properties.TotalResults == 0 || results.Count < properties.TotalResults))
                    {
                        request.PageToken = pagedResult.NextPageToken;

                        if (null != properties.UpdateProgressBar)
                        {
                            properties.UpdateProgressBar(5, 10, "Gathering Users",
                                    string.Format("-Collecting Users page {0}",
                                        (results.Count + 1).ToString()));
                        }
                        pagedResult = request.Execute();
                        results.Add(pagedResult);
                    }

                    if (null != properties.UpdateProgressBar)
                    {
                        properties.UpdateProgressBar(1, 2, "Gathering Users",
                                string.Format("-Returning {0} pages.", results.Count.ToString()));
                    }
                }

                return results;
            }

            /// <summary>change admin status of a user</summary>
            /// <param name="UserMakeAdminBody">The body of the request.</param>
            /// <param name="UserKey">Email or immutable Id of the user as admin</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public void MakeAdmin (Google.Apis.admin.Directory.directory_v1.Data.UserMakeAdmin UserMakeAdminBody, string UserKey, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {
                var request = GetService().Users.MakeAdmin(UserMakeAdminBody, UserKey);

                if (StandardQueryParams != null) {
                    request.Fields = StandardQueryParams.fields;
                    request.QuotaUser = StandardQueryParams.quotaUser;
                    request.UserIp = StandardQueryParams.userIp;
                }



                request.Execute();
            }

            /// <summary>update user. This method supports patch semantics.</summary>
            /// <param name="UserBody">The body of the request.</param>
            /// <param name="UserKey">Email or immutable Id of the user. If Id, it should match with id of user object</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public Google.Apis.admin.Directory.directory_v1.Data.User Patch (Google.Apis.admin.Directory.directory_v1.Data.User UserBody, string UserKey, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {
                var request = GetService().Users.Patch(UserBody, UserKey);

                if (StandardQueryParams != null) {
                    request.Fields = StandardQueryParams.fields;
                    request.QuotaUser = StandardQueryParams.quotaUser;
                    request.UserIp = StandardQueryParams.userIp;
                }



                return request.Execute();
            }

            /// <summary>Undelete a deleted user</summary>
            /// <param name="UserUndeleteBody">The body of the request.</param>
            /// <param name="UserKey">The immutable id of the user</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public void Undelete (Google.Apis.admin.Directory.directory_v1.Data.UserUndelete UserUndeleteBody, string UserKey, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {
                var request = GetService().Users.Undelete(UserUndeleteBody, UserKey);

                if (StandardQueryParams != null) {
                    request.Fields = StandardQueryParams.fields;
                    request.QuotaUser = StandardQueryParams.quotaUser;
                    request.UserIp = StandardQueryParams.userIp;
                }



                request.Execute();
            }

            /// <summary>update user</summary>
            /// <param name="UserBody">The body of the request.</param>
            /// <param name="UserKey">Email or immutable Id of the user. If Id, it should match with id of user object</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public Google.Apis.admin.Directory.directory_v1.Data.User Update (Google.Apis.admin.Directory.directory_v1.Data.User UserBody, string UserKey, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {
                var request = GetService().Users.Update(UserBody, UserKey);

                if (StandardQueryParams != null) {
                    request.Fields = StandardQueryParams.fields;
                    request.QuotaUser = StandardQueryParams.quotaUser;
                    request.UserIp = StandardQueryParams.userIp;
                }



                return request.Execute();
            }

            /// <summary>Watch for changes in users list</summary>
            /// <param name="ChannelBody">The body of the request.</param>
            /// <param name="properties">The optional properties for this method.</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public Google.Apis.admin.Directory.directory_v1.Data.Channel Watch (Google.Apis.admin.Directory.directory_v1.Data.Channel ChannelBody, UsersWatchProperties properties= null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {
                var request = GetService().Users.Watch(ChannelBody);

                if (StandardQueryParams != null) {
                    request.Fields = StandardQueryParams.fields;
                    request.QuotaUser = StandardQueryParams.quotaUser;
                    request.UserIp = StandardQueryParams.userIp;
                }

                if (properties != null)    {
                    request.CustomFieldMask = properties.CustomFieldMask;
                    request.Customer = properties.Customer;
                    request.Domain = properties.Domain;
                    request.Event = properties.Event;
                    request.MaxResults = properties.MaxResults;
                    request.OrderBy = properties.OrderBy;
                    request.Projection = properties.Projection;
                    request.Query = properties.Query;
                    request.ShowDeleted = properties.ShowDeleted;
                    request.SortOrder = properties.SortOrder;
                    request.ViewType = properties.ViewType;
                }

                return request.Execute();
            }
                /// <summary>The "aliases" collection of methods.</summary>
                public class Aliases
                {

                    /// <summary>Optional parameters for the Aliases List method.</summary>
                    public class AliasesListProperties
                    {
                        /// <summary>Event on which subscription is intended (if subscribing)</summary>
                        public directory_v1.UsersResource.AliasesResource.ListRequest.EventEnum?Event = null;
                    }

                    /// <summary>Optional parameters for the Aliases Watch method.</summary>
                    public class AliasesWatchProperties
                    {
                        /// <summary>Event on which subscription is intended (if subscribing)</summary>
                        public directory_v1.UsersResource.AliasesResource.WatchRequest.EventEnum?Event = null;
                    }


                    /// <summary>Remove a alias for the user</summary>
                    /// <param name="UserKey">Email or immutable Id of the user</param>
                    /// <param name="Alias">The alias to be
                    /// removed</param>
                    /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
                    public void Delete (string UserKey, string Alias, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
                    {
                        var request = GetService().Users.Aliases.Delete(UserKey, Alias);

                        if (StandardQueryParams != null) {
                            request.Fields = StandardQueryParams.fields;
                            request.QuotaUser = StandardQueryParams.quotaUser;
                            request.UserIp = StandardQueryParams.userIp;
                        }



                        request.Execute();
                    }

                    /// <summary>Add a alias for the user</summary>
                    /// <param name="AliasBody">The body of the request.</param>
                    /// <param name="UserKey">Email or immutable Id of the user</param>
                    /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
                    public Google.Apis.admin.Directory.directory_v1.Data.Alias Insert (Google.Apis.admin.Directory.directory_v1.Data.Alias AliasBody, string UserKey, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
                    {
                        var request = GetService().Users.Aliases.Insert(AliasBody, UserKey);

                        if (StandardQueryParams != null) {
                            request.Fields = StandardQueryParams.fields;
                            request.QuotaUser = StandardQueryParams.quotaUser;
                            request.UserIp = StandardQueryParams.userIp;
                        }



                        return request.Execute();
                    }

                    /// <summary>List all aliases for a user</summary>
                    /// <param name="UserKey">Email or immutable Id of the user</param>
                    /// <param name="properties">The optional properties for this method.</param>
                    /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
                    public Google.Apis.admin.Directory.directory_v1.Data.Aliases List (string UserKey, AliasesListProperties properties= null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
                    {
                        var request = GetService().Users.Aliases.List(UserKey);

                        if (StandardQueryParams != null) {
                            request.Fields = StandardQueryParams.fields;
                            request.QuotaUser = StandardQueryParams.quotaUser;
                            request.UserIp = StandardQueryParams.userIp;
                        }

                        if (properties != null)    {
                            request.Event = properties.Event;
                        }

                        return request.Execute();
                    }

                    /// <summary>Watch for changes in user aliases list</summary>
                    /// <param name="ChannelBody">The body of the request.</param>
                    /// <param name="UserKey">Email or immutable Id of the user</param>
                    /// <param name="properties">The optional properties for this method.</param>
                    /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
                    public Google.Apis.admin.Directory.directory_v1.Data.Channel Watch (Google.Apis.admin.Directory.directory_v1.Data.Channel ChannelBody, string UserKey, AliasesWatchProperties properties= null, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
                    {
                        var request = GetService().Users.Aliases.Watch(ChannelBody, UserKey);

                        if (StandardQueryParams != null) {
                            request.Fields = StandardQueryParams.fields;
                            request.QuotaUser = StandardQueryParams.quotaUser;
                            request.UserIp = StandardQueryParams.userIp;
                        }

                        if (properties != null)    {
                            request.Event = properties.Event;
                        }

                        return request.Execute();
                    }

                }    /// <summary>The "photos" collection of methods.</summary>
                public class Photos
                {




                    /// <summary>Remove photos for the user</summary>
                    /// <param name="UserKey">Email or immutable Id of the user</param>
                    /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
                    public void Delete (string UserKey, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
                    {
                        var request = GetService().Users.Photos.Delete(UserKey);

                        if (StandardQueryParams != null) {
                            request.Fields = StandardQueryParams.fields;
                            request.QuotaUser = StandardQueryParams.quotaUser;
                            request.UserIp = StandardQueryParams.userIp;
                        }



                        request.Execute();
                    }

                    /// <summary>Retrieve photo of a user</summary>
                    /// <param name="UserKey">Email or immutable Id of the user</param>
                    /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
                    public Google.Apis.admin.Directory.directory_v1.Data.UserPhoto Get (string UserKey, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
                    {
                        var request = GetService().Users.Photos.Get(UserKey);

                        if (StandardQueryParams != null) {
                            request.Fields = StandardQueryParams.fields;
                            request.QuotaUser = StandardQueryParams.quotaUser;
                            request.UserIp = StandardQueryParams.userIp;
                        }



                        return request.Execute();
                    }

                    /// <summary>Add a photo for the user. This method supports patch semantics.</summary>
                    /// <param name="UserPhotoBody">The body of the request.</param>
                    /// <param name="UserKey">Email or immutable Id of the user</param>
                    /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
                    public Google.Apis.admin.Directory.directory_v1.Data.UserPhoto Patch (Google.Apis.admin.Directory.directory_v1.Data.UserPhoto UserPhotoBody, string UserKey, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
                    {
                        var request = GetService().Users.Photos.Patch(UserPhotoBody, UserKey);

                        if (StandardQueryParams != null) {
                            request.Fields = StandardQueryParams.fields;
                            request.QuotaUser = StandardQueryParams.quotaUser;
                            request.UserIp = StandardQueryParams.userIp;
                        }



                        return request.Execute();
                    }

                    /// <summary>Add a photo for the user</summary>
                    /// <param name="UserPhotoBody">The body of the request.</param>
                    /// <param name="UserKey">Email or immutable Id of the user</param>
                    /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
                    public Google.Apis.admin.Directory.directory_v1.Data.UserPhoto Update (Google.Apis.admin.Directory.directory_v1.Data.UserPhoto UserPhotoBody, string UserKey, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
                    {
                        var request = GetService().Users.Photos.Update(UserPhotoBody, UserKey);

                        if (StandardQueryParams != null) {
                            request.Fields = StandardQueryParams.fields;
                            request.QuotaUser = StandardQueryParams.quotaUser;
                            request.UserIp = StandardQueryParams.userIp;
                        }



                        return request.Execute();
                    }

                }
        }

        /// <summary>The "verificationCodes" collection of methods.</summary>
        public class VerificationCodes
        {




            /// <summary>Generate new backup verification codes for the user.</summary>
            /// <param name="UserKey">Email or immutable Id of the user</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public void Generate (string UserKey, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {
                var request = GetService().VerificationCodes.Generate(UserKey);

                if (StandardQueryParams != null) {
                    request.Fields = StandardQueryParams.fields;
                    request.QuotaUser = StandardQueryParams.quotaUser;
                    request.UserIp = StandardQueryParams.userIp;
                }



                request.Execute();
            }

            /// <summary>Invalidate the current backup verification codes for the user.</summary>
            /// <param name="UserKey">Email or immutable Id of the user</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public void Invalidate (string UserKey, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {
                var request = GetService().VerificationCodes.Invalidate(UserKey);

                if (StandardQueryParams != null) {
                    request.Fields = StandardQueryParams.fields;
                    request.QuotaUser = StandardQueryParams.quotaUser;
                    request.UserIp = StandardQueryParams.userIp;
                }



                request.Execute();
            }

            /// <summary>Returns the current set of valid backup verification codes for the specified user.</summary>
            /// <param name="UserKey">Identifies the user in the API request. The value can be the user's primary email address,
            /// alias email address, or unique user ID.</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public Google.Apis.admin.Directory.directory_v1.Data.VerificationCodes List (string UserKey, gShell.dotNet.Utilities.OAuth2.StandardQueryParameters StandardQueryParams = null)
            {
                var request = GetService().VerificationCodes.List(UserKey);

                if (StandardQueryParams != null) {
                    request.Fields = StandardQueryParams.fields;
                    request.QuotaUser = StandardQueryParams.quotaUser;
                    request.UserIp = StandardQueryParams.userIp;
                }



                return request.Execute();
            }

        }

    }
}