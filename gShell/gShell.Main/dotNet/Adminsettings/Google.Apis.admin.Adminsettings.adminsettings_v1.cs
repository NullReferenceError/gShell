// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
// an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by google-apis-code-generator 1.5.1
//     C# generator version: 1.10.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

/**
 * \mainpage
 *   Admin Settings API Version adminsettings_v1
 *
 * \section ApiInfo API Version Information
 *    <table>
 *      <tr><th>API
 *          <td><a href='https://developers.google.com/admin-sdk/admin-settings/'>Admin Settings API</a>
 *      <tr><th>API Version<td>adminsettings_v1
 *      <tr><th>API Rev<td>0
 *      <tr><th>API Docs
 *          <td><a href='https://developers.google.com/admin-sdk/admin-settings/'>
 *              https://developers.google.com/admin-sdk/admin-settings/</a>
 *      <tr><th>Discovery Name<td>admin
 *    </table>
 *
 * \section ForMoreInfo For More Information
 *
 * The complete API documentation for using Admin Settings API can be found at
 * <a href='https://developers.google.com/admin-sdk/admin-settings/'>https://developers.google.com/admin-sdk/admin-settings/</a>.
 *
 * For more information about the Google APIs Client Library for .NET, see
 * <a href='https://developers.google.com/api-client-library/dotnet/get_started'>
 * https://developers.google.com/api-client-library/dotnet/get_started</a>
 */

namespace Google.Apis.admin.Adminsettings.adminsettings_v1.Data
{    

    public class AdminSecondaryEmail : Google.Apis.Requests.IDirectResponseSchema
    {
        [Newtonsoft.Json.JsonPropertyAttribute("adminSecondaryEmail")]
        public virtual string AdminSecondaryEmailValue { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    public class CountryCode : Google.Apis.Requests.IDirectResponseSchema
    {
        [Newtonsoft.Json.JsonPropertyAttribute("countryCode")]
        public virtual string CountryCodeValue { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    public class CreationTime : Google.Apis.Requests.IDirectResponseSchema
    {
        [Newtonsoft.Json.JsonPropertyAttribute("creationTime")]
        public virtual string CreationTimeValue { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    public class CurrentNumberOfUsers : Google.Apis.Requests.IDirectResponseSchema
    {
        [Newtonsoft.Json.JsonPropertyAttribute("currentNumberOfUsers")]
        public virtual string CurrentNumberOfUsersValue { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    public class CustomLogo : Google.Apis.Requests.IDirectResponseSchema
    {
        [Newtonsoft.Json.JsonPropertyAttribute("logoImage")]
        public virtual string LogoImage { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    public class CustomerPin : Google.Apis.Requests.IDirectResponseSchema
    {
        [Newtonsoft.Json.JsonPropertyAttribute("customerPIN")]
        public virtual string CustomerPIN { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    public class DefaultLanguage : Google.Apis.Requests.IDirectResponseSchema
    {
        [Newtonsoft.Json.JsonPropertyAttribute("defaultLanguage")]
        public virtual string DefaultLanguageValue { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    public class Edition : Google.Apis.Requests.IDirectResponseSchema
    {
        [Newtonsoft.Json.JsonPropertyAttribute("edition")]
        public virtual string EditionValue { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    public class Gateway : Google.Apis.Requests.IDirectResponseSchema
    {
        [Newtonsoft.Json.JsonPropertyAttribute("smartHost")]
        public virtual string SmartHost { get; set; } 

        [Newtonsoft.Json.JsonPropertyAttribute("smtpMode")]
        public virtual string SmtpMode { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    public class MXVerificationStatus : Google.Apis.Requests.IDirectResponseSchema
    {
        [Newtonsoft.Json.JsonPropertyAttribute("verified")]
        public virtual System.Nullable<bool> Verified { get; set; } 

        [Newtonsoft.Json.JsonPropertyAttribute("verifiedMethod")]
        public virtual string VerifiedMethod { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    public class MaximumNumberOfUsers : Google.Apis.Requests.IDirectResponseSchema
    {
        [Newtonsoft.Json.JsonPropertyAttribute("maximumNumberOfUsers")]
        public virtual string MaximumNumberOfUsersValue { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    public class OrganizationName : Google.Apis.Requests.IDirectResponseSchema
    {
        [Newtonsoft.Json.JsonPropertyAttribute("organizationName")]
        public virtual string OrganizationNameValue { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    public class Routing : Google.Apis.Requests.IDirectResponseSchema
    {
        [Newtonsoft.Json.JsonPropertyAttribute("accountHandling")]
        public virtual string AccountHandling { get; set; } 

        [Newtonsoft.Json.JsonPropertyAttribute("bounceNotification")]
        public virtual System.Nullable<bool> BounceNotification { get; set; } 

        [Newtonsoft.Json.JsonPropertyAttribute("routeDestination")]
        public virtual string RouteDestination { get; set; } 

        [Newtonsoft.Json.JsonPropertyAttribute("routeEnabled")]
        public virtual System.Nullable<bool> RouteEnabled { get; set; } 

        [Newtonsoft.Json.JsonPropertyAttribute("routeRewriteTo")]
        public virtual System.Nullable<bool> RouteRewriteTo { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    public class SsoSettings : Google.Apis.Requests.IDirectResponseSchema
    {
        [Newtonsoft.Json.JsonPropertyAttribute("changePasswordUri")]
        public virtual string ChangePasswordUri { get; set; } 

        [Newtonsoft.Json.JsonPropertyAttribute("enableSSO")]
        public virtual System.Nullable<bool> EnableSSO { get; set; } 

        [Newtonsoft.Json.JsonPropertyAttribute("samlLogoutUri")]
        public virtual string SamlLogoutUri { get; set; } 

        [Newtonsoft.Json.JsonPropertyAttribute("samlSignonUri")]
        public virtual string SamlSignonUri { get; set; } 

        [Newtonsoft.Json.JsonPropertyAttribute("ssoWhitelist")]
        public virtual string SsoWhitelist { get; set; } 

        [Newtonsoft.Json.JsonPropertyAttribute("useDomainSpecificIssuer")]
        public virtual System.Nullable<bool> UseDomainSpecificIssuer { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    public class SsoSigningKey : Google.Apis.Requests.IDirectResponseSchema
    {
        [Newtonsoft.Json.JsonPropertyAttribute("signingKey")]
        public virtual string SigningKey { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }
}

namespace Google.Apis.admin.Adminsettings.adminsettings_v1
{
    /// <summary>The Adminsettings Service.</summary>
    public class AdminsettingsService : Google.Apis.Services.BaseClientService
    {
        /// <summary>The API version.</summary>
        public const string Version = "adminsettings_v1";

        /// <summary>The discovery version used to generate this service.</summary>
        public static Google.Apis.Discovery.DiscoveryVersion DiscoveryVersionUsed =
            Google.Apis.Discovery.DiscoveryVersion.Version_1_0;

        /// <summary>Constructs a new service.</summary>
        public AdminsettingsService() :
            this(new Google.Apis.Services.BaseClientService.Initializer()) {}

        /// <summary>Constructs a new service.</summary>
        /// <param name="initializer">The service initializer.</param>
        public AdminsettingsService(Google.Apis.Services.BaseClientService.Initializer initializer)
            : base(initializer)
        {
            adminSecondaryEmail = new AdminSecondaryEmailResource(this);
            countryCode = new CountryCodeResource(this);
            creationTime = new CreationTimeResource(this);
            currentUsers = new CurrentUsersResource(this);
            customLogo = new CustomLogoResource(this);
            customerPin = new CustomerPinResource(this);
            defaultLanguage = new DefaultLanguageResource(this);
            emailGateway = new EmailGatewayResource(this);
            emailRouting = new EmailRoutingResource(this);
            maximumUsers = new MaximumUsersResource(this);
            mxVerificationStatus = new MxVerificationStatusResource(this);
            organizationName = new OrganizationNameResource(this);
            productVersion = new ProductVersionResource(this);
            ssoSettings = new SsoSettingsResource(this);
            ssoSigningKey = new SsoSigningKeyResource(this);
        }

        /// <summary>Gets the service supported features.</summary>
        public override System.Collections.Generic.IList<string> Features
        {
            get { return new string[0]; }
        }

        /// <summary>Gets the service name.</summary>
        public override string Name
        {
            get { return "admin"; }
        }

        /// <summary>Gets the service base URI.</summary>
        public override string BaseUri
        {
            get { return "https://apps-apis.google.com/a/feeds/domain/2.0/"; }
        }

        /// <summary>Gets the service base path.</summary>
        public override string BasePath
        {
            get { return "a/feeds/domain/2.0/"; }
        }

        /// <summary>Available OAuth 2.0 scopes for use with the Admin Settings API.</summary>
        public class Scope
        {
            /// <summary>Global scope for access to all domain settings</summary>
            public static string AppsApisGoogleComAFeedsDomain = "https://apps-apis.google.com/a/feeds/domain/";

        }



        private readonly AdminSecondaryEmailResource adminSecondaryEmail;

        /// <summary>Gets the AdminSecondaryEmail resource.</summary>
        public virtual AdminSecondaryEmailResource AdminSecondaryEmail
        {
            get { return adminSecondaryEmail; }
        }

        private readonly CountryCodeResource countryCode;

        /// <summary>Gets the CountryCode resource.</summary>
        public virtual CountryCodeResource CountryCode
        {
            get { return countryCode; }
        }

        private readonly CreationTimeResource creationTime;

        /// <summary>Gets the CreationTime resource.</summary>
        public virtual CreationTimeResource CreationTime
        {
            get { return creationTime; }
        }

        private readonly CurrentUsersResource currentUsers;

        /// <summary>Gets the CurrentUsers resource.</summary>
        public virtual CurrentUsersResource CurrentUsers
        {
            get { return currentUsers; }
        }

        private readonly CustomLogoResource customLogo;

        /// <summary>Gets the CustomLogo resource.</summary>
        public virtual CustomLogoResource CustomLogo
        {
            get { return customLogo; }
        }

        private readonly CustomerPinResource customerPin;

        /// <summary>Gets the CustomerPin resource.</summary>
        public virtual CustomerPinResource CustomerPin
        {
            get { return customerPin; }
        }

        private readonly DefaultLanguageResource defaultLanguage;

        /// <summary>Gets the DefaultLanguage resource.</summary>
        public virtual DefaultLanguageResource DefaultLanguage
        {
            get { return defaultLanguage; }
        }

        private readonly EmailGatewayResource emailGateway;

        /// <summary>Gets the EmailGateway resource.</summary>
        public virtual EmailGatewayResource EmailGateway
        {
            get { return emailGateway; }
        }

        private readonly EmailRoutingResource emailRouting;

        /// <summary>Gets the EmailRouting resource.</summary>
        public virtual EmailRoutingResource EmailRouting
        {
            get { return emailRouting; }
        }

        private readonly MaximumUsersResource maximumUsers;

        /// <summary>Gets the MaximumUsers resource.</summary>
        public virtual MaximumUsersResource MaximumUsers
        {
            get { return maximumUsers; }
        }

        private readonly MxVerificationStatusResource mxVerificationStatus;

        /// <summary>Gets the MxVerificationStatus resource.</summary>
        public virtual MxVerificationStatusResource MxVerificationStatus
        {
            get { return mxVerificationStatus; }
        }

        private readonly OrganizationNameResource organizationName;

        /// <summary>Gets the OrganizationName resource.</summary>
        public virtual OrganizationNameResource OrganizationName
        {
            get { return organizationName; }
        }

        private readonly ProductVersionResource productVersion;

        /// <summary>Gets the ProductVersion resource.</summary>
        public virtual ProductVersionResource ProductVersion
        {
            get { return productVersion; }
        }

        private readonly SsoSettingsResource ssoSettings;

        /// <summary>Gets the SsoSettings resource.</summary>
        public virtual SsoSettingsResource SsoSettings
        {
            get { return ssoSettings; }
        }

        private readonly SsoSigningKeyResource ssoSigningKey;

        /// <summary>Gets the SsoSigningKey resource.</summary>
        public virtual SsoSigningKeyResource SsoSigningKey
        {
            get { return ssoSigningKey; }
        }
    }

    ///<summary>A base abstract class for Adminsettings requests.</summary>
    public abstract class AdminsettingsBaseServiceRequest<TResponse> : Google.Apis.Requests.ClientServiceRequest<TResponse>
    {
        ///<summary>Constructs a new AdminsettingsBaseServiceRequest instance.</summary>
        protected AdminsettingsBaseServiceRequest(Google.Apis.Services.IClientService service)
            : base(service)
        {
        }

        /// <summary>Data format for the response.</summary>
        /// [default: atom+xml]
        [Google.Apis.Util.RequestParameterAttribute("alt", Google.Apis.Util.RequestParameterType.Query)]
        public virtual System.Nullable<AltEnum> Alt { get; set; }

        /// <summary>Data format for the response.</summary>
        public enum AltEnum
        {
            /// <summary>Responses with Content-Type of application/xml</summary>
            [Google.Apis.Util.StringValueAttribute("atom+xml")]
            AtomXml,
        }

        /// <summary>Selector specifying which fields to include in a partial response.</summary>
        [Google.Apis.Util.RequestParameterAttribute("fields", Google.Apis.Util.RequestParameterType.Query)]
        public virtual string Fields { get; set; }

        /// <summary>API key. Your API key identifies your project and provides you with API access, quota, and reports.
        /// Required unless you provide an OAuth 2.0 token.</summary>
        [Google.Apis.Util.RequestParameterAttribute("key", Google.Apis.Util.RequestParameterType.Query)]
        public virtual string Key { get; set; }

        /// <summary>Oauth 2.0 token for the current user.</summary>
        [Google.Apis.Util.RequestParameterAttribute("oauth_token", Google.Apis.Util.RequestParameterType.Query)]
        public virtual string OauthToken { get; set; }

        /// <summary>Returns response with indentations and line breaks.</summary>
        /// [default: true]
        [Google.Apis.Util.RequestParameterAttribute("prettyPrint", Google.Apis.Util.RequestParameterType.Query)]
        public virtual System.Nullable<bool> PrettyPrint { get; set; }

        /// <summary>Available to use for quota purposes for server-side applications. Can be any arbitrary string
        /// assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.</summary>
        [Google.Apis.Util.RequestParameterAttribute("quotaUser", Google.Apis.Util.RequestParameterType.Query)]
        public virtual string QuotaUser { get; set; }

        /// <summary>IP address of the site where the request originates. Use this if you want to enforce per-user
        /// limits.</summary>
        [Google.Apis.Util.RequestParameterAttribute("userIp", Google.Apis.Util.RequestParameterType.Query)]
        public virtual string UserIp { get; set; }

        /// <summary>Initializes Adminsettings parameter list.</summary>
        protected override void InitParameters()
        {
            base.InitParameters();

            RequestParameters.Add(
                "alt", new Google.Apis.Discovery.Parameter
                {
                    Name = "alt",
                    IsRequired = false,
                    ParameterType = "query",
                    DefaultValue = "atom+xml",
                    Pattern = null,
                });
            RequestParameters.Add(
                "fields", new Google.Apis.Discovery.Parameter
                {
                    Name = "fields",
                    IsRequired = false,
                    ParameterType = "query",
                    DefaultValue = null,
                    Pattern = null,
                });
            RequestParameters.Add(
                "key", new Google.Apis.Discovery.Parameter
                {
                    Name = "key",
                    IsRequired = false,
                    ParameterType = "query",
                    DefaultValue = null,
                    Pattern = null,
                });
            RequestParameters.Add(
                "oauth_token", new Google.Apis.Discovery.Parameter
                {
                    Name = "oauth_token",
                    IsRequired = false,
                    ParameterType = "query",
                    DefaultValue = null,
                    Pattern = null,
                });
            RequestParameters.Add(
                "prettyPrint", new Google.Apis.Discovery.Parameter
                {
                    Name = "prettyPrint",
                    IsRequired = false,
                    ParameterType = "query",
                    DefaultValue = "true",
                    Pattern = null,
                });
            RequestParameters.Add(
                "quotaUser", new Google.Apis.Discovery.Parameter
                {
                    Name = "quotaUser",
                    IsRequired = false,
                    ParameterType = "query",
                    DefaultValue = null,
                    Pattern = null,
                });
            RequestParameters.Add(
                "userIp", new Google.Apis.Discovery.Parameter
                {
                    Name = "userIp",
                    IsRequired = false,
                    ParameterType = "query",
                    DefaultValue = null,
                    Pattern = null,
                });
        }
    }

    /// <summary>The "adminSecondaryEmail" collection of methods.</summary>
    public class AdminSecondaryEmailResource
    {
        private const string Resource = "adminSecondaryEmail";

        /// <summary>The service which this resource belongs to.</summary>
        private readonly Google.Apis.Services.IClientService service;

        /// <summary>Constructs a new resource.</summary>
        public AdminSecondaryEmailResource(Google.Apis.Services.IClientService service)
        {
            this.service = service;

        }



        /// <param name="domain"></param>
        public virtual GetRequest Get(string domain)
        {
            return new GetRequest(service, domain);
        }


        public class GetRequest : AdminsettingsBaseServiceRequest<Google.Apis.admin.Adminsettings.adminsettings_v1.Data.AdminSecondaryEmail>
        {
            /// <summary>Constructs a new Get request.</summary>
            public GetRequest(Google.Apis.Services.IClientService service, string domain)
                : base(service)
            {
                Domain = domain;
                InitParameters();
            }



            [Google.Apis.Util.RequestParameterAttribute("domain", Google.Apis.Util.RequestParameterType.Path)]
            public virtual string Domain { get; private set; }


            ///<summary>Gets the method name.</summary>
            public override string MethodName
            {
                get { return "get"; }
            }

            ///<summary>Gets the HTTP method.</summary>
            public override string HttpMethod
            {
                get { return "GET"; }
            }

            ///<summary>Gets the REST path.</summary>
            public override string RestPath
            {
                get { return "{domain}/accountInformation/adminSecondaryEmail"; }
            }

            /// <summary>Initializes Get parameter list.</summary>
            protected override void InitParameters()
            {
                base.InitParameters();

                RequestParameters.Add(
                    "domain", new Google.Apis.Discovery.Parameter
                    {
                        Name = "domain",
                        IsRequired = true,
                        ParameterType = "path",
                        DefaultValue = null,
                        Pattern = null,
                    });
            }

        }


        /// <param name="body">The body of the request.</param>
        /// <param name="domain"></param>
        public virtual UpdateRequest Update(Google.Apis.admin.Adminsettings.adminsettings_v1.Data.AdminSecondaryEmail body, string domain)
        {
            return new UpdateRequest(service, body, domain);
        }


        public class UpdateRequest : AdminsettingsBaseServiceRequest<Google.Apis.admin.Adminsettings.adminsettings_v1.Data.AdminSecondaryEmail>
        {
            /// <summary>Constructs a new Update request.</summary>
            public UpdateRequest(Google.Apis.Services.IClientService service, Google.Apis.admin.Adminsettings.adminsettings_v1.Data.AdminSecondaryEmail body, string domain)
                : base(service)
            {
                Domain = domain;
                Body = body;
                InitParameters();
            }



            [Google.Apis.Util.RequestParameterAttribute("domain", Google.Apis.Util.RequestParameterType.Path)]
            public virtual string Domain { get; private set; }


            /// <summary>Gets or sets the body of this request.</summary>
            Google.Apis.admin.Adminsettings.adminsettings_v1.Data.AdminSecondaryEmail Body { get; set; }

            ///<summary>Returns the body of the request.</summary>
            protected override object GetBody() { return Body; }

            ///<summary>Gets the method name.</summary>
            public override string MethodName
            {
                get { return "update"; }
            }

            ///<summary>Gets the HTTP method.</summary>
            public override string HttpMethod
            {
                get { return "PUT"; }
            }

            ///<summary>Gets the REST path.</summary>
            public override string RestPath
            {
                get { return "{domain}/accountInformation/adminSecondaryEmail"; }
            }

            /// <summary>Initializes Update parameter list.</summary>
            protected override void InitParameters()
            {
                base.InitParameters();

                RequestParameters.Add(
                    "domain", new Google.Apis.Discovery.Parameter
                    {
                        Name = "domain",
                        IsRequired = true,
                        ParameterType = "path",
                        DefaultValue = null,
                        Pattern = null,
                    });
            }

        }
    }

    /// <summary>The "countryCode" collection of methods.</summary>
    public class CountryCodeResource
    {
        private const string Resource = "countryCode";

        /// <summary>The service which this resource belongs to.</summary>
        private readonly Google.Apis.Services.IClientService service;

        /// <summary>Constructs a new resource.</summary>
        public CountryCodeResource(Google.Apis.Services.IClientService service)
        {
            this.service = service;

        }



        /// <param name="domain"></param>
        public virtual GetRequest Get(string domain)
        {
            return new GetRequest(service, domain);
        }


        public class GetRequest : AdminsettingsBaseServiceRequest<Google.Apis.admin.Adminsettings.adminsettings_v1.Data.CountryCode>
        {
            /// <summary>Constructs a new Get request.</summary>
            public GetRequest(Google.Apis.Services.IClientService service, string domain)
                : base(service)
            {
                Domain = domain;
                InitParameters();
            }



            [Google.Apis.Util.RequestParameterAttribute("domain", Google.Apis.Util.RequestParameterType.Path)]
            public virtual string Domain { get; private set; }


            ///<summary>Gets the method name.</summary>
            public override string MethodName
            {
                get { return "get"; }
            }

            ///<summary>Gets the HTTP method.</summary>
            public override string HttpMethod
            {
                get { return "GET"; }
            }

            ///<summary>Gets the REST path.</summary>
            public override string RestPath
            {
                get { return "{domain}/accountInformation/countryCode"; }
            }

            /// <summary>Initializes Get parameter list.</summary>
            protected override void InitParameters()
            {
                base.InitParameters();

                RequestParameters.Add(
                    "domain", new Google.Apis.Discovery.Parameter
                    {
                        Name = "domain",
                        IsRequired = true,
                        ParameterType = "path",
                        DefaultValue = null,
                        Pattern = null,
                    });
            }

        }
    }

    /// <summary>The "creationTime" collection of methods.</summary>
    public class CreationTimeResource
    {
        private const string Resource = "creationTime";

        /// <summary>The service which this resource belongs to.</summary>
        private readonly Google.Apis.Services.IClientService service;

        /// <summary>Constructs a new resource.</summary>
        public CreationTimeResource(Google.Apis.Services.IClientService service)
        {
            this.service = service;

        }



        /// <param name="domain"></param>
        public virtual GetRequest Get(string domain)
        {
            return new GetRequest(service, domain);
        }


        public class GetRequest : AdminsettingsBaseServiceRequest<Google.Apis.admin.Adminsettings.adminsettings_v1.Data.CreationTime>
        {
            /// <summary>Constructs a new Get request.</summary>
            public GetRequest(Google.Apis.Services.IClientService service, string domain)
                : base(service)
            {
                Domain = domain;
                InitParameters();
            }



            [Google.Apis.Util.RequestParameterAttribute("domain", Google.Apis.Util.RequestParameterType.Path)]
            public virtual string Domain { get; private set; }


            ///<summary>Gets the method name.</summary>
            public override string MethodName
            {
                get { return "get"; }
            }

            ///<summary>Gets the HTTP method.</summary>
            public override string HttpMethod
            {
                get { return "GET"; }
            }

            ///<summary>Gets the REST path.</summary>
            public override string RestPath
            {
                get { return "{domain}/accountInformation/creationTime"; }
            }

            /// <summary>Initializes Get parameter list.</summary>
            protected override void InitParameters()
            {
                base.InitParameters();

                RequestParameters.Add(
                    "domain", new Google.Apis.Discovery.Parameter
                    {
                        Name = "domain",
                        IsRequired = true,
                        ParameterType = "path",
                        DefaultValue = null,
                        Pattern = null,
                    });
            }

        }
    }

    /// <summary>The "currentUsers" collection of methods.</summary>
    public class CurrentUsersResource
    {
        private const string Resource = "currentUsers";

        /// <summary>The service which this resource belongs to.</summary>
        private readonly Google.Apis.Services.IClientService service;

        /// <summary>Constructs a new resource.</summary>
        public CurrentUsersResource(Google.Apis.Services.IClientService service)
        {
            this.service = service;

        }



        /// <param name="domain"></param>
        public virtual GetRequest Get(string domain)
        {
            return new GetRequest(service, domain);
        }


        public class GetRequest : AdminsettingsBaseServiceRequest<Google.Apis.admin.Adminsettings.adminsettings_v1.Data.CurrentNumberOfUsers>
        {
            /// <summary>Constructs a new Get request.</summary>
            public GetRequest(Google.Apis.Services.IClientService service, string domain)
                : base(service)
            {
                Domain = domain;
                InitParameters();
            }



            [Google.Apis.Util.RequestParameterAttribute("domain", Google.Apis.Util.RequestParameterType.Path)]
            public virtual string Domain { get; private set; }


            ///<summary>Gets the method name.</summary>
            public override string MethodName
            {
                get { return "get"; }
            }

            ///<summary>Gets the HTTP method.</summary>
            public override string HttpMethod
            {
                get { return "GET"; }
            }

            ///<summary>Gets the REST path.</summary>
            public override string RestPath
            {
                get { return "{domain}/general/currentNumberOfUsers"; }
            }

            /// <summary>Initializes Get parameter list.</summary>
            protected override void InitParameters()
            {
                base.InitParameters();

                RequestParameters.Add(
                    "domain", new Google.Apis.Discovery.Parameter
                    {
                        Name = "domain",
                        IsRequired = true,
                        ParameterType = "path",
                        DefaultValue = null,
                        Pattern = null,
                    });
            }

        }
    }

    /// <summary>The "customLogo" collection of methods.</summary>
    public class CustomLogoResource
    {
        private const string Resource = "customLogo";

        /// <summary>The service which this resource belongs to.</summary>
        private readonly Google.Apis.Services.IClientService service;

        /// <summary>Constructs a new resource.</summary>
        public CustomLogoResource(Google.Apis.Services.IClientService service)
        {
            this.service = service;

        }



        /// <param name="body">The body of the request.</param>
        /// <param name="domain"></param>
        public virtual UpdateRequest Update(Google.Apis.admin.Adminsettings.adminsettings_v1.Data.CustomLogo body, string domain)
        {
            return new UpdateRequest(service, body, domain);
        }


        public class UpdateRequest : AdminsettingsBaseServiceRequest<Google.Apis.admin.Adminsettings.adminsettings_v1.Data.CustomLogo>
        {
            /// <summary>Constructs a new Update request.</summary>
            public UpdateRequest(Google.Apis.Services.IClientService service, Google.Apis.admin.Adminsettings.adminsettings_v1.Data.CustomLogo body, string domain)
                : base(service)
            {
                Domain = domain;
                Body = body;
                InitParameters();
            }



            [Google.Apis.Util.RequestParameterAttribute("domain", Google.Apis.Util.RequestParameterType.Path)]
            public virtual string Domain { get; private set; }


            /// <summary>Gets or sets the body of this request.</summary>
            Google.Apis.admin.Adminsettings.adminsettings_v1.Data.CustomLogo Body { get; set; }

            ///<summary>Returns the body of the request.</summary>
            protected override object GetBody() { return Body; }

            ///<summary>Gets the method name.</summary>
            public override string MethodName
            {
                get { return "update"; }
            }

            ///<summary>Gets the HTTP method.</summary>
            public override string HttpMethod
            {
                get { return "PUT"; }
            }

            ///<summary>Gets the REST path.</summary>
            public override string RestPath
            {
                get { return "{domain}/appearance/customLogo"; }
            }

            /// <summary>Initializes Update parameter list.</summary>
            protected override void InitParameters()
            {
                base.InitParameters();

                RequestParameters.Add(
                    "domain", new Google.Apis.Discovery.Parameter
                    {
                        Name = "domain",
                        IsRequired = true,
                        ParameterType = "path",
                        DefaultValue = null,
                        Pattern = null,
                    });
            }

        }
    }

    /// <summary>The "customerPin" collection of methods.</summary>
    public class CustomerPinResource
    {
        private const string Resource = "customerPin";

        /// <summary>The service which this resource belongs to.</summary>
        private readonly Google.Apis.Services.IClientService service;

        /// <summary>Constructs a new resource.</summary>
        public CustomerPinResource(Google.Apis.Services.IClientService service)
        {
            this.service = service;

        }



        /// <param name="domain"></param>
        public virtual GetRequest Get(string domain)
        {
            return new GetRequest(service, domain);
        }


        public class GetRequest : AdminsettingsBaseServiceRequest<Google.Apis.admin.Adminsettings.adminsettings_v1.Data.CustomerPin>
        {
            /// <summary>Constructs a new Get request.</summary>
            public GetRequest(Google.Apis.Services.IClientService service, string domain)
                : base(service)
            {
                Domain = domain;
                InitParameters();
            }



            [Google.Apis.Util.RequestParameterAttribute("domain", Google.Apis.Util.RequestParameterType.Path)]
            public virtual string Domain { get; private set; }


            ///<summary>Gets the method name.</summary>
            public override string MethodName
            {
                get { return "get"; }
            }

            ///<summary>Gets the HTTP method.</summary>
            public override string HttpMethod
            {
                get { return "GET"; }
            }

            ///<summary>Gets the REST path.</summary>
            public override string RestPath
            {
                get { return "{domain}/accountInformation/customerPIN"; }
            }

            /// <summary>Initializes Get parameter list.</summary>
            protected override void InitParameters()
            {
                base.InitParameters();

                RequestParameters.Add(
                    "domain", new Google.Apis.Discovery.Parameter
                    {
                        Name = "domain",
                        IsRequired = true,
                        ParameterType = "path",
                        DefaultValue = null,
                        Pattern = null,
                    });
            }

        }
    }

    /// <summary>The "defaultLanguage" collection of methods.</summary>
    public class DefaultLanguageResource
    {
        private const string Resource = "defaultLanguage";

        /// <summary>The service which this resource belongs to.</summary>
        private readonly Google.Apis.Services.IClientService service;

        /// <summary>Constructs a new resource.</summary>
        public DefaultLanguageResource(Google.Apis.Services.IClientService service)
        {
            this.service = service;

        }



        /// <param name="domain"></param>
        public virtual GetRequest Get(string domain)
        {
            return new GetRequest(service, domain);
        }


        public class GetRequest : AdminsettingsBaseServiceRequest<Google.Apis.admin.Adminsettings.adminsettings_v1.Data.DefaultLanguage>
        {
            /// <summary>Constructs a new Get request.</summary>
            public GetRequest(Google.Apis.Services.IClientService service, string domain)
                : base(service)
            {
                Domain = domain;
                InitParameters();
            }



            [Google.Apis.Util.RequestParameterAttribute("domain", Google.Apis.Util.RequestParameterType.Path)]
            public virtual string Domain { get; private set; }


            ///<summary>Gets the method name.</summary>
            public override string MethodName
            {
                get { return "get"; }
            }

            ///<summary>Gets the HTTP method.</summary>
            public override string HttpMethod
            {
                get { return "GET"; }
            }

            ///<summary>Gets the REST path.</summary>
            public override string RestPath
            {
                get { return "{domain}/general/defaultLanguage"; }
            }

            /// <summary>Initializes Get parameter list.</summary>
            protected override void InitParameters()
            {
                base.InitParameters();

                RequestParameters.Add(
                    "domain", new Google.Apis.Discovery.Parameter
                    {
                        Name = "domain",
                        IsRequired = true,
                        ParameterType = "path",
                        DefaultValue = null,
                        Pattern = null,
                    });
            }

        }


        /// <param name="body">The body of the request.</param>
        /// <param name="domain"></param>
        public virtual UpdateRequest Update(Google.Apis.admin.Adminsettings.adminsettings_v1.Data.DefaultLanguage body, string domain)
        {
            return new UpdateRequest(service, body, domain);
        }


        public class UpdateRequest : AdminsettingsBaseServiceRequest<Google.Apis.admin.Adminsettings.adminsettings_v1.Data.DefaultLanguage>
        {
            /// <summary>Constructs a new Update request.</summary>
            public UpdateRequest(Google.Apis.Services.IClientService service, Google.Apis.admin.Adminsettings.adminsettings_v1.Data.DefaultLanguage body, string domain)
                : base(service)
            {
                Domain = domain;
                Body = body;
                InitParameters();
            }



            [Google.Apis.Util.RequestParameterAttribute("domain", Google.Apis.Util.RequestParameterType.Path)]
            public virtual string Domain { get; private set; }


            /// <summary>Gets or sets the body of this request.</summary>
            Google.Apis.admin.Adminsettings.adminsettings_v1.Data.DefaultLanguage Body { get; set; }

            ///<summary>Returns the body of the request.</summary>
            protected override object GetBody() { return Body; }

            ///<summary>Gets the method name.</summary>
            public override string MethodName
            {
                get { return "update"; }
            }

            ///<summary>Gets the HTTP method.</summary>
            public override string HttpMethod
            {
                get { return "PUT"; }
            }

            ///<summary>Gets the REST path.</summary>
            public override string RestPath
            {
                get { return "{domain}/general/defaultLanguage"; }
            }

            /// <summary>Initializes Update parameter list.</summary>
            protected override void InitParameters()
            {
                base.InitParameters();

                RequestParameters.Add(
                    "domain", new Google.Apis.Discovery.Parameter
                    {
                        Name = "domain",
                        IsRequired = true,
                        ParameterType = "path",
                        DefaultValue = null,
                        Pattern = null,
                    });
            }

        }
    }

    /// <summary>The "emailGateway" collection of methods.</summary>
    public class EmailGatewayResource
    {
        private const string Resource = "emailGateway";

        /// <summary>The service which this resource belongs to.</summary>
        private readonly Google.Apis.Services.IClientService service;

        /// <summary>Constructs a new resource.</summary>
        public EmailGatewayResource(Google.Apis.Services.IClientService service)
        {
            this.service = service;

        }



        /// <param name="domain"></param>
        public virtual GetRequest Get(string domain)
        {
            return new GetRequest(service, domain);
        }


        public class GetRequest : AdminsettingsBaseServiceRequest<Google.Apis.admin.Adminsettings.adminsettings_v1.Data.Gateway>
        {
            /// <summary>Constructs a new Get request.</summary>
            public GetRequest(Google.Apis.Services.IClientService service, string domain)
                : base(service)
            {
                Domain = domain;
                InitParameters();
            }



            [Google.Apis.Util.RequestParameterAttribute("domain", Google.Apis.Util.RequestParameterType.Path)]
            public virtual string Domain { get; private set; }


            ///<summary>Gets the method name.</summary>
            public override string MethodName
            {
                get { return "get"; }
            }

            ///<summary>Gets the HTTP method.</summary>
            public override string HttpMethod
            {
                get { return "GET"; }
            }

            ///<summary>Gets the REST path.</summary>
            public override string RestPath
            {
                get { return "{domain}/email/gateway"; }
            }

            /// <summary>Initializes Get parameter list.</summary>
            protected override void InitParameters()
            {
                base.InitParameters();

                RequestParameters.Add(
                    "domain", new Google.Apis.Discovery.Parameter
                    {
                        Name = "domain",
                        IsRequired = true,
                        ParameterType = "path",
                        DefaultValue = null,
                        Pattern = null,
                    });
            }

        }


        /// <param name="body">The body of the request.</param>
        /// <param name="domain"></param>
        public virtual UpdateRequest Update(Google.Apis.admin.Adminsettings.adminsettings_v1.Data.Gateway body, string domain)
        {
            return new UpdateRequest(service, body, domain);
        }


        public class UpdateRequest : AdminsettingsBaseServiceRequest<Google.Apis.admin.Adminsettings.adminsettings_v1.Data.Gateway>
        {
            /// <summary>Constructs a new Update request.</summary>
            public UpdateRequest(Google.Apis.Services.IClientService service, Google.Apis.admin.Adminsettings.adminsettings_v1.Data.Gateway body, string domain)
                : base(service)
            {
                Domain = domain;
                Body = body;
                InitParameters();
            }



            [Google.Apis.Util.RequestParameterAttribute("domain", Google.Apis.Util.RequestParameterType.Path)]
            public virtual string Domain { get; private set; }


            /// <summary>Gets or sets the body of this request.</summary>
            Google.Apis.admin.Adminsettings.adminsettings_v1.Data.Gateway Body { get; set; }

            ///<summary>Returns the body of the request.</summary>
            protected override object GetBody() { return Body; }

            ///<summary>Gets the method name.</summary>
            public override string MethodName
            {
                get { return "update"; }
            }

            ///<summary>Gets the HTTP method.</summary>
            public override string HttpMethod
            {
                get { return "PUT"; }
            }

            ///<summary>Gets the REST path.</summary>
            public override string RestPath
            {
                get { return "{domain}/email/gateway"; }
            }

            /// <summary>Initializes Update parameter list.</summary>
            protected override void InitParameters()
            {
                base.InitParameters();

                RequestParameters.Add(
                    "domain", new Google.Apis.Discovery.Parameter
                    {
                        Name = "domain",
                        IsRequired = true,
                        ParameterType = "path",
                        DefaultValue = null,
                        Pattern = null,
                    });
            }

        }
    }

    /// <summary>The "emailRouting" collection of methods.</summary>
    public class EmailRoutingResource
    {
        private const string Resource = "emailRouting";

        /// <summary>The service which this resource belongs to.</summary>
        private readonly Google.Apis.Services.IClientService service;

        /// <summary>Constructs a new resource.</summary>
        public EmailRoutingResource(Google.Apis.Services.IClientService service)
        {
            this.service = service;

        }



        /// <param name="body">The body of the request.</param>
        /// <param name="domain"></param>
        public virtual UpdateRequest Update(Google.Apis.admin.Adminsettings.adminsettings_v1.Data.Routing body, string domain)
        {
            return new UpdateRequest(service, body, domain);
        }


        public class UpdateRequest : AdminsettingsBaseServiceRequest<Google.Apis.admin.Adminsettings.adminsettings_v1.Data.Routing>
        {
            /// <summary>Constructs a new Update request.</summary>
            public UpdateRequest(Google.Apis.Services.IClientService service, Google.Apis.admin.Adminsettings.adminsettings_v1.Data.Routing body, string domain)
                : base(service)
            {
                Domain = domain;
                Body = body;
                InitParameters();
            }



            [Google.Apis.Util.RequestParameterAttribute("domain", Google.Apis.Util.RequestParameterType.Path)]
            public virtual string Domain { get; private set; }


            /// <summary>Gets or sets the body of this request.</summary>
            Google.Apis.admin.Adminsettings.adminsettings_v1.Data.Routing Body { get; set; }

            ///<summary>Returns the body of the request.</summary>
            protected override object GetBody() { return Body; }

            ///<summary>Gets the method name.</summary>
            public override string MethodName
            {
                get { return "update"; }
            }

            ///<summary>Gets the HTTP method.</summary>
            public override string HttpMethod
            {
                get { return "POST"; }
            }

            ///<summary>Gets the REST path.</summary>
            public override string RestPath
            {
                get { return "{domain}/emailrouting"; }
            }

            /// <summary>Initializes Update parameter list.</summary>
            protected override void InitParameters()
            {
                base.InitParameters();

                RequestParameters.Add(
                    "domain", new Google.Apis.Discovery.Parameter
                    {
                        Name = "domain",
                        IsRequired = true,
                        ParameterType = "path",
                        DefaultValue = null,
                        Pattern = null,
                    });
            }

        }
    }

    /// <summary>The "maximumUsers" collection of methods.</summary>
    public class MaximumUsersResource
    {
        private const string Resource = "maximumUsers";

        /// <summary>The service which this resource belongs to.</summary>
        private readonly Google.Apis.Services.IClientService service;

        /// <summary>Constructs a new resource.</summary>
        public MaximumUsersResource(Google.Apis.Services.IClientService service)
        {
            this.service = service;

        }



        /// <param name="domain"></param>
        public virtual GetRequest Get(string domain)
        {
            return new GetRequest(service, domain);
        }


        public class GetRequest : AdminsettingsBaseServiceRequest<Google.Apis.admin.Adminsettings.adminsettings_v1.Data.MaximumNumberOfUsers>
        {
            /// <summary>Constructs a new Get request.</summary>
            public GetRequest(Google.Apis.Services.IClientService service, string domain)
                : base(service)
            {
                Domain = domain;
                InitParameters();
            }



            [Google.Apis.Util.RequestParameterAttribute("domain", Google.Apis.Util.RequestParameterType.Path)]
            public virtual string Domain { get; private set; }


            ///<summary>Gets the method name.</summary>
            public override string MethodName
            {
                get { return "get"; }
            }

            ///<summary>Gets the HTTP method.</summary>
            public override string HttpMethod
            {
                get { return "GET"; }
            }

            ///<summary>Gets the REST path.</summary>
            public override string RestPath
            {
                get { return "{domain}/general/maximumNumberOfUsers"; }
            }

            /// <summary>Initializes Get parameter list.</summary>
            protected override void InitParameters()
            {
                base.InitParameters();

                RequestParameters.Add(
                    "domain", new Google.Apis.Discovery.Parameter
                    {
                        Name = "domain",
                        IsRequired = true,
                        ParameterType = "path",
                        DefaultValue = null,
                        Pattern = null,
                    });
            }

        }
    }

    /// <summary>The "mxVerificationStatus" collection of methods.</summary>
    public class MxVerificationStatusResource
    {
        private const string Resource = "mxVerificationStatus";

        /// <summary>The service which this resource belongs to.</summary>
        private readonly Google.Apis.Services.IClientService service;

        /// <summary>Constructs a new resource.</summary>
        public MxVerificationStatusResource(Google.Apis.Services.IClientService service)
        {
            this.service = service;

        }



        /// <param name="domain"></param>
        public virtual GetRequest Get(string domain)
        {
            return new GetRequest(service, domain);
        }


        public class GetRequest : AdminsettingsBaseServiceRequest<Google.Apis.admin.Adminsettings.adminsettings_v1.Data.MXVerificationStatus>
        {
            /// <summary>Constructs a new Get request.</summary>
            public GetRequest(Google.Apis.Services.IClientService service, string domain)
                : base(service)
            {
                Domain = domain;
                InitParameters();
            }



            [Google.Apis.Util.RequestParameterAttribute("domain", Google.Apis.Util.RequestParameterType.Path)]
            public virtual string Domain { get; private set; }


            ///<summary>Gets the method name.</summary>
            public override string MethodName
            {
                get { return "get"; }
            }

            ///<summary>Gets the HTTP method.</summary>
            public override string HttpMethod
            {
                get { return "GET"; }
            }

            ///<summary>Gets the REST path.</summary>
            public override string RestPath
            {
                get { return "{domain}/verification/mx"; }
            }

            /// <summary>Initializes Get parameter list.</summary>
            protected override void InitParameters()
            {
                base.InitParameters();

                RequestParameters.Add(
                    "domain", new Google.Apis.Discovery.Parameter
                    {
                        Name = "domain",
                        IsRequired = true,
                        ParameterType = "path",
                        DefaultValue = null,
                        Pattern = null,
                    });
            }

        }


        /// <param name="body">The body of the request.</param>
        /// <param name="domain"></param>
        public virtual UpdateRequest Update(Google.Apis.admin.Adminsettings.adminsettings_v1.Data.MXVerificationStatus body, string domain)
        {
            return new UpdateRequest(service, body, domain);
        }


        public class UpdateRequest : AdminsettingsBaseServiceRequest<Google.Apis.admin.Adminsettings.adminsettings_v1.Data.MXVerificationStatus>
        {
            /// <summary>Constructs a new Update request.</summary>
            public UpdateRequest(Google.Apis.Services.IClientService service, Google.Apis.admin.Adminsettings.adminsettings_v1.Data.MXVerificationStatus body, string domain)
                : base(service)
            {
                Domain = domain;
                Body = body;
                InitParameters();
            }



            [Google.Apis.Util.RequestParameterAttribute("domain", Google.Apis.Util.RequestParameterType.Path)]
            public virtual string Domain { get; private set; }


            /// <summary>Gets or sets the body of this request.</summary>
            Google.Apis.admin.Adminsettings.adminsettings_v1.Data.MXVerificationStatus Body { get; set; }

            ///<summary>Returns the body of the request.</summary>
            protected override object GetBody() { return Body; }

            ///<summary>Gets the method name.</summary>
            public override string MethodName
            {
                get { return "update"; }
            }

            ///<summary>Gets the HTTP method.</summary>
            public override string HttpMethod
            {
                get { return "PUT"; }
            }

            ///<summary>Gets the REST path.</summary>
            public override string RestPath
            {
                get { return "{domain}/verification/mx"; }
            }

            /// <summary>Initializes Update parameter list.</summary>
            protected override void InitParameters()
            {
                base.InitParameters();

                RequestParameters.Add(
                    "domain", new Google.Apis.Discovery.Parameter
                    {
                        Name = "domain",
                        IsRequired = true,
                        ParameterType = "path",
                        DefaultValue = null,
                        Pattern = null,
                    });
            }

        }
    }

    /// <summary>The "organizationName" collection of methods.</summary>
    public class OrganizationNameResource
    {
        private const string Resource = "organizationName";

        /// <summary>The service which this resource belongs to.</summary>
        private readonly Google.Apis.Services.IClientService service;

        /// <summary>Constructs a new resource.</summary>
        public OrganizationNameResource(Google.Apis.Services.IClientService service)
        {
            this.service = service;

        }



        /// <param name="domain"></param>
        public virtual GetRequest Get(string domain)
        {
            return new GetRequest(service, domain);
        }


        public class GetRequest : AdminsettingsBaseServiceRequest<Google.Apis.admin.Adminsettings.adminsettings_v1.Data.OrganizationName>
        {
            /// <summary>Constructs a new Get request.</summary>
            public GetRequest(Google.Apis.Services.IClientService service, string domain)
                : base(service)
            {
                Domain = domain;
                InitParameters();
            }



            [Google.Apis.Util.RequestParameterAttribute("domain", Google.Apis.Util.RequestParameterType.Path)]
            public virtual string Domain { get; private set; }


            ///<summary>Gets the method name.</summary>
            public override string MethodName
            {
                get { return "get"; }
            }

            ///<summary>Gets the HTTP method.</summary>
            public override string HttpMethod
            {
                get { return "GET"; }
            }

            ///<summary>Gets the REST path.</summary>
            public override string RestPath
            {
                get { return "{domain}/general/organizationName"; }
            }

            /// <summary>Initializes Get parameter list.</summary>
            protected override void InitParameters()
            {
                base.InitParameters();

                RequestParameters.Add(
                    "domain", new Google.Apis.Discovery.Parameter
                    {
                        Name = "domain",
                        IsRequired = true,
                        ParameterType = "path",
                        DefaultValue = null,
                        Pattern = null,
                    });
            }

        }


        /// <param name="body">The body of the request.</param>
        /// <param name="domain"></param>
        public virtual UpdateRequest Update(Google.Apis.admin.Adminsettings.adminsettings_v1.Data.OrganizationName body, string domain)
        {
            return new UpdateRequest(service, body, domain);
        }


        public class UpdateRequest : AdminsettingsBaseServiceRequest<Google.Apis.admin.Adminsettings.adminsettings_v1.Data.OrganizationName>
        {
            /// <summary>Constructs a new Update request.</summary>
            public UpdateRequest(Google.Apis.Services.IClientService service, Google.Apis.admin.Adminsettings.adminsettings_v1.Data.OrganizationName body, string domain)
                : base(service)
            {
                Domain = domain;
                Body = body;
                InitParameters();
            }



            [Google.Apis.Util.RequestParameterAttribute("domain", Google.Apis.Util.RequestParameterType.Path)]
            public virtual string Domain { get; private set; }


            /// <summary>Gets or sets the body of this request.</summary>
            Google.Apis.admin.Adminsettings.adminsettings_v1.Data.OrganizationName Body { get; set; }

            ///<summary>Returns the body of the request.</summary>
            protected override object GetBody() { return Body; }

            ///<summary>Gets the method name.</summary>
            public override string MethodName
            {
                get { return "update"; }
            }

            ///<summary>Gets the HTTP method.</summary>
            public override string HttpMethod
            {
                get { return "PUT"; }
            }

            ///<summary>Gets the REST path.</summary>
            public override string RestPath
            {
                get { return "{domain}/general/organizationName"; }
            }

            /// <summary>Initializes Update parameter list.</summary>
            protected override void InitParameters()
            {
                base.InitParameters();

                RequestParameters.Add(
                    "domain", new Google.Apis.Discovery.Parameter
                    {
                        Name = "domain",
                        IsRequired = true,
                        ParameterType = "path",
                        DefaultValue = null,
                        Pattern = null,
                    });
            }

        }
    }

    /// <summary>The "productVersion" collection of methods.</summary>
    public class ProductVersionResource
    {
        private const string Resource = "productVersion";

        /// <summary>The service which this resource belongs to.</summary>
        private readonly Google.Apis.Services.IClientService service;

        /// <summary>Constructs a new resource.</summary>
        public ProductVersionResource(Google.Apis.Services.IClientService service)
        {
            this.service = service;

        }



        /// <param name="domain"></param>
        public virtual GetRequest Get(string domain)
        {
            return new GetRequest(service, domain);
        }


        public class GetRequest : AdminsettingsBaseServiceRequest<Google.Apis.admin.Adminsettings.adminsettings_v1.Data.Edition>
        {
            /// <summary>Constructs a new Get request.</summary>
            public GetRequest(Google.Apis.Services.IClientService service, string domain)
                : base(service)
            {
                Domain = domain;
                InitParameters();
            }



            [Google.Apis.Util.RequestParameterAttribute("domain", Google.Apis.Util.RequestParameterType.Path)]
            public virtual string Domain { get; private set; }


            ///<summary>Gets the method name.</summary>
            public override string MethodName
            {
                get { return "get"; }
            }

            ///<summary>Gets the HTTP method.</summary>
            public override string HttpMethod
            {
                get { return "GET"; }
            }

            ///<summary>Gets the REST path.</summary>
            public override string RestPath
            {
                get { return "{domain}/accountInformation/edition"; }
            }

            /// <summary>Initializes Get parameter list.</summary>
            protected override void InitParameters()
            {
                base.InitParameters();

                RequestParameters.Add(
                    "domain", new Google.Apis.Discovery.Parameter
                    {
                        Name = "domain",
                        IsRequired = true,
                        ParameterType = "path",
                        DefaultValue = null,
                        Pattern = null,
                    });
            }

        }
    }

    /// <summary>The "ssoSettings" collection of methods.</summary>
    public class SsoSettingsResource
    {
        private const string Resource = "ssoSettings";

        /// <summary>The service which this resource belongs to.</summary>
        private readonly Google.Apis.Services.IClientService service;

        /// <summary>Constructs a new resource.</summary>
        public SsoSettingsResource(Google.Apis.Services.IClientService service)
        {
            this.service = service;

        }



        /// <param name="domain"></param>
        public virtual GetRequest Get(string domain)
        {
            return new GetRequest(service, domain);
        }


        public class GetRequest : AdminsettingsBaseServiceRequest<Google.Apis.admin.Adminsettings.adminsettings_v1.Data.SsoSettings>
        {
            /// <summary>Constructs a new Get request.</summary>
            public GetRequest(Google.Apis.Services.IClientService service, string domain)
                : base(service)
            {
                Domain = domain;
                InitParameters();
            }



            [Google.Apis.Util.RequestParameterAttribute("domain", Google.Apis.Util.RequestParameterType.Path)]
            public virtual string Domain { get; private set; }


            ///<summary>Gets the method name.</summary>
            public override string MethodName
            {
                get { return "get"; }
            }

            ///<summary>Gets the HTTP method.</summary>
            public override string HttpMethod
            {
                get { return "GET"; }
            }

            ///<summary>Gets the REST path.</summary>
            public override string RestPath
            {
                get { return "{domain}/sso/general"; }
            }

            /// <summary>Initializes Get parameter list.</summary>
            protected override void InitParameters()
            {
                base.InitParameters();

                RequestParameters.Add(
                    "domain", new Google.Apis.Discovery.Parameter
                    {
                        Name = "domain",
                        IsRequired = true,
                        ParameterType = "path",
                        DefaultValue = null,
                        Pattern = null,
                    });
            }

        }


        /// <param name="body">The body of the request.</param>
        /// <param name="domain"></param>
        public virtual UpdateRequest Update(Google.Apis.admin.Adminsettings.adminsettings_v1.Data.SsoSettings body, string domain)
        {
            return new UpdateRequest(service, body, domain);
        }


        public class UpdateRequest : AdminsettingsBaseServiceRequest<Google.Apis.admin.Adminsettings.adminsettings_v1.Data.SsoSettings>
        {
            /// <summary>Constructs a new Update request.</summary>
            public UpdateRequest(Google.Apis.Services.IClientService service, Google.Apis.admin.Adminsettings.adminsettings_v1.Data.SsoSettings body, string domain)
                : base(service)
            {
                Domain = domain;
                Body = body;
                InitParameters();
            }



            [Google.Apis.Util.RequestParameterAttribute("domain", Google.Apis.Util.RequestParameterType.Path)]
            public virtual string Domain { get; private set; }


            /// <summary>Gets or sets the body of this request.</summary>
            Google.Apis.admin.Adminsettings.adminsettings_v1.Data.SsoSettings Body { get; set; }

            ///<summary>Returns the body of the request.</summary>
            protected override object GetBody() { return Body; }

            ///<summary>Gets the method name.</summary>
            public override string MethodName
            {
                get { return "update"; }
            }

            ///<summary>Gets the HTTP method.</summary>
            public override string HttpMethod
            {
                get { return "PUT"; }
            }

            ///<summary>Gets the REST path.</summary>
            public override string RestPath
            {
                get { return "{domain}/sso/general"; }
            }

            /// <summary>Initializes Update parameter list.</summary>
            protected override void InitParameters()
            {
                base.InitParameters();

                RequestParameters.Add(
                    "domain", new Google.Apis.Discovery.Parameter
                    {
                        Name = "domain",
                        IsRequired = true,
                        ParameterType = "path",
                        DefaultValue = null,
                        Pattern = null,
                    });
            }

        }
    }

    /// <summary>The "ssoSigningKey" collection of methods.</summary>
    public class SsoSigningKeyResource
    {
        private const string Resource = "ssoSigningKey";

        /// <summary>The service which this resource belongs to.</summary>
        private readonly Google.Apis.Services.IClientService service;

        /// <summary>Constructs a new resource.</summary>
        public SsoSigningKeyResource(Google.Apis.Services.IClientService service)
        {
            this.service = service;

        }



        /// <param name="domain"></param>
        public virtual GetRequest Get(string domain)
        {
            return new GetRequest(service, domain);
        }


        public class GetRequest : AdminsettingsBaseServiceRequest<Google.Apis.admin.Adminsettings.adminsettings_v1.Data.SsoSigningKey>
        {
            /// <summary>Constructs a new Get request.</summary>
            public GetRequest(Google.Apis.Services.IClientService service, string domain)
                : base(service)
            {
                Domain = domain;
                InitParameters();
            }



            [Google.Apis.Util.RequestParameterAttribute("domain", Google.Apis.Util.RequestParameterType.Path)]
            public virtual string Domain { get; private set; }


            ///<summary>Gets the method name.</summary>
            public override string MethodName
            {
                get { return "get"; }
            }

            ///<summary>Gets the HTTP method.</summary>
            public override string HttpMethod
            {
                get { return "GET"; }
            }

            ///<summary>Gets the REST path.</summary>
            public override string RestPath
            {
                get { return "{domain}/sso/signingkey"; }
            }

            /// <summary>Initializes Get parameter list.</summary>
            protected override void InitParameters()
            {
                base.InitParameters();

                RequestParameters.Add(
                    "domain", new Google.Apis.Discovery.Parameter
                    {
                        Name = "domain",
                        IsRequired = true,
                        ParameterType = "path",
                        DefaultValue = null,
                        Pattern = null,
                    });
            }

        }


        /// <param name="body">The body of the request.</param>
        /// <param name="domain"></param>
        public virtual UpdateRequest Update(Google.Apis.admin.Adminsettings.adminsettings_v1.Data.SsoSigningKey body, string domain)
        {
            return new UpdateRequest(service, body, domain);
        }


        public class UpdateRequest : AdminsettingsBaseServiceRequest<Google.Apis.admin.Adminsettings.adminsettings_v1.Data.SsoSigningKey>
        {
            /// <summary>Constructs a new Update request.</summary>
            public UpdateRequest(Google.Apis.Services.IClientService service, Google.Apis.admin.Adminsettings.adminsettings_v1.Data.SsoSigningKey body, string domain)
                : base(service)
            {
                Domain = domain;
                Body = body;
                InitParameters();
            }



            [Google.Apis.Util.RequestParameterAttribute("domain", Google.Apis.Util.RequestParameterType.Path)]
            public virtual string Domain { get; private set; }


            /// <summary>Gets or sets the body of this request.</summary>
            Google.Apis.admin.Adminsettings.adminsettings_v1.Data.SsoSigningKey Body { get; set; }

            ///<summary>Returns the body of the request.</summary>
            protected override object GetBody() { return Body; }

            ///<summary>Gets the method name.</summary>
            public override string MethodName
            {
                get { return "update"; }
            }

            ///<summary>Gets the HTTP method.</summary>
            public override string HttpMethod
            {
                get { return "PUT"; }
            }

            ///<summary>Gets the REST path.</summary>
            public override string RestPath
            {
                get { return "{domain}/sso/signingkey"; }
            }

            /// <summary>Initializes Update parameter list.</summary>
            protected override void InitParameters()
            {
                base.InitParameters();

                RequestParameters.Add(
                    "domain", new Google.Apis.Discovery.Parameter
                    {
                        Name = "domain",
                        IsRequired = true,
                        ParameterType = "path",
                        DefaultValue = null,
                        Pattern = null,
                    });
            }

        }
    }
}
